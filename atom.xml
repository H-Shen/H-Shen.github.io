<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Haohu Shen&#39;s ePortfolio</title>
  
  <subtitle>Programming is the art of telling another human being what one wants the computer to do.</subtitle>
  <link href="https://h-shen.github.io/atom.xml" rel="self"/>
  
  <link href="https://h-shen.github.io/"/>
  <updated>2023-11-13T09:16:06.566Z</updated>
  <id>https://h-shen.github.io/</id>
  
  <author>
    <name>Haohu Shen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://h-shen.github.io/blog_08/"/>
    <id>https://h-shen.github.io/blog_08/</id>
    <published>2023-11-11T21:06:52.000Z</published>
    <updated>2023-11-13T09:16:06.566Z</updated>
    
    <content type="html"><![CDATA[<h3 id="The-Disjoint-Set-Union-and-its-Optimizations-in-the-Coding-Competition"><a href="#The-Disjoint-Set-Union-and-its-Optimizations-in-the-Coding-Competition" class="headerlink" title="The Disjoint Set Union and its Optimizations in the Coding Competition"></a>The Disjoint Set Union and its Optimizations in the Coding Competition</h3><h4 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h4><h5 id="0x00-Preface"><a href="#0x00-Preface" class="headerlink" title="0x00 Preface"></a>0x00 Preface</h5><h5 id="0x01-The-Normal-Disjoint-Set"><a href="#0x01-The-Normal-Disjoint-Set" class="headerlink" title="0x01 The Normal Disjoint Set"></a>0x01 The Normal Disjoint Set</h5><h5 id="0x02-The-Disjoint-Set-with-Path-Compression-Optimized"><a href="#0x02-The-Disjoint-Set-with-Path-Compression-Optimized" class="headerlink" title="0x02 The Disjoint Set with Path Compression Optimized"></a>0x02 The Disjoint Set with Path Compression Optimized</h5><h5 id="0x03-The-Disjoint-Set-with-Rank-By-Size-Optimized"><a href="#0x03-The-Disjoint-Set-with-Rank-By-Size-Optimized" class="headerlink" title="0x03 The Disjoint Set with Rank By Size Optimized"></a>0x03 The Disjoint Set with Rank By Size Optimized</h5><h5 id="0x04-The-Complexity-of-Operations-on-the-Disjoint-Set"><a href="#0x04-The-Complexity-of-Operations-on-the-Disjoint-Set" class="headerlink" title="0x04 The Complexity of Operations on the Disjoint Set"></a>0x04 The Complexity of Operations on the Disjoint Set</h5><h5 id="0x05-References-and-Exercises"><a href="#0x05-References-and-Exercises" class="headerlink" title="0x05 References and Exercises"></a>0x05 References and Exercises</h5><h4 id="0x00-Preface-1"><a href="#0x00-Preface-1" class="headerlink" title="0x00 Preface"></a>0x00 Preface</h4><p>The Disjoint Set, or Union Find, or DSU, is a data structure that provides some functions, suppose we are given several elements where each is a separate set, and we are also given some instructions to combine random sets, and the disjoint set can tell us if any of two elements are in the same set at any time. The data structure is pretty common in coding competitions, especially in graph problems. In this article, I will give a short introduction to the interface of a Disjoint Set, and then two optimizations on it.</p><h4 id="0x01-The-Normal-Disjoint-Set-1"><a href="#0x01-The-Normal-Disjoint-Set-1" class="headerlink" title="0x01 The Normal Disjoint Set"></a>0x01 The Normal Disjoint Set</h4><p>Any disjoint set should support three basic operations:</p><ul><li><p>Initialization: Given <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.009ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 888 683" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-7-TEX-I-1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D441" xlink:href="#MJX-7-TEX-I-1D441"></use></g></g></g></svg></mjx-container> elements, each element should be initialized as an isolated set.</p></li><li><p>Find: Given an element, return the set it belongs to</p></li><li><p>Merge: Given two element <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.697ex" height="1.62ex" role="img" focusable="false" viewBox="0 -716 750 716" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-7-TEX-I-1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D434" xlink:href="#MJX-7-TEX-I-1D434"></use></g></g></g></svg></mjx-container> and <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.717ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 759 683" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-6-TEX-I-1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D435" xlink:href="#MJX-6-TEX-I-1D435"></use></g></g></g></svg></mjx-container>, merge the set where <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.697ex" height="1.62ex" role="img" focusable="false" viewBox="0 -716 750 716" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-6-TEX-I-1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D434" xlink:href="#MJX-6-TEX-I-1D434"></use></g></g></g></svg></mjx-container> is and the set where <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.717ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 759 683" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-6-TEX-I-1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D435" xlink:href="#MJX-6-TEX-I-1D435"></use></g></g></g></svg></mjx-container> is as one.</p></li></ul><p>So you can see that DSU does not support the operation that splits two sets, but a modified DSU is able to support the deletion of a single element in a set, see <a href="https://open.kattis.com/problems/almostunionfind">Kattis Almost Union-Find</a>.</p><p>Thus, we can have the code for the initialization:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; father; <span class="comment">// father[i] = the set id of &#x27;i&#x27;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    father.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        father[i] = i;  <span class="comment">// the set id of &#x27;i&#x27; is &#x27;i&#x27; itself</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```            </span><br><span class="line"></span><br><span class="line">For finding in DSU, <span class="keyword">this</span> example may help you to understand, suppose there are several families having a party, because each family has many members <span class="keyword">and</span> each member has a pretty <span class="type">long</span> length of life, they only remember who are their fathers after many decades. The eldest person in a family is called the ancestor of the family. Thus <span class="keyword">if</span> someone wants to confirm which family he belongs to, he can ask his father, then his father can ask his grandfather, recursively, until someone asks the ancestor. Thus <span class="keyword">if</span> we want to confirm <span class="keyword">if</span> two members are in the same family, we can check <span class="keyword">if</span> they have the same ancestor.</span><br><span class="line"></span><br><span class="line">That is the **find** on DSU, <span class="keyword">and</span> here is the implementation:</span><br><span class="line"></span><br><span class="line">```<span class="function">cpp</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// find x&#x27;s ancestor</span></span><br><span class="line">    <span class="keyword">if</span> (father[x] == x) &#123;   <span class="comment">// if x is the ancestor himself, just return</span></span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// otherwise, let&#x27;s ask x&#x27;s father</span></span><br><span class="line">    <span class="keyword">return</span> father[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Apparently, the recursion will be eventually terminated if the ancestor is found.</p><h4 id="0x02-The-Disjoint-Set-with-Path-Compression-Optimized-1"><a href="#0x02-The-Disjoint-Set-with-Path-Compression-Optimized-1" class="headerlink" title="0x02 The Disjoint Set with Path Compression Optimized"></a>0x02 The Disjoint Set with Path Compression Optimized</h4><p>But it is inefficient to find the ancestor by asking fathers one by one, since who is my ancestor has nothing to do with who is my father, we can make the family member the son of the ancestor. It is not important who is the ancestor, as long as there is someone who can represent the whole family, thus, we can directly connect the node to the root of the tree, as below:</p><p><img src="/attaches/dsu_find.png" alt="demo of how DSU do the find operation"></p><p>The code is also easily implemented:</p><p>Thus the code can be easily implemented as below:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// If x is not the ancestor, then its father, also do the path compression</span></span><br><span class="line">    <span class="keyword">if</span> (x != father[x]) &#123;</span><br><span class="line">        father[x] = <span class="built_in">find</span>(father[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> father[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the party, an ancestor of a family wants to merge with another family since both families are in a good relationship. Just like I said before, we do not care who is the ancestor as long as there is someone who can represent the whole family. Thus we let one ancestor be the son of another ancestor. That is how two sets are merged in DSU, as below:</p><p><img src="/attaches/dsu_merge.png" alt="demo of how DSU do the merge operation"></p><p>The code is also easily implemented:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Find the ancestors of x and y</span></span><br><span class="line">    <span class="type">int</span> ancestor_x = <span class="built_in">find</span>(x);</span><br><span class="line">    <span class="type">int</span> ancestor_y = <span class="built_in">find</span>(y);</span><br><span class="line">    <span class="comment">// Return if they are in the same family already</span></span><br><span class="line">    <span class="keyword">if</span> (ancestor_x == ancestor_y) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// Otherwise, let x&#x27;s ancestor be the son of y&#x27;s ancestor</span></span><br><span class="line">    father[ancestor_x] = ancestor_y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="0x03-The-Disjoint-Set-with-Rank-By-Size-Optimized-1"><a href="#0x03-The-Disjoint-Set-with-Rank-By-Size-Optimized-1" class="headerlink" title="0x03 The Disjoint Set with Rank By Size Optimized"></a>0x03 The Disjoint Set with Rank By Size Optimized</h4><p>When we merge two sets in DSU, no matter which set is being merged into, the result is the same. But if we choose a different set to be merged into, the time complexity may be different. More specifically, if we merge a tree which represents a set in DSU with a smaller size or smaller depth into another tree with a bigger size or bigger depth, it is better than vice versa. Thus we can have another array to store the size of each set, and every time we merge two sets, we will choose the smaller set to be the one that is being merged into. And this is the optimization by size.</p><p>Here is the implementation:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">sizeOfSet</span>(n, <span class="number">1</span>);</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ancestor_x = <span class="built_in">find</span>(x);</span><br><span class="line">    <span class="type">int</span> ancestor_y = <span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (ancestor_x == ancestor_y) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (sizeOfSet[ancestor_x] &gt; sizeOfSet[ancestor_y]) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(ancestor_x, ancestor_y);</span><br><span class="line">    &#125;</span><br><span class="line">    father[ancestor_x] = ancestor_y;</span><br><span class="line">    <span class="comment">// Update the size</span></span><br><span class="line">    sizeOfSet[ancestor_y] += sizeOfSet[ancestor_x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="0x04-The-Complexity-of-Operations-on-the-Disjoint-Set-1"><a href="#0x04-The-Complexity-of-Operations-on-the-Disjoint-Set-1" class="headerlink" title="0x04 The Complexity of Operations on the Disjoint Set"></a>0x04 The Complexity of Operations on the Disjoint Set</h4><p>After applying the optimization of path compression and rank by size, the amortized time complexity of each operation in DSU is only <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.052ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3559 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-6-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path><path id="MJX-6-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-6-TEX-I-1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path><path id="MJX-6-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-6-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D442" xlink:href="#MJX-6-TEX-I-1D442"></use></g><g data-mml-node="mo" transform="translate(763,0)"><use data-c="28" xlink:href="#MJX-6-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1152,0)"><use data-c="1D6FC" xlink:href="#MJX-6-TEX-I-1D6FC"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1792,0)"><g data-mml-node="mo"><use data-c="28" xlink:href="#MJX-6-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(389,0)"><use data-c="1D45B" xlink:href="#MJX-6-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(989,0)"><use data-c="29" xlink:href="#MJX-6-TEX-N-29"></use></g></g><g data-mml-node="mo" transform="translate(3170,0)"><use data-c="29" xlink:href="#MJX-6-TEX-N-29"></use></g></g></g></svg></mjx-container> where <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.566ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2018 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-6-TEX-I-1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path><path id="MJX-6-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-6-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-6-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D6FC" xlink:href="#MJX-6-TEX-I-1D6FC"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(640,0)"><g data-mml-node="mo"><use data-c="28" xlink:href="#MJX-6-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(389,0)"><use data-c="1D45B" xlink:href="#MJX-6-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(989,0)"><use data-c="29" xlink:href="#MJX-6-TEX-N-29"></use></g></g></g></g></svg></mjx-container> is the inverse Ackermann function, which is less than 5 for any practical input size <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-6-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-6-TEX-I-1D45B"></use></g></g></g></svg></mjx-container>.</p><p>For space complexity, since we only use two arrays to store information, we can easily know it is <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.844ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2141 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-6-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path><path id="MJX-6-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-6-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-6-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D442" xlink:href="#MJX-6-TEX-I-1D442"></use></g><g data-mml-node="mo" transform="translate(763,0)"><use data-c="28" xlink:href="#MJX-6-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1152,0)"><use data-c="1D45B" xlink:href="#MJX-6-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(1752,0)"><use data-c="29" xlink:href="#MJX-6-TEX-N-29"></use></g></g></g></svg></mjx-container> where <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-6-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-6-TEX-I-1D45B"></use></g></g></g></svg></mjx-container> is the number of elements in the DSU.</p><p>Finally, we can wrap all functions mentioned above into a namespace:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> DSU &#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; father;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; Size;</span><br><span class="line">    <span class="comment">// initialization</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span></span></span><br><span class="line"><span class="function">    <span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(father);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(Size);</span><br><span class="line">        father.<span class="built_in">resize</span>(n);</span><br><span class="line">        <span class="built_in">iota</span>(father.<span class="built_in">begin</span>(), father.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        Size.<span class="built_in">resize</span>(n, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span></span></span><br><span class="line"><span class="function">    <span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x != father[x]) &#123;</span><br><span class="line">            father[x] = <span class="built_in">find</span>(father[x]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> father[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// merge x and y</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span></span></span><br><span class="line"><span class="function">    <span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        x = <span class="built_in">find</span>(x);</span><br><span class="line">        y = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (x == y) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Size[x] &gt; Size[y]) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        father[x] = y;</span><br><span class="line">        Size[y] += Size[x];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// check if x and y are in the same set</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span></span></span><br><span class="line"><span class="function">    <span class="type">bool</span> <span class="title">is_same_group</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">find</span>(i) == <span class="built_in">find</span>(j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="0x05-References-and-Exercises-1"><a href="#0x05-References-and-Exercises-1" class="headerlink" title="0x05 References and Exercises"></a>0x05 References and Exercises</h4><p><a href="https://en.wikipedia.org/wiki/Ackermann_function">Ackermann function</a></p><p><a href="https://cp-algorithms.com/data_structures/disjoint_set_union.html">Disjoint Set Union</a></p><p><a href="https://open.kattis.com/problems/control">Association for Control Over Minds</a></p><p><a href="https://open.kattis.com/problems/tildes">Tildes</a></p><p><a href="https://open.kattis.com/problems/unionfind">Union-Find</a></p><p><a href="https://open.kattis.com/problems/virtualfriends">Virtual Friends</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;The-Disjoint-Set-Union-and-its-Optimizations-in-the-Coding-Competition&quot;&gt;&lt;a href=&quot;#The-Disjoint-Set-Union-and-its-Optimizations-in-th</summary>
      
    
    
    
    
    <category term="Blogs" scheme="https://h-shen.github.io/tags/Blogs/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://h-shen.github.io/blog_07/"/>
    <id>https://h-shen.github.io/blog_07/</id>
    <published>2023-11-11T21:06:43.000Z</published>
    <updated>2023-11-12T10:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="The-Application-of-Policy-Based-Data-Structure-in-GCC-for-Coding-Competition"><a href="#The-Application-of-Policy-Based-Data-Structure-in-GCC-for-Coding-Competition" class="headerlink" title="The Application of Policy-Based Data Structure in GCC for Coding Competition"></a>The Application of Policy-Based Data Structure in GCC for Coding Competition</h3><h4 id="0x00-Preface"><a href="#0x00-Preface" class="headerlink" title="0x00 Preface"></a>0x00 Preface</h4><p>If you ask a C++ coding competitor why he or she chooses such language, he or she may tell you one reason is that C++ STL is powerful since it has already provided a lot of data structures, such as priority queue, and hashmap. It also provides some built-in algorithms, covering sorting, merging, and high-order functions. However, STL still does not provide some other data structures, such as <strong>trie</strong> for coding competitors. Luckily we have a GCC extension called <strong>Policy Based Data Structure</strong> (PBDS) that covers some advanced data structures, such as a red-black tree that has order statistics, a trie or a pairing heap. If we are allowed to use them in the competition, it will hugely save you time and you don’t need to implement them again and again.</p><p>Unlike my other articles, this article is a short introduction to some basic usage of this extension. And before that, you need to include its relative header files like this:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span> <span class="comment">// include C++ standard lib</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ext/pb_ds/tree_policy.hpp&gt;</span>    <span class="comment">// include this to use rbtree</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ext/pb_ds/hash_policy.hpp&gt;</span>    <span class="comment">// include this to use hashmap</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ext/pb_ds/trie_policy.hpp&gt;</span> <span class="comment">// include this to use trie</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ext/pb_ds/priority_queue.hpp&gt;</span> <span class="comment">// include to use pairing heap</span></span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br></pre></td></tr></table></figure><p>Alternatively, there is another way to make it shorter, like this:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/extc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br></pre></td></tr></table></figure><h4 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h4><h5 id="0x00-Preface-1"><a href="#0x00-Preface-1" class="headerlink" title="0x00 Preface"></a>0x00 Preface</h5><h5 id="0x01-Hashmap-or-hashset-using-PBDS"><a href="#0x01-Hashmap-or-hashset-using-PBDS" class="headerlink" title="0x01 Hashmap or hashset using PBDS"></a>0x01 Hashmap or hashset using PBDS</h5><h5 id="0x02-Red-black-tree-of-PBDS"><a href="#0x02-Red-black-tree-of-PBDS" class="headerlink" title="0x02 Red black tree of PBDS"></a>0x02 Red black tree of PBDS</h5><h5 id="0x03-Trie-of-PBDS"><a href="#0x03-Trie-of-PBDS" class="headerlink" title="0x03 Trie of PBDS"></a>0x03 Trie of PBDS</h5><h5 id="0x04-Priority-Queue-of-PBDS"><a href="#0x04-Priority-Queue-of-PBDS" class="headerlink" title="0x04 Priority Queue of PBDS"></a>0x04 Priority Queue of PBDS</h5><h5 id="0x05-Reference-and-Exercises"><a href="#0x05-Reference-and-Exercises" class="headerlink" title="0x05 Reference and Exercises"></a>0x05 Reference and Exercises</h5><h4 id="0x01-Hashmap-or-hashset-using-PBDS-1"><a href="#0x01-Hashmap-or-hashset-using-PBDS-1" class="headerlink" title="0x01 Hashmap or hashset using PBDS"></a>0x01 Hashmap or hashset using PBDS</h4><p>There are two types of hash maps in PBDS, we can define them like this:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cc_hash_table&lt;<span class="type">int</span>, <span class="type">int</span>&gt; ht_cc;</span><br><span class="line">gp_hash_table&lt;<span class="type">int</span>, <span class="type">int</span>&gt; ht_gp;</span><br></pre></td></tr></table></figure><p>Unlike <strong>std::unordered_map</strong>, <strong>cc_hash_table</strong> are collision-chaining hash-based, while <strong>gp_hash_table</strong> are probing hash-based.</p><p>If you want to make them into hash sets, we can define their values like this:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cc_hash_table&lt;<span class="type">int</span>, null_type&gt; hs_cc;</span><br><span class="line">gp_hash_table&lt;<span class="type">int</span>, null_type&gt; hs_gp;</span><br></pre></td></tr></table></figure><p>And its usage is pretty similar to <strong>std::unordered_map</strong>, here is an example:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/extc++.h&gt;</span></span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    gp_hash_table&lt;<span class="type">int</span>, <span class="type">int</span>&gt; ht;</span><br><span class="line">    ht.<span class="built_in">insert</span>(&#123;<span class="number">1</span>, <span class="number">2</span>&#125;);  <span class="comment">// insertion</span></span><br><span class="line">    <span class="built_in">assert</span>(ht[<span class="number">1</span>] == <span class="number">2</span>);</span><br><span class="line">    ht[<span class="number">1</span>] = <span class="number">5</span>;  <span class="comment">// update</span></span><br><span class="line">    <span class="built_in">assert</span>(ht[<span class="number">1</span>] == <span class="number">5</span>);</span><br><span class="line">    ht.<span class="built_in">erase</span>(<span class="number">1</span>);    <span class="comment">// remove</span></span><br><span class="line">    <span class="built_in">assert</span>(ht.<span class="built_in">find</span>(<span class="number">1</span>) == ht.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">assert</span>(ht.<span class="built_in">empty</span>());  <span class="comment">// check if it is empty</span></span><br><span class="line">    ht.<span class="built_in">insert</span>(&#123;<span class="number">2</span>, <span class="number">2</span>&#125;);</span><br><span class="line">    <span class="built_in">assert</span>(ht.<span class="built_in">size</span>() == <span class="number">1</span>); <span class="comment">// check its size</span></span><br><span class="line">    ht.<span class="built_in">clear</span>(); <span class="comment">// clear all pairs</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Similar to <strong>std::unordered_map</strong>, you can also provide a custom hash function to it:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/extc++.h&gt;</span></span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="keyword">using</span> pii = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Custom_Hash</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> pii &amp;obj)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hash</span>&lt;<span class="type">int</span>&gt;()(obj.first) ^ <span class="built_in">hash</span>&lt;<span class="type">int</span>&gt;()(obj.second);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    gp_hash_table&lt;pii, <span class="type">int</span>, Custom_Hash&gt; ht;</span><br><span class="line">    ht.<span class="built_in">insert</span>(&#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, <span class="number">6</span>&#125;);</span><br><span class="line">    <span class="built_in">assert</span>((ht[&#123;<span class="number">1</span>, <span class="number">2</span>&#125;] == <span class="number">6</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So how is its performance, well, I did a benchmark on these 3 types of hashmaps by insertion and deletion of numbers from 0 to 1000000 multiple times to compare their average time cost and here is the result:</p><p><img src="/attaches/hashmap_benchmark.png" alt="benchmark on three types of hashmap"></p><p>So normally if <strong>gp_hash_table</strong> is allowed in the competition, it would be your first choice, a better hash function will further help increase the performance.</p><h4 id="0x02-Red-black-tree-of-PBDS-1"><a href="#0x02-Red-black-tree-of-PBDS-1" class="headerlink" title="0x02 Red black tree of PBDS"></a>0x02 Red black tree of PBDS</h4><p>Since the data structure under <strong>std::map</strong> is a red-black tree, it has no public API and it does not provide a rank-query interface. Luckily, PBDS provides three types of balanced trees, that is red-black tree, splay tree and ov-tree. I will focus on the red-black tree since it is faster in most cases than the other two, here is an example, and remember, keys in a red-black tree are unique:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/extc++.h&gt;</span></span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> first;</span><br><span class="line">    <span class="type">int</span> second;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Node</span><span class="params">(<span class="type">int</span> first, <span class="type">int</span> second)</span> : first(first), second(second) &#123;</span>&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Node &amp;obj) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (first == obj.first) &#123;</span><br><span class="line">            <span class="keyword">return</span> second &lt; obj.second;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> first &lt; obj.first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> Node &amp;rhs) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> first == rhs.first &amp;&amp;</span><br><span class="line">                second == rhs.second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">using</span> RBTreeOfNode =</span><br><span class="line">tree&lt;</span><br><span class="line">        Node,           <span class="comment">// The data that stores in the tree</span></span><br><span class="line">        null_type,  <span class="comment">// Just keys, no mapping values</span></span><br><span class="line">        less&lt;&gt;,     <span class="comment">// Order by &lt;</span></span><br><span class="line">        rb_tree_tag,    <span class="comment">// Use RBTree</span></span><br><span class="line">        tree_order_statistics_node_update <span class="comment">// The policy of update</span></span><br><span class="line">&gt;;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Define a red-black tree with its default constructor</span></span><br><span class="line">    RBTreeOfNode Rbtree;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// insertion</span></span><br><span class="line">    Rbtree.<span class="built_in">insert</span>(<span class="built_in">Node</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">    Rbtree.<span class="built_in">insert</span>(<span class="built_in">Node</span>(<span class="number">1</span>, <span class="number">3</span>));</span><br><span class="line">    Rbtree.<span class="built_in">insert</span>(<span class="built_in">Node</span>(<span class="number">1</span>, <span class="number">7</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// deletion</span></span><br><span class="line">    Rbtree.<span class="built_in">erase</span>(<span class="built_in">Node</span>(<span class="number">1</span>, <span class="number">3</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// obtain the rank</span></span><br><span class="line">    <span class="built_in">assert</span>(Rbtree.<span class="built_in">order_of_key</span>(<span class="built_in">Node</span>(<span class="number">1</span>, <span class="number">2</span>)) == <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// obtain the kth element and return an iterator</span></span><br><span class="line">    <span class="built_in">assert</span>((*Rbtree.<span class="built_in">find_by_order</span>(<span class="number">0</span>)) == <span class="built_in">Node</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">    </span><br><span class="line">    RBTreeOfNode Rbtree2;</span><br><span class="line">    Rbtree2.<span class="built_in">insert</span>(<span class="built_in">Node</span>(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">    <span class="comment">// Merge Rbtree2 into Rbtree, thus Rbtree2 will be empty</span></span><br><span class="line">    Rbtree.<span class="built_in">join</span>(Rbtree2);</span><br><span class="line">    <span class="built_in">assert</span>(Rbtree2.<span class="built_in">empty</span>());    <span class="comment">// check if it is empty</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Split Rbtree, all keys in Rbtree &lt;= Node(1, 1) remain in Rbtree,</span></span><br><span class="line">    <span class="comment">//Others will move to Rbtree2</span></span><br><span class="line">    Rbtree.<span class="built_in">split</span>(<span class="built_in">Node</span>(<span class="number">1</span>, <span class="number">2</span>), Rbtree2);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Check size</span></span><br><span class="line">    <span class="built_in">assert</span>(Rbtree.<span class="built_in">size</span>() == <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    Rbtree.<span class="built_in">insert</span>(<span class="built_in">Node</span>(<span class="number">1</span>, <span class="number">3</span>));</span><br><span class="line">    Rbtree.<span class="built_in">insert</span>(<span class="built_in">Node</span>(<span class="number">1</span>, <span class="number">4</span>));</span><br><span class="line">    <span class="comment">// Return the iterator to the first key that is &gt;= Node(1,3)</span></span><br><span class="line">    <span class="built_in">assert</span>(*Rbtree.<span class="built_in">lower_bound</span>(<span class="built_in">Node</span>(<span class="number">1</span>,<span class="number">3</span>)) == <span class="built_in">Node</span>(<span class="number">1</span>,<span class="number">3</span>));</span><br><span class="line">    <span class="comment">// Return the iterator to the first key that is &gt; Node(1,3)</span></span><br><span class="line">    <span class="built_in">assert</span>(*Rbtree.<span class="built_in">upper_bound</span>(<span class="built_in">Node</span>(<span class="number">1</span>,<span class="number">3</span>)) == <span class="built_in">Node</span>(<span class="number">1</span>,<span class="number">4</span>));</span><br><span class="line">    <span class="comment">// If no such key is found, return to the end of the tree</span></span><br><span class="line">    <span class="built_in">assert</span>(Rbtree.<span class="built_in">upper_bound</span>(<span class="built_in">Node</span>(<span class="number">1</span>, <span class="number">4</span>)) == Rbtree.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And remember that all operations above except for the size checking is <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.112ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3585.7 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-6-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path><path id="MJX-6-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-6-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-6-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-6-TEX-N-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"></path><path id="MJX-6-TEX-N-2061" d=""></path><path id="MJX-6-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-6-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D442" xlink:href="#MJX-6-TEX-I-1D442"></use></g><g data-mml-node="mo" transform="translate(763,0)"><use data-c="28" xlink:href="#MJX-6-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1152,0)"><use data-c="6C" xlink:href="#MJX-6-TEX-N-6C"></use><use data-c="6F" xlink:href="#MJX-6-TEX-N-6F" transform="translate(278,0)"></use><use data-c="67" xlink:href="#MJX-6-TEX-N-67" transform="translate(778,0)"></use></g><g data-mml-node="mo" transform="translate(2430,0)"><use data-c="2061" xlink:href="#MJX-6-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2596.7,0)"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-6-TEX-I-1D45B"></use></g></g><g data-mml-node="mo" transform="translate(3196.7,0)"><use data-c="29" xlink:href="#MJX-6-TEX-N-29"></use></g></g></g></svg></mjx-container> where <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-6-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-6-TEX-I-1D45B"></use></g></g></g></svg></mjx-container> is the number of nodes in the tree.</p><h4 id="0x03-Trie-of-PBDS-1"><a href="#0x03-Trie-of-PBDS-1" class="headerlink" title="0x03 Trie of PBDS"></a>0x03 Trie of PBDS</h4><p>The way to define and use a trie is pretty similar to the red-black tree, here is an example:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/extc++.h&gt;</span></span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">using</span> Trie =</span><br><span class="line">trie&lt;</span><br><span class="line">        string,</span><br><span class="line">        null_type,</span><br><span class="line">        trie_string_access_traits&lt;&gt;,</span><br><span class="line">        pat_trie_tag,</span><br><span class="line">        trie_prefix_search_node_update</span><br><span class="line">&gt;;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Define a trie with its default constructor</span></span><br><span class="line">    Trie t;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// insertion</span></span><br><span class="line">    t.<span class="built_in">insert</span>(<span class="string">&quot;abcd&quot;</span>);</span><br><span class="line">    t.<span class="built_in">insert</span>(<span class="string">&quot;abcde&quot;</span>);</span><br><span class="line">    t.<span class="built_in">insert</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    t.<span class="built_in">insert</span>(<span class="string">&quot;abcdef&quot;</span>);</span><br><span class="line">    t.<span class="built_in">insert</span>(<span class="string">&quot;bcde&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// erase</span></span><br><span class="line">    t.<span class="built_in">erase</span>(<span class="string">&quot;abcde&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// check size</span></span><br><span class="line">    <span class="built_in">assert</span>(!t.<span class="built_in">empty</span>());</span><br><span class="line">    <span class="built_in">assert</span>(t.<span class="built_in">size</span>() == <span class="number">4</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// search</span></span><br><span class="line">    <span class="built_in">assert</span>(t.<span class="built_in">find</span>(<span class="string">&quot;abcde&quot;</span>) == t.<span class="built_in">end</span>());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// iterate and print all strings with the prefix &quot;abc&quot;</span></span><br><span class="line">    <span class="keyword">auto</span> range = t.<span class="built_in">prefix_range</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = range.first; it != range.second; ++it) &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="0x04-Priority-Queue-of-PBDS-1"><a href="#0x04-Priority-Queue-of-PBDS-1" class="headerlink" title="0x04 Priority Queue of PBDS"></a>0x04 Priority Queue of PBDS</h4><p>There are multiple implementations of priority queue in PBDS, all of them can be defined as below, with integers as keys:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;<span class="type">int</span>, greater&lt;&gt;, tag&gt; min_heap;   <span class="comment">// min-heap</span></span><br><span class="line">priority_queue&lt;<span class="type">int</span>, less&lt;&gt;, tag&gt; max_heap;      <span class="comment">// max-heap</span></span><br></pre></td></tr></table></figure><p>The <strong>tag</strong> can be <strong>pairing_heap_tag</strong>, <strong>thin_heap_tag</strong>, <strong>binomial_heap_tag</strong>, <strong>rc_binomial_heap_tag</strong>, <strong>binary_heap_tag</strong>, here is the complexities of the different underlying data structures in terms of orders of growth, which comes from the GNU official’s documentation:</p><p><img src="/attaches/pbds_complexity.png" alt="screenshot of time complexity of each type of pq"></p><p>Thus, in most cases, you should choose the pairing heap as the first option, since it is faster than the other five types of heaps. At the end of the article, I will share with you the implementation of Dijkstra’s algorithm for searching the shortest path from <strong>a</strong> to <strong>b</strong> using a pairing heap, which is a template I use often in the coding competitions:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/extc++.h&gt;</span></span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> pii = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// The implementation of Dijkstra using an adjacency list</span></span><br><span class="line"><span class="keyword">namespace</span> Dijkstra &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>; <span class="comment">//  A weight indicates two nodes have no paths between them</span></span><br><span class="line">    vector&lt;vector&lt;pii&gt; &gt; adj; <span class="comment">// The adjacency list of the graph</span></span><br><span class="line">    <span class="type">int</span> number_of_nodes;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; dis;    <span class="comment">// dis.at(n) = the shortest distance from source to n</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span></span></span><br><span class="line"><span class="function">    <span class="title">init</span><span class="params">(<span class="type">int</span> n, <span class="type">bool</span> store_path = <span class="literal">false</span>)</span> </span>&#123;</span><br><span class="line">        number_of_nodes = n;</span><br><span class="line">        <span class="comment">// initialize the containers</span></span><br><span class="line">        adj.<span class="built_in">resize</span>(number_of_nodes + <span class="number">5</span>);</span><br><span class="line">        dis.<span class="built_in">resize</span>(number_of_nodes + <span class="number">5</span>, INF);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span></span></span><br><span class="line"><span class="function">    <span class="title">add_edge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">        adj.<span class="built_in">at</span>(u).<span class="built_in">emplace_back</span>(<span class="built_in">make_pair</span>(v, w));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span></span></span><br><span class="line"><span class="function">    <span class="title">dijkstra</span><span class="params">(<span class="type">int</span> source)</span> </span>&#123;</span><br><span class="line">        dis.<span class="built_in">at</span>(source) = <span class="number">0</span>;</span><br><span class="line">        __gnu_pbds::priority_queue&lt;pii, greater&lt;&gt;, pairing_heap_tag &gt; pq;</span><br><span class="line">        pq.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(dis.<span class="built_in">at</span>(source), source));</span><br><span class="line">        <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> d_v = pq.<span class="built_in">top</span>().first;</span><br><span class="line">            <span class="type">int</span> v = pq.<span class="built_in">top</span>().second;</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (d_v != dis.<span class="built_in">at</span>(v)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;[to, weight] : adj.<span class="built_in">at</span>(v)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dis.<span class="built_in">at</span>(to) &gt; dis.<span class="built_in">at</span>(v) + weight) &#123;</span><br><span class="line">                    dis.<span class="built_in">at</span>(to) = dis.<span class="built_in">at</span>(v) + weight;</span><br><span class="line">                    pq.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(dis.<span class="built_in">at</span>(to), to));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> number_of_nodes, number_of_edges, a, b, u, v, w;</span><br><span class="line">    cin &gt;&gt; number_of_nodes &gt;&gt; number_of_edges &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    Dijkstra::<span class="built_in">init</span>(number_of_nodes);</span><br><span class="line">    <span class="keyword">while</span> (number_of_edges--) &#123;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        Dijkstra::<span class="built_in">add_edge</span>(u, v, w);</span><br><span class="line">    &#125;</span><br><span class="line">    Dijkstra::<span class="built_in">dijkstra</span>(a);</span><br><span class="line">    <span class="keyword">if</span> (Dijkstra::dis.<span class="built_in">at</span>(b) == Dijkstra::INF) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;No routes from a to b!&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; Dijkstra::dis.<span class="built_in">at</span>(b);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="0x05-Reference-and-Exercises-1"><a href="#0x05-Reference-and-Exercises-1" class="headerlink" title="0x05 Reference and Exercises"></a>0x05 Reference and Exercises</h4><p><a href="https://codeforces.com/blog/entry/11080">C++ STL: Policy-based data structures</a></p><p><a href="https://gcc.gnu.org/onlinedocs/libstdc++/manual/policy_based_data_structures_test.html">Performance of PBDS</a></p><p><a href="https://open.kattis.com/problems/babynames">Kattis: Baby Names</a></p><p><a href="https://open.kattis.com/problems/continuousmedian">Kattis: Continuous Median</a></p><p><a href="https://open.kattis.com/problems/gcpc">Kattis: Galactic Collegiate Programming Contest</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;The-Application-of-Policy-Based-Data-Structure-in-GCC-for-Coding-Competition&quot;&gt;&lt;a href=&quot;#The-Application-of-Policy-Based-Data-Structu</summary>
      
    
    
    
    
    <category term="Blogs" scheme="https://h-shen.github.io/tags/Blogs/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://h-shen.github.io/blog_06/"/>
    <id>https://h-shen.github.io/blog_06/</id>
    <published>2023-11-11T21:06:37.000Z</published>
    <updated>2023-11-12T10:19:36.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="The-Tricks-of-Modulo-Operation-with-Exponentiation-for-Coding-Competition"><a href="#The-Tricks-of-Modulo-Operation-with-Exponentiation-for-Coding-Competition" class="headerlink" title="The Tricks of Modulo Operation with Exponentiation for Coding Competition"></a>The Tricks of Modulo Operation with Exponentiation for Coding Competition</h4><h4 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h4><h5 id="0x00-Preface"><a href="#0x00-Preface" class="headerlink" title="0x00 Preface"></a>0x00 Preface</h5><h5 id="0x01-Multiplication-with-Modulo-Operation"><a href="#0x01-Multiplication-with-Modulo-Operation" class="headerlink" title="0x01 Multiplication with Modulo Operation"></a>0x01 Multiplication with Modulo Operation</h5><h5 id="0x02-Exponentiation-with-Modulo-Operation"><a href="#0x02-Exponentiation-with-Modulo-Operation" class="headerlink" title="0x02 Exponentiation with Modulo Operation"></a>0x02 Exponentiation with Modulo Operation</h5><h5 id="0x03-Exponentiation-of-Matrix-with-Modulo-Operation"><a href="#0x03-Exponentiation-of-Matrix-with-Modulo-Operation" class="headerlink" title="0x03 Exponentiation of Matrix with Modulo Operation"></a>0x03 Exponentiation of Matrix with Modulo Operation</h5><h5 id="0x04-References"><a href="#0x04-References" class="headerlink" title="0x04 References"></a>0x04 References</h5><h5 id="0x00-Preface-1"><a href="#0x00-Preface-1" class="headerlink" title="0x00 Preface"></a>0x00 Preface</h5><p>Modulo operations with integers and modulo operations under exponentiation are pretty common in math-related problems in coding competitions. In this article, I am going to share with you some techniques I used for such problems. Before that, if you are familiar with the basic of modulo operation you can just skip this part, otherwise take a look at the properties of modulo operation listed below:</p><ul><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.552ex;" xmlns="http://www.w3.org/2000/svg" width="22.809ex" height="4.701ex" role="img" focusable="false" viewBox="0 -1392 10081.6 2078" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-5-TEX-I-1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path><path id="MJX-5-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-5-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-5-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path><path id="MJX-5-TEX-I-1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path><path id="MJX-5-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-5-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-5-TEX-N-230A" d="M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z"></path><path id="MJX-5-TEX-N-230B" d="M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D434" xlink:href="#MJX-5-TEX-I-1D434"></use></g></g><g data-mml-node="mo" transform="translate(1027.8,0)"><use data-c="6D" xlink:href="#MJX-5-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-5-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-5-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3194.6,0)"><g data-mml-node="mi"><use data-c="1D443" xlink:href="#MJX-5-TEX-I-1D443"></use></g></g><g data-mml-node="mo" transform="translate(4223.3,0)"><use data-c="3D" xlink:href="#MJX-5-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(5279.1,0)"><use data-c="1D434" xlink:href="#MJX-5-TEX-I-1D434"></use></g><g data-mml-node="mo" transform="translate(6251.3,0)"><use data-c="2212" xlink:href="#MJX-5-TEX-N-2212"></use></g><g data-mml-node="mo" transform="translate(7251.6,0)"><use data-c="230A" xlink:href="#MJX-5-TEX-N-230A"></use></g><g data-mml-node="mstyle" transform="translate(7695.6,0)"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(220.5,676)"><use data-c="1D434" xlink:href="#MJX-5-TEX-I-1D434"></use></g><g data-mml-node="mi" transform="translate(220,-686)"><use data-c="1D443" xlink:href="#MJX-5-TEX-I-1D443"></use></g><rect width="951" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mo" transform="translate(8886.6,0)"><use data-c="230B" xlink:href="#MJX-5-TEX-N-230B"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(9330.6,0)"><g data-mml-node="mi"><use data-c="1D443" xlink:href="#MJX-5-TEX-I-1D443"></use></g></g></g></g></svg></mjx-container></li><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="47.816ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 21134.7 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-5-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-5-TEX-I-1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path><path id="MJX-5-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-5-TEX-I-1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path><path id="MJX-5-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-5-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-5-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-5-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path><path id="MJX-5-TEX-I-1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path><path id="MJX-5-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo"><use data-c="28" xlink:href="#MJX-5-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(389,0)"><use data-c="1D434" xlink:href="#MJX-5-TEX-I-1D434"></use></g><g data-mml-node="mo" transform="translate(1361.2,0)"><use data-c="2B" xlink:href="#MJX-5-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(2361.4,0)"><use data-c="1D435" xlink:href="#MJX-5-TEX-I-1D435"></use></g><g data-mml-node="mo" transform="translate(3120.4,0)"><use data-c="29" xlink:href="#MJX-5-TEX-N-29"></use></g></g><g data-mml-node="mo" transform="translate(3787.2,0)"><use data-c="6D" xlink:href="#MJX-5-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-5-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-5-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(5954,0)"><g data-mml-node="mi"><use data-c="1D443" xlink:href="#MJX-5-TEX-I-1D443"></use></g></g><g data-mml-node="mo" transform="translate(6982.8,0)"><use data-c="3D" xlink:href="#MJX-5-TEX-N-3D"></use></g><g data-mml-node="mo" transform="translate(8038.6,0)"><use data-c="28" xlink:href="#MJX-5-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(8427.6,0)"><use data-c="1D434" xlink:href="#MJX-5-TEX-I-1D434"></use></g><g data-mml-node="mo" transform="translate(9455.3,0)"><use data-c="6D" xlink:href="#MJX-5-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-5-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-5-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mi" transform="translate(11622.1,0)"><use data-c="1D443" xlink:href="#MJX-5-TEX-I-1D443"></use></g><g data-mml-node="mo" transform="translate(12595.3,0)"><use data-c="2B" xlink:href="#MJX-5-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(13595.6,0)"><use data-c="1D435" xlink:href="#MJX-5-TEX-I-1D435"></use></g><g data-mml-node="mo" transform="translate(14632.3,0)"><use data-c="6D" xlink:href="#MJX-5-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-5-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-5-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mi" transform="translate(16799.1,0)"><use data-c="1D443" xlink:href="#MJX-5-TEX-I-1D443"></use></g><g data-mml-node="mo" transform="translate(17550.1,0)"><use data-c="29" xlink:href="#MJX-5-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(18216.9,0)"><use data-c="6D" xlink:href="#MJX-5-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-5-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-5-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mi" transform="translate(20383.7,0)"><use data-c="1D443" xlink:href="#MJX-5-TEX-I-1D443"></use></g></g></g></svg></mjx-container></li><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="44.045ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 19467.8 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-5-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-5-TEX-I-1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path><path id="MJX-5-TEX-I-1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path><path id="MJX-5-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-5-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-5-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-5-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path><path id="MJX-5-TEX-I-1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path><path id="MJX-5-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo"><use data-c="28" xlink:href="#MJX-5-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(389,0)"><use data-c="1D434" xlink:href="#MJX-5-TEX-I-1D434"></use></g><g data-mml-node="mi" transform="translate(1139,0)"><use data-c="1D435" xlink:href="#MJX-5-TEX-I-1D435"></use></g><g data-mml-node="mo" transform="translate(1898,0)"><use data-c="29" xlink:href="#MJX-5-TEX-N-29"></use></g></g><g data-mml-node="mo" transform="translate(2564.8,0)"><use data-c="6D" xlink:href="#MJX-5-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-5-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-5-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(4731.6,0)"><g data-mml-node="mi"><use data-c="1D443" xlink:href="#MJX-5-TEX-I-1D443"></use></g></g><g data-mml-node="mo" transform="translate(5760.3,0)"><use data-c="3D" xlink:href="#MJX-5-TEX-N-3D"></use></g><g data-mml-node="mo" transform="translate(6816.1,0)"><use data-c="28" xlink:href="#MJX-5-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(7205.1,0)"><use data-c="1D434" xlink:href="#MJX-5-TEX-I-1D434"></use></g><g data-mml-node="mo" transform="translate(8232.9,0)"><use data-c="6D" xlink:href="#MJX-5-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-5-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-5-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mi" transform="translate(10399.7,0)"><use data-c="1D443" xlink:href="#MJX-5-TEX-I-1D443"></use></g><g data-mml-node="mo" transform="translate(11150.7,0)"><use data-c="29" xlink:href="#MJX-5-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(11539.7,0)"><use data-c="28" xlink:href="#MJX-5-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(11928.7,0)"><use data-c="1D435" xlink:href="#MJX-5-TEX-I-1D435"></use></g><g data-mml-node="mo" transform="translate(12965.4,0)"><use data-c="6D" xlink:href="#MJX-5-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-5-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-5-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mi" transform="translate(15132.2,0)"><use data-c="1D443" xlink:href="#MJX-5-TEX-I-1D443"></use></g><g data-mml-node="mo" transform="translate(15883.2,0)"><use data-c="29" xlink:href="#MJX-5-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(16550,0)"><use data-c="6D" xlink:href="#MJX-5-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-5-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-5-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mi" transform="translate(18716.8,0)"><use data-c="1D443" xlink:href="#MJX-5-TEX-I-1D443"></use></g></g></g></svg></mjx-container></li></ul><p>And don’t forget <strong>a&gt;&gt;1</strong> equals to <strong>a&#x2F;2</strong>, <strong>a&amp;1</strong> equals to <strong>a%2</strong> in C++.</p><h4 id="0x01-Multiplication-with-Modulo-Operation-1"><a href="#0x01-Multiplication-with-Modulo-Operation-1" class="headerlink" title="0x01 Multiplication with Modulo Operation"></a>0x01 Multiplication with Modulo Operation</h4><p>Multiplication of integers with modulo operation is simple, as below, which takes constant time complexity:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> n, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>)((<span class="type">long</span> <span class="type">long</span>)a * n % p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>What about two integers of <strong>long long</strong> type, well, we can use recursion to calculate their product. Suppose we are calculating the product of <strong>a</strong> and <strong>n</strong>, then we can first calculate the product of <strong>a</strong> and <strong>n &#x2F; 2</strong>. Suppose that</p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.454ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4178.6 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-5-TEX-I-1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path><path id="MJX-5-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-5-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-5-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-5-TEX-N-2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path><path id="MJX-5-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D464" xlink:href="#MJX-5-TEX-I-1D464"></use></g><g data-mml-node="mo" transform="translate(993.8,0)"><use data-c="3D" xlink:href="#MJX-5-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(2049.6,0)"><use data-c="1D44E" xlink:href="#MJX-5-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(2578.6,0)"><use data-c="1D45B" xlink:href="#MJX-5-TEX-I-1D45B"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3178.6,0)"><g data-mml-node="mo"><use data-c="2F" xlink:href="#MJX-5-TEX-N-2F"></use></g></g><g data-mml-node="mn" transform="translate(3678.6,0)"><use data-c="32" xlink:href="#MJX-5-TEX-N-32"></use></g></g></g></svg></mjx-container><p>Then if <strong>n</strong> is odd, we can have</p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="12.285ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 5430 748" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-5-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-5-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-5-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-5-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-5-TEX-I-1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path><path id="MJX-5-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-5-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(529,0)"><use data-c="1D45B" xlink:href="#MJX-5-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(1406.8,0)"><use data-c="3D" xlink:href="#MJX-5-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(2462.6,0)"><use data-c="32" xlink:href="#MJX-5-TEX-N-32"></use></g><g data-mml-node="mi" transform="translate(2962.6,0)"><use data-c="1D464" xlink:href="#MJX-5-TEX-I-1D464"></use></g><g data-mml-node="mo" transform="translate(3900.8,0)"><use data-c="2B" xlink:href="#MJX-5-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(4901,0)"><use data-c="1D44E" xlink:href="#MJX-5-TEX-I-1D44E"></use></g></g></g></svg></mjx-container><p>Otherwise</p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="8.323ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 3678.6 748" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-5-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-5-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-5-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-5-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-5-TEX-I-1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-5-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(529,0)"><use data-c="1D45B" xlink:href="#MJX-5-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(1406.8,0)"><use data-c="3D" xlink:href="#MJX-5-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(2462.6,0)"><use data-c="32" xlink:href="#MJX-5-TEX-N-32"></use></g><g data-mml-node="mi" transform="translate(2962.6,0)"><use data-c="1D464" xlink:href="#MJX-5-TEX-I-1D464"></use></g></g></g></svg></mjx-container><p>Thus we can have an algorithm like this:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">mul</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> n, <span class="type">long</span> <span class="type">long</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;   <span class="comment">// Pruning</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> w = <span class="built_in">mul</span>(a, n &gt;&gt; <span class="number">1</span>, p);</span><br><span class="line">    <span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ((w &lt;&lt; <span class="number">1</span>) + a) % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (w &lt;&lt; <span class="number">1</span>) % p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And we will find the time complexity of the algorithm is <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.8ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3447.7 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-5-TEX-C-4F" d="M308 428Q289 428 289 438Q289 457 318 508T378 593Q417 638 475 671T599 705Q688 705 732 643T777 483Q777 380 733 285T620 123T464 18T293 -22Q188 -22 123 51T58 245Q58 327 87 403T159 533T249 626T333 685T388 705Q404 705 404 693Q404 674 363 649Q333 632 304 606T239 537T181 429T158 290Q158 179 214 114T364 48Q489 48 583 165T677 438Q677 473 670 505T648 568T601 617T528 636Q518 636 513 635Q486 629 460 600T419 544T392 490Q383 470 372 459Q341 430 308 428Z"></path><path id="MJX-5-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-5-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-5-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-5-TEX-N-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"></path><path id="MJX-5-TEX-N-2061" d=""></path><path id="MJX-5-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-5-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="4F" xlink:href="#MJX-5-TEX-C-4F"></use></g></g><g data-mml-node="mo" transform="translate(796,0)"><use data-c="28" xlink:href="#MJX-5-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1185,0)"><use data-c="6C" xlink:href="#MJX-5-TEX-N-6C"></use><use data-c="6F" xlink:href="#MJX-5-TEX-N-6F" transform="translate(278,0)"></use><use data-c="67" xlink:href="#MJX-5-TEX-N-67" transform="translate(778,0)"></use></g><g data-mml-node="mo" transform="translate(2463,0)"><use data-c="2061" xlink:href="#MJX-5-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2629.7,0)"><g data-mml-node="mi"><use data-c="1D44F" xlink:href="#MJX-5-TEX-I-1D44F"></use></g></g><g data-mml-node="mo" transform="translate(3058.7,0)"><use data-c="29" xlink:href="#MJX-5-TEX-N-29"></use></g></g></g></svg></mjx-container>.</p><p>But we can actually do it in constant time, that is, we first obtain the product of <strong>a</strong> and <strong>n</strong> no matter whether the result will overflow, then we convert it into <strong>long double</strong>, divided by <strong>p</strong>, and convert back to <strong>long long</strong>, finally we time it with <strong>p</strong> and subtract it by <strong>a * n</strong>, the trick here is both <strong>an</strong> and <strong>a(n &#x2F; p)p</strong> may both overflow, but their difference will be in the range, thus we can have the code like this:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">mul</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> n, <span class="type">long</span> <span class="type">long</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * n - (<span class="type">long</span> <span class="type">long</span>)((<span class="type">long</span> <span class="type">double</span>)a * n / p) * p;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="0x02-Exponentiation-with-Modulo-Operation-1"><a href="#0x02-Exponentiation-with-Modulo-Operation-1" class="headerlink" title="0x02 Exponentiation with Modulo Operation"></a>0x02 Exponentiation with Modulo Operation</h4><h5 id="Linear-calculation"><a href="#Linear-calculation" class="headerlink" title="Linear calculation"></a>Linear calculation</h5><p>The linear calculation is the most directly way, whose time complexity is linear to b, as below:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">linear_modpow</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> result = a;   <span class="comment">// Use &#x27;long long&#x27; to avoid overflow</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= b; ++i) &#123;</span><br><span class="line">        result = result * b % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Calculation-in-logarithmic-time"><a href="#Calculation-in-logarithmic-time" class="headerlink" title="Calculation in logarithmic time"></a>Calculation in logarithmic time</h5><p>That is,</p><p>Let <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="20.079ex" height="2.497ex" role="img" focusable="false" viewBox="0 -853.7 8874.8 1103.7" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-5-TEX-I-1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path><path id="MJX-5-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-5-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-5-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-5-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-5-TEX-I-1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path><path id="MJX-5-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-5-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-5-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-5-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-5-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D453" xlink:href="#MJX-5-TEX-I-1D453"></use></g><g data-mml-node="mo" transform="translate(550,0)"><use data-c="28" xlink:href="#MJX-5-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(939,0)"><use data-c="1D44E" xlink:href="#MJX-5-TEX-I-1D44E"></use></g><g data-mml-node="mo" transform="translate(1468,0)"><use data-c="2C" xlink:href="#MJX-5-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(1912.7,0)"><use data-c="1D44F" xlink:href="#MJX-5-TEX-I-1D44F"></use></g><g data-mml-node="mo" transform="translate(2341.7,0)"><use data-c="2C" xlink:href="#MJX-5-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(2786.3,0)"><use data-c="1D45D" xlink:href="#MJX-5-TEX-I-1D45D"></use></g><g data-mml-node="mo" transform="translate(3289.3,0)"><use data-c="29" xlink:href="#MJX-5-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(3956.1,0)"><use data-c="3D" xlink:href="#MJX-5-TEX-N-3D"></use></g><g data-mml-node="msup" transform="translate(5011.9,0)"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-5-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(562,363) scale(0.707)"><use data-c="1D44F" xlink:href="#MJX-5-TEX-I-1D44F"></use></g></g><g data-mml-node="mo" transform="translate(6205,0)"><use data-c="6D" xlink:href="#MJX-5-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-5-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-5-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mi" transform="translate(8371.8,0)"><use data-c="1D45D" xlink:href="#MJX-5-TEX-I-1D45D"></use></g></g></g></svg></mjx-container>, then:</p><p>If <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.971ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 429 705" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-5-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D44F" xlink:href="#MJX-5-TEX-I-1D44F"></use></g></g></g></svg></mjx-container> is even, then:</p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="57.043ex" height="2.587ex" role="img" focusable="false" viewBox="0 -893.3 25213 1143.3" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-5-TEX-I-1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path><path id="MJX-5-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-5-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-5-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-5-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-5-TEX-I-1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path><path id="MJX-5-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-5-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-5-TEX-N-2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path><path id="MJX-5-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-5-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-5-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-5-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D453" xlink:href="#MJX-5-TEX-I-1D453"></use></g><g data-mml-node="mo" transform="translate(550,0)"><use data-c="28" xlink:href="#MJX-5-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(939,0)"><use data-c="1D44E" xlink:href="#MJX-5-TEX-I-1D44E"></use></g><g data-mml-node="mo" transform="translate(1468,0)"><use data-c="2C" xlink:href="#MJX-5-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(1912.7,0)"><use data-c="1D44F" xlink:href="#MJX-5-TEX-I-1D44F"></use></g><g data-mml-node="mo" transform="translate(2341.7,0)"><use data-c="2C" xlink:href="#MJX-5-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(2786.3,0)"><use data-c="1D45D" xlink:href="#MJX-5-TEX-I-1D45D"></use></g><g data-mml-node="mo" transform="translate(3289.3,0)"><use data-c="29" xlink:href="#MJX-5-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(3956.1,0)"><use data-c="3D" xlink:href="#MJX-5-TEX-N-3D"></use></g><g data-mml-node="mo" transform="translate(5011.9,0)"><use data-c="28" xlink:href="#MJX-5-TEX-N-28"></use></g><g data-mml-node="msup" transform="translate(5400.9,0)"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-5-TEX-I-1D44E"></use></g><g data-mml-node="TeXAtom" transform="translate(562,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D44F" xlink:href="#MJX-5-TEX-I-1D44F"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(429,0)"><g data-mml-node="mo"><use data-c="2F" xlink:href="#MJX-5-TEX-N-2F"></use></g></g><g data-mml-node="mn" transform="translate(929,0)"><use data-c="32" xlink:href="#MJX-5-TEX-N-32"></use></g></g></g><g data-mml-node="msup" transform="translate(7023.3,0)"><g data-mml-node="mo"><use data-c="29" xlink:href="#MJX-5-TEX-N-29"></use></g><g data-mml-node="mn" transform="translate(422,363) scale(0.707)"><use data-c="32" xlink:href="#MJX-5-TEX-N-32"></use></g></g><g data-mml-node="mo" transform="translate(8126.7,0)"><use data-c="6D" xlink:href="#MJX-5-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-5-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-5-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mi" transform="translate(10293.5,0)"><use data-c="1D45D" xlink:href="#MJX-5-TEX-I-1D45D"></use></g><g data-mml-node="mo" transform="translate(11074.2,0)"><use data-c="3D" xlink:href="#MJX-5-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(12130,0)"><use data-c="1D453" xlink:href="#MJX-5-TEX-I-1D453"></use></g><g data-mml-node="mo" transform="translate(12680,0)"><use data-c="28" xlink:href="#MJX-5-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(13069,0)"><use data-c="1D44E" xlink:href="#MJX-5-TEX-I-1D44E"></use></g><g data-mml-node="mo" transform="translate(13598,0)"><use data-c="2C" xlink:href="#MJX-5-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(14042.7,0)"><use data-c="1D44F" xlink:href="#MJX-5-TEX-I-1D44F"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(14471.7,0)"><g data-mml-node="mo"><use data-c="2F" xlink:href="#MJX-5-TEX-N-2F"></use></g></g><g data-mml-node="mn" transform="translate(14971.7,0)"><use data-c="32" xlink:href="#MJX-5-TEX-N-32"></use></g><g data-mml-node="mo" transform="translate(15471.7,0)"><use data-c="2C" xlink:href="#MJX-5-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(15916.3,0)"><use data-c="1D45D" xlink:href="#MJX-5-TEX-I-1D45D"></use></g><g data-mml-node="mo" transform="translate(16419.3,0)"><use data-c="29" xlink:href="#MJX-5-TEX-N-29"></use></g><g data-mml-node="mi" transform="translate(16808.3,0)"><use data-c="1D453" xlink:href="#MJX-5-TEX-I-1D453"></use></g><g data-mml-node="mo" transform="translate(17358.3,0)"><use data-c="28" xlink:href="#MJX-5-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(17747.3,0)"><use data-c="1D44E" xlink:href="#MJX-5-TEX-I-1D44E"></use></g><g data-mml-node="mo" transform="translate(18276.3,0)"><use data-c="2C" xlink:href="#MJX-5-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(18721,0)"><use data-c="1D44F" xlink:href="#MJX-5-TEX-I-1D44F"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(19150,0)"><g data-mml-node="mo"><use data-c="2F" xlink:href="#MJX-5-TEX-N-2F"></use></g></g><g data-mml-node="mn" transform="translate(19650,0)"><use data-c="32" xlink:href="#MJX-5-TEX-N-32"></use></g><g data-mml-node="mo" transform="translate(20150,0)"><use data-c="2C" xlink:href="#MJX-5-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(20594.7,0)"><use data-c="1D45D" xlink:href="#MJX-5-TEX-I-1D45D"></use></g><g data-mml-node="mo" transform="translate(21097.7,0)"><use data-c="29" xlink:href="#MJX-5-TEX-N-29"></use></g><g data-mml-node="mspace" transform="translate(21486.7,0)"></g><g data-mml-node="mi" transform="translate(22320.3,0)"><use data-c="6D" xlink:href="#MJX-5-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-5-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-5-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mstyle" transform="translate(24209.3,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mstyle" transform="translate(24376.3,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(24710,0)"><use data-c="1D45D" xlink:href="#MJX-5-TEX-I-1D45D"></use></g></g></g></svg></mjx-container><p>Otherwise:</p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="75.798ex" height="2.587ex" role="img" focusable="false" viewBox="0 -893.3 33502.9 1143.3" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-5-TEX-I-1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path><path id="MJX-5-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-5-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-5-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-5-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-5-TEX-I-1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path><path id="MJX-5-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-5-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-5-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-5-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-5-TEX-N-2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path><path id="MJX-5-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-5-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-5-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-5-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D453" xlink:href="#MJX-5-TEX-I-1D453"></use></g><g data-mml-node="mo" transform="translate(550,0)"><use data-c="28" xlink:href="#MJX-5-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(939,0)"><use data-c="1D44E" xlink:href="#MJX-5-TEX-I-1D44E"></use></g><g data-mml-node="mo" transform="translate(1468,0)"><use data-c="2C" xlink:href="#MJX-5-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(1912.7,0)"><use data-c="1D44F" xlink:href="#MJX-5-TEX-I-1D44F"></use></g><g data-mml-node="mo" transform="translate(2341.7,0)"><use data-c="2C" xlink:href="#MJX-5-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(2786.3,0)"><use data-c="1D45D" xlink:href="#MJX-5-TEX-I-1D45D"></use></g><g data-mml-node="mo" transform="translate(3289.3,0)"><use data-c="29" xlink:href="#MJX-5-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(3956.1,0)"><use data-c="3D" xlink:href="#MJX-5-TEX-N-3D"></use></g><g data-mml-node="mo" transform="translate(5011.9,0)"><use data-c="28" xlink:href="#MJX-5-TEX-N-28"></use></g><g data-mml-node="mo" transform="translate(5400.9,0)"><use data-c="28" xlink:href="#MJX-5-TEX-N-28"></use></g><g data-mml-node="msup" transform="translate(5789.9,0)"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-5-TEX-I-1D44E"></use></g><g data-mml-node="TeXAtom" transform="translate(562,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><use data-c="28" xlink:href="#MJX-5-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(389,0)"><use data-c="1D44F" xlink:href="#MJX-5-TEX-I-1D44F"></use></g><g data-mml-node="mo" transform="translate(818,0)"><use data-c="2212" xlink:href="#MJX-5-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(1596,0)"><use data-c="31" xlink:href="#MJX-5-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(2096,0)"><use data-c="29" xlink:href="#MJX-5-TEX-N-29"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2485,0)"><g data-mml-node="mo"><use data-c="2F" xlink:href="#MJX-5-TEX-N-2F"></use></g></g><g data-mml-node="mn" transform="translate(2985,0)"><use data-c="32" xlink:href="#MJX-5-TEX-N-32"></use></g></g></g><g data-mml-node="msup" transform="translate(8866.2,0)"><g data-mml-node="mo"><use data-c="29" xlink:href="#MJX-5-TEX-N-29"></use></g><g data-mml-node="mn" transform="translate(422,363) scale(0.707)"><use data-c="32" xlink:href="#MJX-5-TEX-N-32"></use></g></g><g data-mml-node="mi" transform="translate(9691.7,0)"><use data-c="1D44E" xlink:href="#MJX-5-TEX-I-1D44E"></use></g><g data-mml-node="mo" transform="translate(10220.7,0)"><use data-c="29" xlink:href="#MJX-5-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(10887.5,0)"><use data-c="6D" xlink:href="#MJX-5-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-5-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-5-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mi" transform="translate(13054.3,0)"><use data-c="1D45D" xlink:href="#MJX-5-TEX-I-1D45D"></use></g><g data-mml-node="mo" transform="translate(13835,0)"><use data-c="3D" xlink:href="#MJX-5-TEX-N-3D"></use></g><g data-mml-node="mo" transform="translate(14890.8,0)"><use data-c="28" xlink:href="#MJX-5-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(15279.8,0)"><use data-c="1D453" xlink:href="#MJX-5-TEX-I-1D453"></use></g><g data-mml-node="mo" transform="translate(15829.8,0)"><use data-c="28" xlink:href="#MJX-5-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(16218.8,0)"><use data-c="1D44E" xlink:href="#MJX-5-TEX-I-1D44E"></use></g><g data-mml-node="mo" transform="translate(16747.8,0)"><use data-c="2C" xlink:href="#MJX-5-TEX-N-2C"></use></g><g data-mml-node="mo" transform="translate(17192.5,0)"><use data-c="28" xlink:href="#MJX-5-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(17581.5,0)"><use data-c="1D44F" xlink:href="#MJX-5-TEX-I-1D44F"></use></g><g data-mml-node="mo" transform="translate(18232.7,0)"><use data-c="2212" xlink:href="#MJX-5-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(19232.9,0)"><use data-c="31" xlink:href="#MJX-5-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(19732.9,0)"><use data-c="29" xlink:href="#MJX-5-TEX-N-29"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(20121.9,0)"><g data-mml-node="mo"><use data-c="2F" xlink:href="#MJX-5-TEX-N-2F"></use></g></g><g data-mml-node="mn" transform="translate(20621.9,0)"><use data-c="32" xlink:href="#MJX-5-TEX-N-32"></use></g><g data-mml-node="mo" transform="translate(21121.9,0)"><use data-c="2C" xlink:href="#MJX-5-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(21566.6,0)"><use data-c="1D45D" xlink:href="#MJX-5-TEX-I-1D45D"></use></g><g data-mml-node="mo" transform="translate(22069.6,0)"><use data-c="29" xlink:href="#MJX-5-TEX-N-29"></use></g><g data-mml-node="mi" transform="translate(22458.6,0)"><use data-c="1D453" xlink:href="#MJX-5-TEX-I-1D453"></use></g><g data-mml-node="mo" transform="translate(23008.6,0)"><use data-c="28" xlink:href="#MJX-5-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(23397.6,0)"><use data-c="1D44E" xlink:href="#MJX-5-TEX-I-1D44E"></use></g><g data-mml-node="mo" transform="translate(23926.6,0)"><use data-c="2C" xlink:href="#MJX-5-TEX-N-2C"></use></g><g data-mml-node="mo" transform="translate(24371.3,0)"><use data-c="28" xlink:href="#MJX-5-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(24760.3,0)"><use data-c="1D44F" xlink:href="#MJX-5-TEX-I-1D44F"></use></g><g data-mml-node="mo" transform="translate(25411.5,0)"><use data-c="2212" xlink:href="#MJX-5-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(26411.7,0)"><use data-c="31" xlink:href="#MJX-5-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(26911.7,0)"><use data-c="29" xlink:href="#MJX-5-TEX-N-29"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(27300.7,0)"><g data-mml-node="mo"><use data-c="2F" xlink:href="#MJX-5-TEX-N-2F"></use></g></g><g data-mml-node="mn" transform="translate(27800.7,0)"><use data-c="32" xlink:href="#MJX-5-TEX-N-32"></use></g><g data-mml-node="mo" transform="translate(28300.7,0)"><use data-c="2C" xlink:href="#MJX-5-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(28745.4,0)"><use data-c="1D45D" xlink:href="#MJX-5-TEX-I-1D45D"></use></g><g data-mml-node="mo" transform="translate(29248.4,0)"><use data-c="29" xlink:href="#MJX-5-TEX-N-29"></use></g><g data-mml-node="mi" transform="translate(29637.4,0)"><use data-c="1D44E" xlink:href="#MJX-5-TEX-I-1D44E"></use></g><g data-mml-node="mo" transform="translate(30166.4,0)"><use data-c="29" xlink:href="#MJX-5-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(30833.2,0)"><use data-c="6D" xlink:href="#MJX-5-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-5-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-5-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mi" transform="translate(32999.9,0)"><use data-c="1D45D" xlink:href="#MJX-5-TEX-I-1D45D"></use></g></g></g></svg></mjx-container><p>Thus, it can be implemented as below:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">log_modpow</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;   <span class="comment">// Pruning</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> temp = <span class="built_in">log_modpow</span>(a, b &gt;&gt; <span class="number">1</span>, p);</span><br><span class="line">    temp = (temp * temp) % p;</span><br><span class="line">    <span class="keyword">if</span> (b &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (temp * a) % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The benchmark is shown below, where you can see there is a huge difference in the efficiency of two different algorithms. In the benchmark I take 100000 tests of random positive integers of <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="5.317ex" height="2.009ex" role="img" focusable="false" viewBox="0 -694 2350.3 888" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-5-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-5-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-5-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-5-TEX-I-1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-5-TEX-I-1D44E"></use></g><g data-mml-node="mo" transform="translate(529,0)"><use data-c="2C" xlink:href="#MJX-5-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(973.7,0)"><use data-c="1D44F" xlink:href="#MJX-5-TEX-I-1D44F"></use></g><g data-mml-node="mo" transform="translate(1402.7,0)"><use data-c="2C" xlink:href="#MJX-5-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(1847.3,0)"><use data-c="1D45D" xlink:href="#MJX-5-TEX-I-1D45D"></use></g></g></g></svg></mjx-container> between 1 and 10000:</p><p><img src="/attaches/logpowmod_linearpowmod_bench.png" alt="logpowmod_linearpowmod_bench"></p><p>METHOD TIME COST (seconds)</p><p>linear modpow 5.47541</p><p>log modpow 0.027426</p><h5 id="Pre-calculation-of-exponentiation-with-Modulo-Operation"><a href="#Pre-calculation-of-exponentiation-with-Modulo-Operation" class="headerlink" title="Pre-calculation of exponentiation with Modulo Operation"></a>Pre-calculation of exponentiation with Modulo Operation</h5><p>Suppose we are given three integers b, p, k, we are asked to query <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="8.672ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 3833.2 705" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-5-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-5-TEX-I-1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path><path id="MJX-5-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-5-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-5-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path><path id="MJX-5-TEX-I-1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><use data-c="1D44F" xlink:href="#MJX-5-TEX-I-1D44F"></use></g><g data-mml-node="TeXAtom" transform="translate(462,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D45D" xlink:href="#MJX-5-TEX-I-1D45D"></use></g></g></g><g data-mml-node="mo" transform="translate(1145.5,0)"><use data-c="6D" xlink:href="#MJX-5-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-5-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-5-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mi" transform="translate(3312.2,0)"><use data-c="1D458" xlink:href="#MJX-5-TEX-I-1D458"></use></g></g></g></svg></mjx-container>, where <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="13.199ex" height="2.326ex" role="img" focusable="false" viewBox="0 -833.9 5833.9 1027.9" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-5-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-5-TEX-N-2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path><path id="MJX-5-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-5-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-5-TEX-I-1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path><path id="MJX-5-TEX-N-3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path><path id="MJX-5-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-5-TEX-N-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><use data-c="30" xlink:href="#MJX-5-TEX-N-30"></use></g><g data-mml-node="mo" transform="translate(777.8,0)"><use data-c="2264" xlink:href="#MJX-5-TEX-N-2264"></use></g><g data-mml-node="mi" transform="translate(1833.6,0)"><use data-c="1D44F" xlink:href="#MJX-5-TEX-I-1D44F"></use></g><g data-mml-node="mo" transform="translate(2262.6,0)"><use data-c="2C" xlink:href="#MJX-5-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(2707.2,0)"><use data-c="1D45D" xlink:href="#MJX-5-TEX-I-1D45D"></use></g><g data-mml-node="mo" transform="translate(3488,0)"><use data-c="3C" xlink:href="#MJX-5-TEX-N-3C"></use></g><g data-mml-node="msup" transform="translate(4543.8,0)"><g data-mml-node="mn"><use data-c="32" xlink:href="#MJX-5-TEX-N-32"></use></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use data-c="33" xlink:href="#MJX-5-TEX-N-33"></use><use data-c="32" xlink:href="#MJX-5-TEX-N-32" transform="translate(500,0)"></use></g></g></g></g></g></svg></mjx-container> and <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="11.263ex" height="2.199ex" role="img" focusable="false" viewBox="0 -833.9 4978.2 971.9" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-4-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-4-TEX-N-2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path><path id="MJX-4-TEX-I-1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path><path id="MJX-4-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-4-TEX-N-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><use data-c="31" xlink:href="#MJX-4-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(777.8,0)"><use data-c="2264" xlink:href="#MJX-4-TEX-N-2264"></use></g><g data-mml-node="mi" transform="translate(1833.6,0)"><use data-c="1D458" xlink:href="#MJX-4-TEX-I-1D458"></use></g><g data-mml-node="mo" transform="translate(2632.3,0)"><use data-c="2264" xlink:href="#MJX-4-TEX-N-2264"></use></g><g data-mml-node="msup" transform="translate(3688.1,0)"><g data-mml-node="mn"><use data-c="32" xlink:href="#MJX-4-TEX-N-32"></use></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use data-c="33" xlink:href="#MJX-4-TEX-N-33"></use><use data-c="32" xlink:href="#MJX-4-TEX-N-32" transform="translate(500,0)"></use></g></g></g></g></g></svg></mjx-container>.</p><p>Since there is only one case, we could just use the quick modulo operation with exponentiation mentioned above to obtain the answer in <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.008ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3539.7 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-4-TEX-C-4F" d="M308 428Q289 428 289 438Q289 457 318 508T378 593Q417 638 475 671T599 705Q688 705 732 643T777 483Q777 380 733 285T620 123T464 18T293 -22Q188 -22 123 51T58 245Q58 327 87 403T159 533T249 626T333 685T388 705Q404 705 404 693Q404 674 363 649Q333 632 304 606T239 537T181 429T158 290Q158 179 214 114T364 48Q489 48 583 165T677 438Q677 473 670 505T648 568T601 617T528 636Q518 636 513 635Q486 629 460 600T419 544T392 490Q383 470 372 459Q341 430 308 428Z"></path><path id="MJX-4-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-4-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-4-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-4-TEX-N-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"></path><path id="MJX-4-TEX-N-2061" d=""></path><path id="MJX-4-TEX-I-1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path><path id="MJX-4-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="4F" xlink:href="#MJX-4-TEX-C-4F"></use></g></g><g data-mml-node="mo" transform="translate(796,0)"><use data-c="28" xlink:href="#MJX-4-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1185,0)"><use data-c="6C" xlink:href="#MJX-4-TEX-N-6C"></use><use data-c="6F" xlink:href="#MJX-4-TEX-N-6F" transform="translate(278,0)"></use><use data-c="67" xlink:href="#MJX-4-TEX-N-67" transform="translate(778,0)"></use></g><g data-mml-node="mo" transform="translate(2463,0)"><use data-c="2061" xlink:href="#MJX-4-TEX-N-2061"></use></g><g data-mml-node="mi" transform="translate(2629.7,0)"><use data-c="1D458" xlink:href="#MJX-4-TEX-I-1D458"></use></g><g data-mml-node="mo" transform="translate(3150.7,0)"><use data-c="29" xlink:href="#MJX-4-TEX-N-29"></use></g></g></g></svg></mjx-container>. But here we are going to talk about another technique. That is, suppose there are <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="7.147ex" height="2.02ex" role="img" focusable="false" viewBox="0 -871.1 3159 893.1" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-4-TEX-N-35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path><path id="MJX-4-TEX-N-D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path><path id="MJX-4-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-4-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-4-TEX-N-37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><use data-c="35" xlink:href="#MJX-4-TEX-N-35"></use></g><g data-mml-node="mo" transform="translate(722.2,0)"><use data-c="D7" xlink:href="#MJX-4-TEX-N-D7"></use></g><g data-mml-node="msup" transform="translate(1722.4,0)"><g data-mml-node="mn"><use data-c="31" xlink:href="#MJX-4-TEX-N-31"></use><use data-c="30" xlink:href="#MJX-4-TEX-N-30" transform="translate(500,0)"></use></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use data-c="37" xlink:href="#MJX-4-TEX-N-37"></use></g></g></g></g></g></svg></mjx-container> cases to test with different values of <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.138ex" height="1.439ex" role="img" focusable="false" viewBox="0 -442 503 636" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-4-TEX-I-1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D45D" xlink:href="#MJX-4-TEX-I-1D45D"></use></g></g></g></svg></mjx-container> and we also suppose <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.179ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 521 705" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-4-TEX-I-1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D458" xlink:href="#MJX-4-TEX-I-1D458"></use></g></g></g></svg></mjx-container> is a constant prime, while other restrictions are not changed. In that case, we are going to use modulo operation with exponentiation to obtain <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="9.862ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 4358.8 705" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-3-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-3-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-3-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-3-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-3-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path><path id="MJX-3-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-3-TEX-I-1D44E"></use></g><g data-mml-node="TeXAtom" transform="translate(562,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-3-TEX-I-1D45B"></use></g></g></g><g data-mml-node="mo" transform="translate(1314,0)"><use data-c="6D" xlink:href="#MJX-3-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-3-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-3-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3480.8,0)"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-3-TEX-I-1D45A"></use></g></g></g></g></svg></mjx-container> with <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.446ex" height="2.473ex" role="img" focusable="false" viewBox="0 -843 4175 1093" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-3-TEX-N-398" d="M56 340Q56 423 86 494T164 610T270 680T388 705Q521 705 621 601T722 341Q722 260 693 191T617 75T510 4T388 -22T267 3T160 74T85 189T56 340ZM610 339Q610 428 590 495T535 598T463 651T384 668Q332 668 289 638T221 566Q168 485 168 339Q168 274 176 235Q189 158 228 105T324 28Q356 16 388 16Q415 16 442 24T501 54T555 111T594 205T610 339ZM223 263V422H263V388H514V422H554V263H514V297H263V263H223Z"></path><path id="MJX-3-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-3-TEX-N-2308" d="M174 734Q178 746 190 750H298H369Q400 750 411 747T422 730T411 713T372 709Q365 709 345 709T310 710H214V-235Q206 -248 196 -250Q192 -250 189 -249T184 -247T180 -244T178 -241T176 -237T174 -234V734Z"></path><path id="MJX-3-TEX-N-221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"></path><path id="MJX-3-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-3-TEX-N-2309" d="M21 717T21 730T32 746T75 750H147H256Q266 742 269 735V-235Q262 -248 251 -250Q247 -250 244 -249T239 -247T235 -244T233 -241T231 -237T229 -234V710H133Q119 710 99 710T71 709Q43 709 32 713Z"></path><path id="MJX-3-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="398" xlink:href="#MJX-3-TEX-N-398"></use></g><g data-mml-node="mo" transform="translate(778,0)"><use data-c="28" xlink:href="#MJX-3-TEX-N-28"></use></g><g data-mml-node="mo" transform="translate(1167,0)"><use data-c="2308" xlink:href="#MJX-3-TEX-N-2308"></use></g><g data-mml-node="msqrt" transform="translate(1611,0)"><g transform="translate(853,0)"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-3-TEX-I-1D45A"></use></g></g><g data-mml-node="mo" transform="translate(0,-17)"><use data-c="221A" xlink:href="#MJX-3-TEX-N-221A"></use></g><rect width="878" height="60" x="853" y="723"></rect></g><g data-mml-node="mo" transform="translate(3342,0)"><use data-c="2309" xlink:href="#MJX-3-TEX-N-2309"></use></g><g data-mml-node="mo" transform="translate(3786,0)"><use data-c="29" xlink:href="#MJX-3-TEX-N-29"></use></g></g></g></svg></mjx-container> pre-process and <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.692ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2074 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-3-TEX-C-4F" d="M308 428Q289 428 289 438Q289 457 318 508T378 593Q417 638 475 671T599 705Q688 705 732 643T777 483Q777 380 733 285T620 123T464 18T293 -22Q188 -22 123 51T58 245Q58 327 87 403T159 533T249 626T333 685T388 705Q404 705 404 693Q404 674 363 649Q333 632 304 606T239 537T181 429T158 290Q158 179 214 114T364 48Q489 48 583 165T677 438Q677 473 670 505T648 568T601 617T528 636Q518 636 513 635Q486 629 460 600T419 544T392 490Q383 470 372 459Q341 430 308 428Z"></path><path id="MJX-3-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-3-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-3-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="4F" xlink:href="#MJX-3-TEX-C-4F"></use></g></g><g data-mml-node="mo" transform="translate(796,0)"><use data-c="28" xlink:href="#MJX-3-TEX-N-28"></use></g><g data-mml-node="mn" transform="translate(1185,0)"><use data-c="31" xlink:href="#MJX-3-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(1685,0)"><use data-c="29" xlink:href="#MJX-3-TEX-N-29"></use></g></g></g></svg></mjx-container> query for different <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-3-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-3-TEX-I-1D45B"></use></g></g></g></svg></mjx-container>.</p><p>But this technique requires two preconditions:</p><ul><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.197ex" height="1.02ex" role="img" focusable="false" viewBox="0 -441 529 451" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-2-TEX-I-1D44E"></use></g></g></g></svg></mjx-container> and <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.986ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 878 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-2-TEX-I-1D45A"></use></g></g></g></svg></mjx-container> are constants.</li><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.986ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 878 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-2-TEX-I-1D45A"></use></g></g></g></svg></mjx-container> is a prime.</li></ul><p>Here are the steps for pre-calculations:</p><p>We let <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="10.121ex" height="2.473ex" role="img" focusable="false" viewBox="0 -843 4473.6 1093" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path><path id="MJX-2-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-2-TEX-N-2308" d="M174 734Q178 746 190 750H298H369Q400 750 411 747T422 730T411 713T372 709Q365 709 345 709T310 710H214V-235Q206 -248 196 -250Q192 -250 189 -249T184 -247T180 -244T178 -241T176 -237T174 -234V734Z"></path><path id="MJX-2-TEX-N-221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"></path><path id="MJX-2-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-N-2309" d="M21 717T21 730T32 746T75 750H147H256Q266 742 269 735V-235Q262 -248 251 -250Q247 -250 244 -249T239 -247T235 -244T233 -241T231 -237T229 -234V710H133Q119 710 99 710T71 709Q43 709 32 713Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D458" xlink:href="#MJX-2-TEX-I-1D458"></use></g><g data-mml-node="mo" transform="translate(798.8,0)"><use data-c="3D" xlink:href="#MJX-2-TEX-N-3D"></use></g><g data-mml-node="mo" transform="translate(1854.6,0)"><use data-c="2308" xlink:href="#MJX-2-TEX-N-2308"></use></g><g data-mml-node="msqrt" transform="translate(2298.6,0)"><g transform="translate(853,0)"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-2-TEX-I-1D45A"></use></g></g><g data-mml-node="mo" transform="translate(0,-17)"><use data-c="221A" xlink:href="#MJX-2-TEX-N-221A"></use></g><rect width="878" height="60" x="853" y="723"></rect></g><g data-mml-node="mo" transform="translate(4029.6,0)"><use data-c="2309" xlink:href="#MJX-2-TEX-N-2309"></use></g></g></g></svg></mjx-container>, then we can pre-calculate all values below in <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.699ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2077 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-N-398" d="M56 340Q56 423 86 494T164 610T270 680T388 705Q521 705 621 601T722 341Q722 260 693 191T617 75T510 4T388 -22T267 3T160 74T85 189T56 340ZM610 339Q610 428 590 495T535 598T463 651T384 668Q332 668 289 638T221 566Q168 485 168 339Q168 274 176 235Q189 158 228 105T324 28Q356 16 388 16Q415 16 442 24T501 54T555 111T594 205T610 339ZM223 263V422H263V388H514V422H554V263H514V297H263V263H223Z"></path><path id="MJX-2-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-2-TEX-I-1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path><path id="MJX-2-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="398" xlink:href="#MJX-2-TEX-N-398"></use></g><g data-mml-node="mo" transform="translate(778,0)"><use data-c="28" xlink:href="#MJX-2-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1167,0)"><use data-c="1D458" xlink:href="#MJX-2-TEX-I-1D458"></use></g><g data-mml-node="mo" transform="translate(1688,0)"><use data-c="29" xlink:href="#MJX-2-TEX-N-29"></use></g></g></g></svg></mjx-container> time:</p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -9.04ex;" xmlns="http://www.w3.org/2000/svg" width="19.001ex" height="19.211ex" role="img" focusable="false" viewBox="0 -4495.7 8398.3 8491.4" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path><path id="MJX-2-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-2-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-2-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-2-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-2-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-2-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path><path id="MJX-2-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-2-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-2-TEX-N-22EE" d="M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z"></path><path id="MJX-2-TEX-I-1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path><path id="MJX-2-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0,3745.7)"><g data-mml-node="mtd" transform="translate(918.5,0)"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D45D" xlink:href="#MJX-2-TEX-I-1D45D"></use></g><g data-mml-node="TeXAtom" transform="translate(536,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use data-c="30" xlink:href="#MJX-2-TEX-N-30"></use></g></g></g></g><g data-mml-node="mtd" transform="translate(1858.1,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><use data-c="3D" xlink:href="#MJX-2-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(1333.6,0)"><use data-c="31" xlink:href="#MJX-2-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(2111.3,0)"><use data-c="6D" xlink:href="#MJX-2-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-2-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-2-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mi" transform="translate(4278.1,0)"><use data-c="1D45A" xlink:href="#MJX-2-TEX-I-1D45A"></use></g></g></g><g data-mml-node="mtr" transform="translate(0,2445.7)"><g data-mml-node="mtd" transform="translate(918.5,0)"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D45D" xlink:href="#MJX-2-TEX-I-1D45D"></use></g><g data-mml-node="TeXAtom" transform="translate(536,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use data-c="31" xlink:href="#MJX-2-TEX-N-31"></use></g></g></g></g><g data-mml-node="mtd" transform="translate(1858.1,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><use data-c="3D" xlink:href="#MJX-2-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(1333.6,0)"><use data-c="1D44E" xlink:href="#MJX-2-TEX-I-1D44E"></use></g><g data-mml-node="mo" transform="translate(2140.3,0)"><use data-c="6D" xlink:href="#MJX-2-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-2-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-2-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mi" transform="translate(4307.1,0)"><use data-c="1D45A" xlink:href="#MJX-2-TEX-I-1D45A"></use></g></g></g><g data-mml-node="mtr" transform="translate(0,1011.8)"><g data-mml-node="mtd" transform="translate(918.5,0)"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D45D" xlink:href="#MJX-2-TEX-I-1D45D"></use></g><g data-mml-node="TeXAtom" transform="translate(536,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use data-c="32" xlink:href="#MJX-2-TEX-N-32"></use></g></g></g></g><g data-mml-node="mtd" transform="translate(1858.1,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><use data-c="3D" xlink:href="#MJX-2-TEX-N-3D"></use></g><g data-mml-node="msup" transform="translate(1333.6,0)"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-2-TEX-I-1D44E"></use></g><g data-mml-node="TeXAtom" transform="translate(562,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use data-c="32" xlink:href="#MJX-2-TEX-N-32"></use></g></g></g><g data-mml-node="mo" transform="translate(2576.9,0)"><use data-c="6D" xlink:href="#MJX-2-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-2-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-2-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mi" transform="translate(4743.7,0)"><use data-c="1D45A" xlink:href="#MJX-2-TEX-I-1D45A"></use></g></g></g><g data-mml-node="mtr" transform="translate(0,-838.2)"><g data-mml-node="mtd" transform="translate(1858.1,0)"></g><g data-mml-node="mtd" transform="translate(1858.1,0)"><g data-mml-node="mi"></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo"><use data-c="22EE" xlink:href="#MJX-2-TEX-N-22EE"></use></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-2292)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D45D" xlink:href="#MJX-2-TEX-I-1D45D"></use></g><g data-mml-node="TeXAtom" transform="translate(536,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D458" xlink:href="#MJX-2-TEX-I-1D458"></use></g><g data-mml-node="mo" transform="translate(521,0)"><use data-c="2212" xlink:href="#MJX-2-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(1299,0)"><use data-c="31" xlink:href="#MJX-2-TEX-N-31"></use></g></g></g></g><g data-mml-node="mtd" transform="translate(1858.1,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><use data-c="3D" xlink:href="#MJX-2-TEX-N-3D"></use></g><g data-mml-node="msup" transform="translate(1333.6,0)"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-2-TEX-I-1D44E"></use></g><g data-mml-node="TeXAtom" transform="translate(562,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D458" xlink:href="#MJX-2-TEX-I-1D458"></use></g><g data-mml-node="mo" transform="translate(521,0)"><use data-c="2212" xlink:href="#MJX-2-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(1299,0)"><use data-c="31" xlink:href="#MJX-2-TEX-N-31"></use></g></g></g><g data-mml-node="mo" transform="translate(3495.4,0)"><use data-c="6D" xlink:href="#MJX-2-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-2-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-2-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mi" transform="translate(5662.2,0)"><use data-c="1D45A" xlink:href="#MJX-2-TEX-I-1D45A"></use></g></g></g><g data-mml-node="mtr" transform="translate(0,-3745.7)"><g data-mml-node="mtd" transform="translate(903.7,0)"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D45D" xlink:href="#MJX-2-TEX-I-1D45D"></use></g><g data-mml-node="TeXAtom" transform="translate(536,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D458" xlink:href="#MJX-2-TEX-I-1D458"></use></g></g></g></g><g data-mml-node="mtd" transform="translate(1858.1,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><use data-c="3D" xlink:href="#MJX-2-TEX-N-3D"></use></g><g data-mml-node="msup" transform="translate(1333.6,0)"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-2-TEX-I-1D44E"></use></g><g data-mml-node="TeXAtom" transform="translate(562,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D458" xlink:href="#MJX-2-TEX-I-1D458"></use></g></g></g><g data-mml-node="mo" transform="translate(2591.7,0)"><use data-c="6D" xlink:href="#MJX-2-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-2-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-2-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mi" transform="translate(4758.5,0)"><use data-c="1D45A" xlink:href="#MJX-2-TEX-I-1D45A"></use></g></g></g></g></g></g></svg></mjx-container><p>And</p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -9.281ex;" xmlns="http://www.w3.org/2000/svg" width="20.95ex" height="19.693ex" role="img" focusable="false" viewBox="0 -4602.3 9259.8 8704.5" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path><path id="MJX-2-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-2-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-2-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-2-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-2-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-2-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path><path id="MJX-2-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-2-TEX-I-1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path><path id="MJX-2-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-2-TEX-N-22EE" d="M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z"></path><path id="MJX-2-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-2-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-2-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-2-TEX-N-22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0,3852.3)"><g data-mml-node="mtd" transform="translate(918.5,0)"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D45E" xlink:href="#MJX-2-TEX-I-1D45E"></use></g><g data-mml-node="TeXAtom" transform="translate(479,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use data-c="30" xlink:href="#MJX-2-TEX-N-30"></use></g></g></g></g><g data-mml-node="mtd" transform="translate(1801.1,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><use data-c="3D" xlink:href="#MJX-2-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(1333.6,0)"><use data-c="31" xlink:href="#MJX-2-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(2111.3,0)"><use data-c="6D" xlink:href="#MJX-2-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-2-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-2-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mi" transform="translate(4278.1,0)"><use data-c="1D45A" xlink:href="#MJX-2-TEX-I-1D45A"></use></g></g></g><g data-mml-node="mtr" transform="translate(0,2398.5)"><g data-mml-node="mtd" transform="translate(918.5,0)"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D45E" xlink:href="#MJX-2-TEX-I-1D45E"></use></g><g data-mml-node="TeXAtom" transform="translate(479,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use data-c="31" xlink:href="#MJX-2-TEX-N-31"></use></g></g></g></g><g data-mml-node="mtd" transform="translate(1801.1,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><use data-c="3D" xlink:href="#MJX-2-TEX-N-3D"></use></g><g data-mml-node="msup" transform="translate(1333.6,0)"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-2-TEX-I-1D44E"></use></g><g data-mml-node="TeXAtom" transform="translate(562,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D458" xlink:href="#MJX-2-TEX-I-1D458"></use></g></g></g><g data-mml-node="mo" transform="translate(2591.7,0)"><use data-c="6D" xlink:href="#MJX-2-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-2-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-2-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mi" transform="translate(4758.5,0)"><use data-c="1D45A" xlink:href="#MJX-2-TEX-I-1D45A"></use></g></g></g><g data-mml-node="mtr" transform="translate(0,944.8)"><g data-mml-node="mtd" transform="translate(918.5,0)"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D45E" xlink:href="#MJX-2-TEX-I-1D45E"></use></g><g data-mml-node="TeXAtom" transform="translate(479,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use data-c="32" xlink:href="#MJX-2-TEX-N-32"></use></g></g></g></g><g data-mml-node="mtd" transform="translate(1801.1,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><use data-c="3D" xlink:href="#MJX-2-TEX-N-3D"></use></g><g data-mml-node="msup" transform="translate(1333.6,0)"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-2-TEX-I-1D44E"></use></g><g data-mml-node="TeXAtom" transform="translate(562,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use data-c="32" xlink:href="#MJX-2-TEX-N-32"></use></g><g data-mml-node="mi" transform="translate(500,0)"><use data-c="1D458" xlink:href="#MJX-2-TEX-I-1D458"></use></g></g></g><g data-mml-node="mo" transform="translate(2945.3,0)"><use data-c="6D" xlink:href="#MJX-2-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-2-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-2-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mi" transform="translate(5112.1,0)"><use data-c="1D45A" xlink:href="#MJX-2-TEX-I-1D45A"></use></g></g></g><g data-mml-node="mtr" transform="translate(0,-905.2)"><g data-mml-node="mtd" transform="translate(1801.1,0)"></g><g data-mml-node="mtd" transform="translate(1801.1,0)"><g data-mml-node="mi"></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo"><use data-c="22EE" xlink:href="#MJX-2-TEX-N-22EE"></use></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-2398.5)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D45E" xlink:href="#MJX-2-TEX-I-1D45E"></use></g><g data-mml-node="TeXAtom" transform="translate(479,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D458" xlink:href="#MJX-2-TEX-I-1D458"></use></g><g data-mml-node="mo" transform="translate(521,0)"><use data-c="2212" xlink:href="#MJX-2-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(1299,0)"><use data-c="31" xlink:href="#MJX-2-TEX-N-31"></use></g></g></g></g><g data-mml-node="mtd" transform="translate(1801.1,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><use data-c="3D" xlink:href="#MJX-2-TEX-N-3D"></use></g><g data-mml-node="msup" transform="translate(1333.6,0)"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-2-TEX-I-1D44E"></use></g><g data-mml-node="TeXAtom" transform="translate(562,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><use data-c="28" xlink:href="#MJX-2-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(389,0)"><use data-c="1D458" xlink:href="#MJX-2-TEX-I-1D458"></use></g><g data-mml-node="mo" transform="translate(910,0)"><use data-c="2212" xlink:href="#MJX-2-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(1688,0)"><use data-c="31" xlink:href="#MJX-2-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(2188,0)"><use data-c="29" xlink:href="#MJX-2-TEX-N-29"></use></g><g data-mml-node="mi" transform="translate(2577,0)"><use data-c="1D458" xlink:href="#MJX-2-TEX-I-1D458"></use></g></g></g><g data-mml-node="mo" transform="translate(4414,0)"><use data-c="6D" xlink:href="#MJX-2-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-2-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-2-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mi" transform="translate(6580.7,0)"><use data-c="1D45A" xlink:href="#MJX-2-TEX-I-1D45A"></use></g></g></g><g data-mml-node="mtr" transform="translate(0,-3852.3)"><g data-mml-node="mtd" transform="translate(903.7,0)"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D45E" xlink:href="#MJX-2-TEX-I-1D45E"></use></g><g data-mml-node="TeXAtom" transform="translate(479,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D458" xlink:href="#MJX-2-TEX-I-1D458"></use></g></g></g></g><g data-mml-node="mtd" transform="translate(1801.1,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><use data-c="3D" xlink:href="#MJX-2-TEX-N-3D"></use></g><g data-mml-node="msup" transform="translate(1333.6,0)"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-2-TEX-I-1D44E"></use></g><g data-mml-node="TeXAtom" transform="translate(562,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D458" xlink:href="#MJX-2-TEX-I-1D458"></use></g><g data-mml-node="mo" transform="translate(521,0)"><use data-c="22C5" xlink:href="#MJX-2-TEX-N-22C5"></use></g><g data-mml-node="mi" transform="translate(799,0)"><use data-c="1D458" xlink:href="#MJX-2-TEX-I-1D458"></use></g></g></g><g data-mml-node="mo" transform="translate(3156.7,0)"><use data-c="6D" xlink:href="#MJX-2-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-2-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-2-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mi" transform="translate(5323.5,0)"><use data-c="1D45A" xlink:href="#MJX-2-TEX-I-1D45A"></use></g></g></g></g></g></g></svg></mjx-container><p>Where we can obtain <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.471ex;" xmlns="http://www.w3.org/2000/svg" width="17.667ex" height="1.471ex" role="img" focusable="false" viewBox="0 -442 7808.9 650" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path><path id="MJX-2-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-2-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-2-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-2-TEX-N-22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path><path id="MJX-2-TEX-I-1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path><path id="MJX-2-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D45D" xlink:href="#MJX-2-TEX-I-1D45D"></use></g><g data-mml-node="TeXAtom" transform="translate(536,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use data-c="30" xlink:href="#MJX-2-TEX-N-30"></use></g></g></g><g data-mml-node="mo" transform="translate(939.6,0)"><use data-c="2C" xlink:href="#MJX-2-TEX-N-2C"></use></g><g data-mml-node="msub" transform="translate(1384.2,0)"><g data-mml-node="mi"><use data-c="1D45D" xlink:href="#MJX-2-TEX-I-1D45D"></use></g><g data-mml-node="TeXAtom" transform="translate(536,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use data-c="31" xlink:href="#MJX-2-TEX-N-31"></use></g></g></g><g data-mml-node="mo" transform="translate(2323.8,0)"><use data-c="2C" xlink:href="#MJX-2-TEX-N-2C"></use></g><g data-mml-node="mo" transform="translate(2768.4,0)"><use data-c="22EF" xlink:href="#MJX-2-TEX-N-22EF"></use></g><g data-mml-node="mo" transform="translate(4107.1,0)"><use data-c="2C" xlink:href="#MJX-2-TEX-N-2C"></use></g><g data-mml-node="msub" transform="translate(4551.8,0)"><g data-mml-node="mi"><use data-c="1D45D" xlink:href="#MJX-2-TEX-I-1D45D"></use></g><g data-mml-node="TeXAtom" transform="translate(536,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D458" xlink:href="#MJX-2-TEX-I-1D458"></use></g><g data-mml-node="mo" transform="translate(521,0)"><use data-c="2212" xlink:href="#MJX-2-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(1299,0)"><use data-c="31" xlink:href="#MJX-2-TEX-N-31"></use></g></g></g><g data-mml-node="mo" transform="translate(6409.9,0)"><use data-c="2C" xlink:href="#MJX-2-TEX-N-2C"></use></g><g data-mml-node="msub" transform="translate(6854.5,0)"><g data-mml-node="mi"><use data-c="1D45D" xlink:href="#MJX-2-TEX-I-1D45D"></use></g><g data-mml-node="TeXAtom" transform="translate(536,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D458" xlink:href="#MJX-2-TEX-I-1D458"></use></g></g></g></g></g></svg></mjx-container> and <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.471ex;" xmlns="http://www.w3.org/2000/svg" width="17.151ex" height="1.471ex" role="img" focusable="false" viewBox="0 -442 7580.9 650" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path><path id="MJX-2-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-2-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-2-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-2-TEX-N-22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path><path id="MJX-2-TEX-I-1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path><path id="MJX-2-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D45E" xlink:href="#MJX-2-TEX-I-1D45E"></use></g><g data-mml-node="TeXAtom" transform="translate(479,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use data-c="30" xlink:href="#MJX-2-TEX-N-30"></use></g></g></g><g data-mml-node="mo" transform="translate(882.6,0)"><use data-c="2C" xlink:href="#MJX-2-TEX-N-2C"></use></g><g data-mml-node="msub" transform="translate(1327.2,0)"><g data-mml-node="mi"><use data-c="1D45E" xlink:href="#MJX-2-TEX-I-1D45E"></use></g><g data-mml-node="TeXAtom" transform="translate(479,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use data-c="31" xlink:href="#MJX-2-TEX-N-31"></use></g></g></g><g data-mml-node="mo" transform="translate(2209.8,0)"><use data-c="2C" xlink:href="#MJX-2-TEX-N-2C"></use></g><g data-mml-node="mo" transform="translate(2654.4,0)"><use data-c="22EF" xlink:href="#MJX-2-TEX-N-22EF"></use></g><g data-mml-node="mo" transform="translate(3993.1,0)"><use data-c="2C" xlink:href="#MJX-2-TEX-N-2C"></use></g><g data-mml-node="msub" transform="translate(4437.8,0)"><g data-mml-node="mi"><use data-c="1D45E" xlink:href="#MJX-2-TEX-I-1D45E"></use></g><g data-mml-node="TeXAtom" transform="translate(479,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D458" xlink:href="#MJX-2-TEX-I-1D458"></use></g><g data-mml-node="mo" transform="translate(521,0)"><use data-c="2212" xlink:href="#MJX-2-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(1299,0)"><use data-c="31" xlink:href="#MJX-2-TEX-N-31"></use></g></g></g><g data-mml-node="mo" transform="translate(6238.9,0)"><use data-c="2C" xlink:href="#MJX-2-TEX-N-2C"></use></g><g data-mml-node="msub" transform="translate(6683.5,0)"><g data-mml-node="mi"><use data-c="1D45E" xlink:href="#MJX-2-TEX-I-1D45E"></use></g><g data-mml-node="TeXAtom" transform="translate(479,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D458" xlink:href="#MJX-2-TEX-I-1D458"></use></g></g></g></g></g></svg></mjx-container> by using recurrence relations:</p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -2.148ex;" xmlns="http://www.w3.org/2000/svg" width="28.306ex" height="5.428ex" role="img" focusable="false" viewBox="0 -1449.5 12511.3 2399" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path><path id="MJX-2-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-2-TEX-S3-7B" d="M618 -943L612 -949H582L568 -943Q472 -903 411 -841T332 -703Q327 -682 327 -653T325 -350Q324 -28 323 -18Q317 24 301 61T264 124T221 171T179 205T147 225T132 234Q130 238 130 250Q130 255 130 258T131 264T132 267T134 269T139 272T144 275Q207 308 256 367Q310 436 323 519Q324 529 325 851Q326 1124 326 1154T332 1205Q369 1358 566 1443L582 1450H612L618 1444V1429Q618 1413 616 1411L608 1406Q599 1402 585 1393T552 1372T515 1343T479 1305T449 1257T429 1200Q425 1180 425 1152T423 851Q422 579 422 549T416 498Q407 459 388 424T346 364T297 318T250 284T214 264T197 254L188 251L205 242Q290 200 345 138T416 3Q421 -18 421 -48T423 -349Q423 -397 423 -472Q424 -677 428 -694Q429 -697 429 -699Q434 -722 443 -743T465 -782T491 -816T519 -845T548 -868T574 -886T595 -899T610 -908L616 -910Q618 -912 618 -928V-943Z"></path><path id="MJX-2-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-2-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-2-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-2-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-2-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-2-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path><path id="MJX-2-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-N-69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z"></path><path id="MJX-2-TEX-N-66" d="M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z"></path><path id="MJX-2-TEX-N-A0" d=""></path><path id="MJX-2-TEX-N-3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path><path id="MJX-2-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D45D" xlink:href="#MJX-2-TEX-I-1D45D"></use></g><g data-mml-node="TeXAtom" transform="translate(536,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D456" xlink:href="#MJX-2-TEX-I-1D456"></use></g></g></g><g data-mml-node="mo" transform="translate(1107.7,0)"><use data-c="3D" xlink:href="#MJX-2-TEX-N-3D"></use></g><g data-mml-node="mrow" transform="translate(2163.5,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><use data-c="7B" xlink:href="#MJX-2-TEX-S3-7B"></use></g><g data-mml-node="mtable" transform="translate(750,0)"><g data-mml-node="mtr" transform="translate(0,600)"><g data-mml-node="mtd"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-2-TEX-I-1D44E"></use></g><g data-mml-node="msub" transform="translate(529,0)"><g data-mml-node="mi"><use data-c="1D45D" xlink:href="#MJX-2-TEX-I-1D45D"></use></g><g data-mml-node="TeXAtom" transform="translate(536,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D456" xlink:href="#MJX-2-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345,0)"><use data-c="2212" xlink:href="#MJX-2-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(1123,0)"><use data-c="31" xlink:href="#MJX-2-TEX-N-31"></use></g></g></g><g data-mml-node="mo" transform="translate(2540.4,0)"><use data-c="6D" xlink:href="#MJX-2-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-2-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-2-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mi" transform="translate(4707.2,0)"><use data-c="1D45A" xlink:href="#MJX-2-TEX-I-1D45A"></use></g></g><g data-mml-node="mtd" transform="translate(6585.2,0)"><g data-mml-node="mrow"><g data-mml-node="mtext"><use data-c="69" xlink:href="#MJX-2-TEX-N-69"></use><use data-c="66" xlink:href="#MJX-2-TEX-N-66" transform="translate(278,0)"></use><use data-c="A0" xlink:href="#MJX-2-TEX-N-A0" transform="translate(584,0)"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(834,0)"><g data-mml-node="mi"><use data-c="1D456" xlink:href="#MJX-2-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(622.8,0)"><use data-c="3E" xlink:href="#MJX-2-TEX-N-3E"></use></g><g data-mml-node="mn" transform="translate(1678.6,0)"><use data-c="30" xlink:href="#MJX-2-TEX-N-30"></use></g></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-600)"><g data-mml-node="mtd"><g data-mml-node="mn"><use data-c="31" xlink:href="#MJX-2-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(777.8,0)"><use data-c="6D" xlink:href="#MJX-2-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-2-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-2-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mi" transform="translate(2944.6,0)"><use data-c="1D45A" xlink:href="#MJX-2-TEX-I-1D45A"></use></g></g><g data-mml-node="mtd" transform="translate(6585.2,0)"><g data-mml-node="mrow"><g data-mml-node="mtext"><use data-c="69" xlink:href="#MJX-2-TEX-N-69"></use><use data-c="66" xlink:href="#MJX-2-TEX-N-66" transform="translate(278,0)"></use><use data-c="A0" xlink:href="#MJX-2-TEX-N-A0" transform="translate(584,0)"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(834,0)"><g data-mml-node="mi"><use data-c="1D456" xlink:href="#MJX-2-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(622.8,0)"><use data-c="3D" xlink:href="#MJX-2-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(1678.6,0)"><use data-c="30" xlink:href="#MJX-2-TEX-N-30"></use></g></g></g></g></g></g><g data-mml-node="mo" transform="translate(10347.7,0) translate(0 250)"></g></g></g></g></svg></mjx-container><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -2.148ex;" xmlns="http://www.w3.org/2000/svg" width="29.069ex" height="5.428ex" role="img" focusable="false" viewBox="0 -1449.5 12848.7 2399" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path><path id="MJX-2-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-2-TEX-S3-7B" d="M618 -943L612 -949H582L568 -943Q472 -903 411 -841T332 -703Q327 -682 327 -653T325 -350Q324 -28 323 -18Q317 24 301 61T264 124T221 171T179 205T147 225T132 234Q130 238 130 250Q130 255 130 258T131 264T132 267T134 269T139 272T144 275Q207 308 256 367Q310 436 323 519Q324 529 325 851Q326 1124 326 1154T332 1205Q369 1358 566 1443L582 1450H612L618 1444V1429Q618 1413 616 1411L608 1406Q599 1402 585 1393T552 1372T515 1343T479 1305T449 1257T429 1200Q425 1180 425 1152T423 851Q422 579 422 549T416 498Q407 459 388 424T346 364T297 318T250 284T214 264T197 254L188 251L205 242Q290 200 345 138T416 3Q421 -18 421 -48T423 -349Q423 -397 423 -472Q424 -677 428 -694Q429 -697 429 -699Q434 -722 443 -743T465 -782T491 -816T519 -845T548 -868T574 -886T595 -899T610 -908L616 -910Q618 -912 618 -928V-943Z"></path><path id="MJX-2-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-2-TEX-I-1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path><path id="MJX-2-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-2-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-2-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-2-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-2-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path><path id="MJX-2-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-N-69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z"></path><path id="MJX-2-TEX-N-66" d="M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z"></path><path id="MJX-2-TEX-N-A0" d=""></path><path id="MJX-2-TEX-N-3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path><path id="MJX-2-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D45E" xlink:href="#MJX-2-TEX-I-1D45E"></use></g><g data-mml-node="TeXAtom" transform="translate(479,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D456" xlink:href="#MJX-2-TEX-I-1D456"></use></g></g></g><g data-mml-node="mo" transform="translate(1050.7,0)"><use data-c="3D" xlink:href="#MJX-2-TEX-N-3D"></use></g><g data-mml-node="mrow" transform="translate(2106.5,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><use data-c="7B" xlink:href="#MJX-2-TEX-S3-7B"></use></g><g data-mml-node="mtable" transform="translate(750,0)"><g data-mml-node="mtr" transform="translate(0,548.1)"><g data-mml-node="mtd"><g data-mml-node="msup"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-2-TEX-I-1D44E"></use></g><g data-mml-node="TeXAtom" transform="translate(562,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D458" xlink:href="#MJX-2-TEX-I-1D458"></use></g></g></g><g data-mml-node="msub" transform="translate(980.4,0)"><g data-mml-node="mi"><use data-c="1D45E" xlink:href="#MJX-2-TEX-I-1D45E"></use></g><g data-mml-node="TeXAtom" transform="translate(479,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D456" xlink:href="#MJX-2-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(345,0)"><use data-c="2212" xlink:href="#MJX-2-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(1123,0)"><use data-c="31" xlink:href="#MJX-2-TEX-N-31"></use></g></g></g><g data-mml-node="mo" transform="translate(2934.8,0)"><use data-c="6D" xlink:href="#MJX-2-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-2-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-2-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mi" transform="translate(5101.6,0)"><use data-c="1D45A" xlink:href="#MJX-2-TEX-I-1D45A"></use></g></g><g data-mml-node="mtd" transform="translate(6979.6,0)"><g data-mml-node="mrow"><g data-mml-node="mtext"><use data-c="69" xlink:href="#MJX-2-TEX-N-69"></use><use data-c="66" xlink:href="#MJX-2-TEX-N-66" transform="translate(278,0)"></use><use data-c="A0" xlink:href="#MJX-2-TEX-N-A0" transform="translate(584,0)"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(834,0)"><g data-mml-node="mi"><use data-c="1D456" xlink:href="#MJX-2-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(622.8,0)"><use data-c="3E" xlink:href="#MJX-2-TEX-N-3E"></use></g><g data-mml-node="mn" transform="translate(1678.6,0)"><use data-c="30" xlink:href="#MJX-2-TEX-N-30"></use></g></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-651.9)"><g data-mml-node="mtd"><g data-mml-node="mn"><use data-c="31" xlink:href="#MJX-2-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(777.8,0)"><use data-c="6D" xlink:href="#MJX-2-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-2-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-2-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mi" transform="translate(2944.6,0)"><use data-c="1D45A" xlink:href="#MJX-2-TEX-I-1D45A"></use></g></g><g data-mml-node="mtd" transform="translate(6979.6,0)"><g data-mml-node="mrow"><g data-mml-node="mtext"><use data-c="69" xlink:href="#MJX-2-TEX-N-69"></use><use data-c="66" xlink:href="#MJX-2-TEX-N-66" transform="translate(278,0)"></use><use data-c="A0" xlink:href="#MJX-2-TEX-N-A0" transform="translate(584,0)"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(834,0)"><g data-mml-node="mi"><use data-c="1D456" xlink:href="#MJX-2-TEX-I-1D456"></use></g><g data-mml-node="mo" transform="translate(622.8,0)"><use data-c="3D" xlink:href="#MJX-2-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(1678.6,0)"><use data-c="30" xlink:href="#MJX-2-TEX-N-30"></use></g></g></g></g></g></g><g data-mml-node="mo" transform="translate(10742.1,0) translate(0 250)"></g></g></g></g></svg></mjx-container><p>Since <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.986ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 878 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-2-TEX-I-1D45A"></use></g></g></g></svg></mjx-container> is a prime, <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="31.345ex" height="2.207ex" role="img" focusable="false" viewBox="0 -893.3 13854.4 975.3" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-2-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-2-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-2-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path><path id="MJX-2-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-2-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-2-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-2-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-2-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-2-TEX-I-1D44E"></use></g><g data-mml-node="TeXAtom" transform="translate(562,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-2-TEX-I-1D45B"></use></g></g></g><g data-mml-node="mo" transform="translate(1314,0)"><use data-c="6D" xlink:href="#MJX-2-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-2-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-2-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3480.8,0)"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-2-TEX-I-1D45A"></use></g></g><g data-mml-node="mo" transform="translate(4636.6,0)"><use data-c="3D" xlink:href="#MJX-2-TEX-N-3D"></use></g><g data-mml-node="msup" transform="translate(5692.4,0)"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-2-TEX-I-1D44E"></use></g><g data-mml-node="TeXAtom" transform="translate(562,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-2-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(877.8,0)"><use data-c="6D" xlink:href="#MJX-2-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-2-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-2-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mo" transform="translate(3044.6,0)"><use data-c="28" xlink:href="#MJX-2-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(3433.6,0)"><use data-c="1D45A" xlink:href="#MJX-2-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(4311.6,0)"><use data-c="2212" xlink:href="#MJX-2-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(5089.6,0)"><use data-c="31" xlink:href="#MJX-2-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(5589.6,0)"><use data-c="29" xlink:href="#MJX-2-TEX-N-29"></use></g></g></g><g data-mml-node="mo" transform="translate(10809.6,0)"><use data-c="6D" xlink:href="#MJX-2-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-2-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-2-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(12976.4,0)"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-2-TEX-I-1D45A"></use></g></g></g></g></svg></mjx-container> due to Fermat’s little theorem. Thus for each <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-2-TEX-I-1D45B"></use></g></g></g></svg></mjx-container> given, we suppose <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.985ex" height="1.742ex" role="img" focusable="false" viewBox="0 -759 877.5 770" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-V-2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-2-TEX-I-1D45B"></use></g><g data-mml-node="TeXAtom" transform="translate(633,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="2032" xlink:href="#MJX-2-TEX-V-2032"></use></g></g></g></g></g></svg></mjx-container> is the result of <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="14.532ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6423 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-2-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-2-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path><path id="MJX-2-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-2-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-2-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-2-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-2-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(877.8,0)"><use data-c="6D" xlink:href="#MJX-2-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-2-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-2-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mo" transform="translate(3044.6,0)"><use data-c="28" xlink:href="#MJX-2-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(3433.6,0)"><use data-c="1D45A" xlink:href="#MJX-2-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(4533.8,0)"><use data-c="2212" xlink:href="#MJX-2-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(5534,0)"><use data-c="31" xlink:href="#MJX-2-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(6034,0)"><use data-c="29" xlink:href="#MJX-2-TEX-N-29"></use></g></g></g></svg></mjx-container>, and we can also suppose that <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="11.349ex" height="2.181ex" role="img" focusable="false" viewBox="0 -759 5016.5 964" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-V-2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path><path id="MJX-2-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-2-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-2-TEX-I-1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path><path id="MJX-2-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-2-TEX-I-1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-2-TEX-I-1D45B"></use></g><g data-mml-node="TeXAtom" transform="translate(633,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="2032" xlink:href="#MJX-2-TEX-V-2032"></use></g></g></g><g data-mml-node="mo" transform="translate(1155.2,0)"><use data-c="3D" xlink:href="#MJX-2-TEX-N-3D"></use></g><g data-mml-node="mi" transform="translate(2211,0)"><use data-c="1D465" xlink:href="#MJX-2-TEX-I-1D465"></use></g><g data-mml-node="mi" transform="translate(2783,0)"><use data-c="1D458" xlink:href="#MJX-2-TEX-I-1D458"></use></g><g data-mml-node="mo" transform="translate(3526.2,0)"><use data-c="2B" xlink:href="#MJX-2-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(4526.5,0)"><use data-c="1D466" xlink:href="#MJX-2-TEX-I-1D466"></use></g></g></g></svg></mjx-container>, then <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.606ex" height="2.283ex" role="img" focusable="false" viewBox="0 -759 3804 1009" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-2-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-2-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-V-2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path><path id="MJX-2-TEX-N-2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path><path id="MJX-2-TEX-I-1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D465" xlink:href="#MJX-2-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(849.8,0)"><use data-c="3D" xlink:href="#MJX-2-TEX-N-3D"></use></g><g data-mml-node="msup" transform="translate(1905.6,0)"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-2-TEX-I-1D45B"></use></g><g data-mml-node="TeXAtom" transform="translate(633,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="2032" xlink:href="#MJX-2-TEX-V-2032"></use></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2783,0)"><g data-mml-node="mo"><use data-c="2F" xlink:href="#MJX-2-TEX-N-2F"></use></g></g><g data-mml-node="mi" transform="translate(3283,0)"><use data-c="1D458" xlink:href="#MJX-2-TEX-I-1D458"></use></g></g></g></svg></mjx-container> and <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="12.82ex" height="2.181ex" role="img" focusable="false" viewBox="0 -759 5666.6 964" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-2-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-V-2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path><path id="MJX-2-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-2-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-2-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path><path id="MJX-2-TEX-I-1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D466" xlink:href="#MJX-2-TEX-I-1D466"></use></g><g data-mml-node="mo" transform="translate(767.8,0)"><use data-c="3D" xlink:href="#MJX-2-TEX-N-3D"></use></g><g data-mml-node="msup" transform="translate(1823.6,0)"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-2-TEX-I-1D45B"></use></g><g data-mml-node="TeXAtom" transform="translate(633,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="2032" xlink:href="#MJX-2-TEX-V-2032"></use></g></g></g><g data-mml-node="mo" transform="translate(2978.8,0)"><use data-c="6D" xlink:href="#MJX-2-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-2-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-2-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mi" transform="translate(5145.6,0)"><use data-c="1D458" xlink:href="#MJX-2-TEX-I-1D458"></use></g></g></g></svg></mjx-container>, And we have</p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -10.406ex;" xmlns="http://www.w3.org/2000/svg" width="44.252ex" height="21.944ex" role="img" focusable="false" viewBox="0 -5099.6 19559.4 9699.2" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-2-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-2-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-2-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path><path id="MJX-2-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-2-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-2-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-2-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-2-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-2-TEX-V-2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path><path id="MJX-2-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-2-TEX-I-1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path><path id="MJX-2-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-2-TEX-I-1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-2-TEX-I-1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path><path id="MJX-2-TEX-I-1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path><path id="MJX-2-TEX-I-1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path><path id="MJX-2-TEX-I-1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0,4156.3)"><g data-mml-node="mtd"><g data-mml-node="msup"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-2-TEX-I-1D44E"></use></g><g data-mml-node="TeXAtom" transform="translate(562,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-2-TEX-I-1D45B"></use></g></g></g><g data-mml-node="mo" transform="translate(1314,0)"><use data-c="6D" xlink:href="#MJX-2-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-2-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-2-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3480.8,0)"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-2-TEX-I-1D45A"></use></g></g></g><g data-mml-node="mtd" transform="translate(4358.8,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><use data-c="3D" xlink:href="#MJX-2-TEX-N-3D"></use></g><g data-mml-node="msup" transform="translate(1333.6,0)"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-2-TEX-I-1D44E"></use></g><g data-mml-node="TeXAtom" transform="translate(562,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-2-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(877.8,0)"><use data-c="6D" xlink:href="#MJX-2-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-2-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-2-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mo" transform="translate(3044.6,0)"><use data-c="28" xlink:href="#MJX-2-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(3433.6,0)"><use data-c="1D45A" xlink:href="#MJX-2-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(4311.6,0)"><use data-c="2212" xlink:href="#MJX-2-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(5089.6,0)"><use data-c="31" xlink:href="#MJX-2-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(5589.6,0)"><use data-c="29" xlink:href="#MJX-2-TEX-N-29"></use></g></g></g><g data-mml-node="mo" transform="translate(6450.8,0)"><use data-c="6D" xlink:href="#MJX-2-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-2-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-2-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(8617.6,0)"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-2-TEX-I-1D45A"></use></g></g></g></g><g data-mml-node="mtr" transform="translate(0,2656.6)"><g data-mml-node="mtd" transform="translate(4358.8,0)"></g><g data-mml-node="mtd" transform="translate(4358.8,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><use data-c="3D" xlink:href="#MJX-2-TEX-N-3D"></use></g><g data-mml-node="msup" transform="translate(1333.6,0)"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-2-TEX-I-1D44E"></use></g><g data-mml-node="TeXAtom" transform="translate(562,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msup"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-2-TEX-I-1D45B"></use></g><g data-mml-node="TeXAtom" transform="translate(633,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="2032" xlink:href="#MJX-2-TEX-V-2032"></use></g></g></g></g></g><g data-mml-node="mo" transform="translate(2843.8,0)"><use data-c="6D" xlink:href="#MJX-2-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-2-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-2-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(5010.6,0)"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-2-TEX-I-1D45A"></use></g></g></g></g><g data-mml-node="mtr" transform="translate(0,1202.8)"><g data-mml-node="mtd" transform="translate(4358.8,0)"></g><g data-mml-node="mtd" transform="translate(4358.8,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><use data-c="3D" xlink:href="#MJX-2-TEX-N-3D"></use></g><g data-mml-node="msup" transform="translate(1333.6,0)"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-2-TEX-I-1D44E"></use></g><g data-mml-node="TeXAtom" transform="translate(562,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D465" xlink:href="#MJX-2-TEX-I-1D465"></use></g><g data-mml-node="mi" transform="translate(572,0)"><use data-c="1D458" xlink:href="#MJX-2-TEX-I-1D458"></use></g><g data-mml-node="mo" transform="translate(1093,0)"><use data-c="2B" xlink:href="#MJX-2-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(1871,0)"><use data-c="1D466" xlink:href="#MJX-2-TEX-I-1D466"></use></g></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-97.2)"><g data-mml-node="mtd" transform="translate(1168.8,0)"><g data-mml-node="mi"><use data-c="1D44F" xlink:href="#MJX-2-TEX-I-1D44F"></use></g><g data-mml-node="mi" transform="translate(429,0)"><use data-c="1D45A" xlink:href="#MJX-2-TEX-I-1D45A"></use></g><g data-mml-node="mi" transform="translate(1307,0)"><use data-c="1D45C" xlink:href="#MJX-2-TEX-I-1D45C"></use></g><g data-mml-node="mi" transform="translate(1792,0)"><use data-c="1D451" xlink:href="#MJX-2-TEX-I-1D451"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2312,0)"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-2-TEX-I-1D45A"></use></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-1550.9)"><g data-mml-node="mtd" transform="translate(4358.8,0)"></g><g data-mml-node="mtd" transform="translate(4358.8,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><use data-c="3D" xlink:href="#MJX-2-TEX-N-3D"></use></g><g data-mml-node="msup" transform="translate(1333.6,0)"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-2-TEX-I-1D44E"></use></g><g data-mml-node="TeXAtom" transform="translate(562,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D465" xlink:href="#MJX-2-TEX-I-1D465"></use></g><g data-mml-node="mi" transform="translate(572,0)"><use data-c="1D458" xlink:href="#MJX-2-TEX-I-1D458"></use></g></g></g><g data-mml-node="msup" transform="translate(2718.4,0)"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-2-TEX-I-1D44E"></use></g><g data-mml-node="TeXAtom" transform="translate(562,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D466" xlink:href="#MJX-2-TEX-I-1D466"></use></g></g></g><g data-mml-node="mo" transform="translate(3954.7,0)"><use data-c="6D" xlink:href="#MJX-2-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-2-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-2-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(6121.5,0)"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-2-TEX-I-1D45A"></use></g></g></g></g><g data-mml-node="mtr" transform="translate(0,-3004.6)"><g data-mml-node="mtd" transform="translate(4358.8,0)"></g><g data-mml-node="mtd" transform="translate(4358.8,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><use data-c="3D" xlink:href="#MJX-2-TEX-N-3D"></use></g><g data-mml-node="mo" transform="translate(1333.6,0)"><use data-c="28" xlink:href="#MJX-2-TEX-N-28"></use></g><g data-mml-node="msup" transform="translate(1722.6,0)"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-2-TEX-I-1D44E"></use></g><g data-mml-node="TeXAtom" transform="translate(562,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D465" xlink:href="#MJX-2-TEX-I-1D465"></use></g><g data-mml-node="mi" transform="translate(572,0)"><use data-c="1D458" xlink:href="#MJX-2-TEX-I-1D458"></use></g></g></g><g data-mml-node="mo" transform="translate(3385.2,0)"><use data-c="6D" xlink:href="#MJX-2-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-2-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-2-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mi" transform="translate(5552,0)"><use data-c="1D45A" xlink:href="#MJX-2-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(6430,0)"><use data-c="29" xlink:href="#MJX-2-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(6819,0)"><use data-c="28" xlink:href="#MJX-2-TEX-N-28"></use></g><g data-mml-node="msup" transform="translate(7208,0)"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-2-TEX-I-1D44E"></use></g><g data-mml-node="TeXAtom" transform="translate(562,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D466" xlink:href="#MJX-2-TEX-I-1D466"></use></g></g></g><g data-mml-node="mo" transform="translate(8444.2,0)"><use data-c="6D" xlink:href="#MJX-2-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-2-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-2-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mi" transform="translate(10611,0)"><use data-c="1D45A" xlink:href="#MJX-2-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(11489,0)"><use data-c="29" xlink:href="#MJX-2-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(12155.8,0)"><use data-c="6D" xlink:href="#MJX-2-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-2-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-2-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mi" transform="translate(14322.6,0)"><use data-c="1D45A" xlink:href="#MJX-2-TEX-I-1D45A"></use></g></g></g><g data-mml-node="mtr" transform="translate(0,-4304.6)"><g data-mml-node="mtd" transform="translate(4358.8,0)"></g><g data-mml-node="mtd" transform="translate(4358.8,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><use data-c="3D" xlink:href="#MJX-2-TEX-N-3D"></use></g><g data-mml-node="msub" transform="translate(1333.6,0)"><g data-mml-node="mi"><use data-c="1D45E" xlink:href="#MJX-2-TEX-I-1D45E"></use></g><g data-mml-node="TeXAtom" transform="translate(479,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D465" xlink:href="#MJX-2-TEX-I-1D465"></use></g></g></g><g data-mml-node="msub" transform="translate(2267,0)"><g data-mml-node="mi"><use data-c="1D45D" xlink:href="#MJX-2-TEX-I-1D45D"></use></g><g data-mml-node="TeXAtom" transform="translate(536,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D466" xlink:href="#MJX-2-TEX-I-1D466"></use></g></g></g><g data-mml-node="mo" transform="translate(3477.3,0)"><use data-c="6D" xlink:href="#MJX-2-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-2-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-2-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(5644.1,0)"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-2-TEX-I-1D45A"></use></g></g></g></g></g></g></g></svg></mjx-container><p>Since we can do <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.667ex;" xmlns="http://www.w3.org/2000/svg" width="11.739ex" height="2.237ex" role="img" focusable="false" viewBox="0 -694 5188.5 989" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path><path id="MJX-2-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-2-TEX-I-1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path><path id="MJX-2-TEX-I-1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-2-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-2-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path><path id="MJX-2-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D45E" xlink:href="#MJX-2-TEX-I-1D45E"></use></g><g data-mml-node="TeXAtom" transform="translate(479,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D465" xlink:href="#MJX-2-TEX-I-1D465"></use></g></g></g><g data-mml-node="msub" transform="translate(933.5,0)"><g data-mml-node="mi"><use data-c="1D45D" xlink:href="#MJX-2-TEX-I-1D45D"></use></g><g data-mml-node="TeXAtom" transform="translate(536,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D466" xlink:href="#MJX-2-TEX-I-1D466"></use></g></g></g><g data-mml-node="mo" transform="translate(2143.7,0)"><use data-c="6D" xlink:href="#MJX-2-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-2-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-2-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(4310.5,0)"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-2-TEX-I-1D45A"></use></g></g></g></g></svg></mjx-container> in <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.692ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2074 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-C-4F" d="M308 428Q289 428 289 438Q289 457 318 508T378 593Q417 638 475 671T599 705Q688 705 732 643T777 483Q777 380 733 285T620 123T464 18T293 -22Q188 -22 123 51T58 245Q58 327 87 403T159 533T249 626T333 685T388 705Q404 705 404 693Q404 674 363 649Q333 632 304 606T239 537T181 429T158 290Q158 179 214 114T364 48Q489 48 583 165T677 438Q677 473 670 505T648 568T601 617T528 636Q518 636 513 635Q486 629 460 600T419 544T392 490Q383 470 372 459Q341 430 308 428Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="4F" xlink:href="#MJX-1-TEX-C-4F"></use></g></g><g data-mml-node="mo" transform="translate(796,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mn" transform="translate(1185,0)"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(1685,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></svg></mjx-container>, we can solve the problem with the time complexity of <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="11.601ex" height="2.473ex" role="img" focusable="false" viewBox="0 -843 5127.4 1093" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-C-4F" d="M308 428Q289 428 289 438Q289 457 318 508T378 593Q417 638 475 671T599 705Q688 705 732 643T777 483Q777 380 733 285T620 123T464 18T293 -22Q188 -22 123 51T58 245Q58 327 87 403T159 533T249 626T333 685T388 705Q404 705 404 693Q404 674 363 649Q333 632 304 606T239 537T181 429T158 290Q158 179 214 114T364 48Q489 48 583 165T677 438Q677 473 670 505T648 568T601 617T528 636Q518 636 513 635Q486 629 460 600T419 544T392 490Q383 470 372 459Q341 430 308 428Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-N-221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"></path><path id="MJX-1-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="4F" xlink:href="#MJX-1-TEX-C-4F"></use></g></g><g data-mml-node="mo" transform="translate(796,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="msqrt" transform="translate(1185,0)"><g transform="translate(853,0)"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g></g><g data-mml-node="mo" transform="translate(0,-17)"><use data-c="221A" xlink:href="#MJX-1-TEX-N-221A"></use></g><rect width="878" height="60" x="853" y="723"></rect></g><g data-mml-node="mo" transform="translate(3138.2,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(4138.4,0)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(4738.4,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></svg></mjx-container>. Notice that if <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.986ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 878 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g></g></g></svg></mjx-container> is not a prime, we can also use the conclusion below to process <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g></g></g></svg></mjx-container>:</p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -3.605ex;" xmlns="http://www.w3.org/2000/svg" width="59.536ex" height="8.341ex" role="img" focusable="false" viewBox="0 -2093.3 26314.7 3686.7" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-2261" d="M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"></path><path id="MJX-1-TEX-S4-23A7" d="M712 899L718 893V876V865Q718 854 704 846Q627 793 577 710T510 525Q510 524 509 521Q505 493 504 349Q504 345 504 334Q504 277 504 240Q504 -2 503 -4Q502 -8 494 -9T444 -10Q392 -10 390 -9Q387 -8 386 -5Q384 5 384 230Q384 262 384 312T383 382Q383 481 392 535T434 656Q510 806 664 892L677 899H712Z"></path><path id="MJX-1-TEX-S4-23A9" d="M718 -893L712 -899H677L666 -893Q542 -825 468 -714T385 -476Q384 -466 384 -282Q384 3 385 5L389 9Q392 10 444 10Q486 10 494 9T503 4Q504 2 504 -239V-310V-366Q504 -470 508 -513T530 -609Q546 -657 569 -698T617 -767T661 -812T699 -843T717 -856T718 -876V-893Z"></path><path id="MJX-1-TEX-S4-23A8" d="M389 1159Q391 1160 455 1160Q496 1160 498 1159Q501 1158 502 1155Q504 1145 504 924Q504 691 503 682Q494 549 425 439T243 259L229 250L243 241Q349 175 421 66T503 -182Q504 -191 504 -424Q504 -600 504 -629T499 -659H498Q496 -660 444 -660T390 -659Q387 -658 386 -655Q384 -645 384 -425V-282Q384 -176 377 -116T342 10Q325 54 301 92T255 155T214 196T183 222T171 232Q170 233 170 250T171 268Q171 269 191 284T240 331T300 407T354 524T383 679Q384 691 384 925Q384 1152 385 1155L389 1159Z"></path><path id="MJX-1-TEX-S4-23AA" d="M384 150V266Q384 304 389 309Q391 310 455 310Q496 310 498 309Q502 308 503 298Q504 283 504 150Q504 32 504 12T499 -9H498Q496 -10 444 -10T390 -9Q386 -8 385 2Q384 17 384 150Z"></path><path id="MJX-1-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path><path id="MJX-1-TEX-I-1D711" d="M92 210Q92 176 106 149T142 108T185 85T220 72L235 70L237 71L250 112Q268 170 283 211T322 299T370 375T429 423T502 442Q547 442 582 410T618 302Q618 224 575 152T457 35T299 -10Q273 -10 273 -12L266 -48Q260 -83 252 -125T241 -179Q236 -203 215 -212Q204 -218 190 -218Q159 -215 159 -185Q159 -175 214 -2L209 0Q204 2 195 5T173 14T147 28T120 46T94 71T71 103T56 142T50 190Q50 238 76 311T149 431H162Q183 431 183 423Q183 417 175 409Q134 361 114 300T92 210ZM574 278Q574 320 550 344T486 369Q437 369 394 329T323 218Q309 184 295 109L286 64Q304 62 306 62Q423 62 498 131T574 278Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path><path id="MJX-1-TEX-N-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"></path><path id="MJX-1-TEX-N-63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z"></path><path id="MJX-1-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-1-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-1-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-1-TEX-N-2260" d="M166 -215T159 -215T147 -212T141 -204T139 -197Q139 -190 144 -183L306 133H70Q56 140 56 153Q56 168 72 173H327L406 327H72Q56 332 56 347Q56 360 70 367H426Q597 702 602 707Q605 716 618 716Q625 716 630 712T636 703T638 696Q638 692 471 367H707Q722 359 722 347Q722 336 708 328L451 327L371 173H708Q722 163 722 153Q722 140 707 133H351Q175 -210 170 -212Q166 -215 159 -215Z"></path><path id="MJX-1-TEX-N-3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path><path id="MJX-1-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-1-TEX-N-2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-1-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(562,363) scale(0.707)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g></g><g data-mml-node="mo" transform="translate(1314,0)"><use data-c="2261" xlink:href="#MJX-1-TEX-N-2261"></use></g><g data-mml-node="mrow" transform="translate(2369.8,0)"><g data-mml-node="mo"><use data-c="23A7" xlink:href="#MJX-1-TEX-S4-23A7" transform="translate(0,1194.3)"></use><use data-c="23A9" xlink:href="#MJX-1-TEX-S4-23A9" transform="translate(0,-694.3)"></use><use data-c="23A8" xlink:href="#MJX-1-TEX-S4-23A8" transform="translate(0,0)"></use><svg width="889" height="224.3" y="1060" x="0" viewBox="0 39.5 889 224.3"><use data-c="23AA" xlink:href="#MJX-1-TEX-S4-23AA" transform="scale(1,1.103)"></use></svg><svg width="889" height="224.3" y="-784.3" x="0" viewBox="0 39.5 889 224.3"><use data-c="23AA" xlink:href="#MJX-1-TEX-S4-23AA" transform="scale(1,1.103)"></use></svg></g><g data-mml-node="mtable" transform="translate(889,0)"><g data-mml-node="mtr" transform="translate(0,1200)"><g data-mml-node="mtd"><g data-mml-node="msup"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-1-TEX-I-1D44E"></use></g><g data-mml-node="TeXAtom" transform="translate(562,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(877.8,0)"><use data-c="6D" xlink:href="#MJX-1-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-1-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mi" transform="translate(3044.6,0)"><use data-c="1D711" xlink:href="#MJX-1-TEX-I-1D711"></use></g><g data-mml-node="mo" transform="translate(3698.6,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(4087.6,0)"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(4965.6,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></g><g data-mml-node="mtd" transform="translate(7581.8,0)"><g data-mml-node="mo"><use data-c="67" xlink:href="#MJX-1-TEX-N-67"></use><use data-c="63" xlink:href="#MJX-1-TEX-N-63" transform="translate(500,0)"></use><use data-c="64" xlink:href="#MJX-1-TEX-N-64" transform="translate(944,0)"></use></g><g data-mml-node="mo" transform="translate(1500,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1889,0)"><use data-c="1D44E" xlink:href="#MJX-1-TEX-I-1D44E"></use></g><g data-mml-node="mo" transform="translate(2418,0)"><use data-c="2C" xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mstyle" transform="translate(2696,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(3029.7,0)"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(3907.7,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(4574.4,0)"><use data-c="3D" xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(5630.2,0)"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use></g></g></g><g data-mml-node="mtr" transform="translate(0,0)"><g data-mml-node="mtd"><g data-mml-node="msup"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-1-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(562,363) scale(0.707)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g></g></g><g data-mml-node="mtd" transform="translate(7581.8,0)"><g data-mml-node="mo"><use data-c="67" xlink:href="#MJX-1-TEX-N-67"></use><use data-c="63" xlink:href="#MJX-1-TEX-N-63" transform="translate(500,0)"></use><use data-c="64" xlink:href="#MJX-1-TEX-N-64" transform="translate(944,0)"></use></g><g data-mml-node="mo" transform="translate(1500,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1889,0)"><use data-c="1D44E" xlink:href="#MJX-1-TEX-I-1D44E"></use></g><g data-mml-node="mo" transform="translate(2418,0)"><use data-c="2C" xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mstyle" transform="translate(2696,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(3029.7,0)"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(3907.7,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(4574.4,0)"><use data-c="2260" xlink:href="#MJX-1-TEX-N-2260"></use></g><g data-mml-node="mn" transform="translate(5630.2,0)"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(6130.2,0)"><use data-c="2C" xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mstyle" transform="translate(6408.2,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(6741.9,0)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(7619.7,0)"><use data-c="3C" xlink:href="#MJX-1-TEX-N-3C"></use></g><g data-mml-node="mi" transform="translate(8675.4,0)"><use data-c="1D711" xlink:href="#MJX-1-TEX-I-1D711"></use></g><g data-mml-node="mo" transform="translate(9329.4,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(9718.4,0)"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(10596.4,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g></g></g><g data-mml-node="mtr" transform="translate(0,-1343.3)"><g data-mml-node="mtd"><g data-mml-node="msup"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-1-TEX-I-1D44E"></use></g><g data-mml-node="TeXAtom" transform="translate(562,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(877.8,0)"><use data-c="6D" xlink:href="#MJX-1-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-1-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mi" transform="translate(3044.6,0)"><use data-c="1D711" xlink:href="#MJX-1-TEX-I-1D711"></use></g><g data-mml-node="mo" transform="translate(3698.6,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(4087.6,0)"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(4965.6,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(5354.6,0)"><use data-c="2B" xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(6132.6,0)"><use data-c="1D711" xlink:href="#MJX-1-TEX-I-1D711"></use></g><g data-mml-node="mo" transform="translate(6786.6,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(7175.6,0)"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(8053.6,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></g><g data-mml-node="mtd" transform="translate(7581.8,0)"><g data-mml-node="mo"><use data-c="67" xlink:href="#MJX-1-TEX-N-67"></use><use data-c="63" xlink:href="#MJX-1-TEX-N-63" transform="translate(500,0)"></use><use data-c="64" xlink:href="#MJX-1-TEX-N-64" transform="translate(944,0)"></use></g><g data-mml-node="mo" transform="translate(1500,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1889,0)"><use data-c="1D44E" xlink:href="#MJX-1-TEX-I-1D44E"></use></g><g data-mml-node="mo" transform="translate(2418,0)"><use data-c="2C" xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mstyle" transform="translate(2696,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(3029.7,0)"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(3907.7,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g><g data-mml-node="mo" transform="translate(4574.4,0)"><use data-c="2260" xlink:href="#MJX-1-TEX-N-2260"></use></g><g data-mml-node="mn" transform="translate(5630.2,0)"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use></g><g data-mml-node="mo" transform="translate(6130.2,0)"><use data-c="2C" xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mstyle" transform="translate(6408.2,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(6741.9,0)"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(7619.7,0)"><use data-c="2265" xlink:href="#MJX-1-TEX-N-2265"></use></g><g data-mml-node="mi" transform="translate(8675.4,0)"><use data-c="1D711" xlink:href="#MJX-1-TEX-I-1D711"></use></g><g data-mml-node="mo" transform="translate(9329.4,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(9718.4,0)"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(10596.4,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></g><g data-mml-node="mo" transform="translate(19456.2,0) translate(0 250)"></g></g><g data-mml-node="mspace" transform="translate(21826.1,0)"></g><g data-mml-node="mo" transform="translate(22270.1,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(22659.1,0)"><use data-c="6D" xlink:href="#MJX-1-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-1-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mspace" transform="translate(24548.1,0)"></g><g data-mml-node="mi" transform="translate(25047.7,0)"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(25925.7,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></svg></mjx-container><p>Thus we can use <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="12.114ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5354.6 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path><path id="MJX-1-TEX-I-1D711" d="M92 210Q92 176 106 149T142 108T185 85T220 72L235 70L237 71L250 112Q268 170 283 211T322 299T370 375T429 423T502 442Q547 442 582 410T618 302Q618 224 575 152T457 35T299 -10Q273 -10 273 -12L266 -48Q260 -83 252 -125T241 -179Q236 -203 215 -212Q204 -218 190 -218Q159 -215 159 -185Q159 -175 214 -2L209 0Q204 2 195 5T173 14T147 28T120 46T94 71T71 103T56 142T50 190Q50 238 76 311T149 431H162Q183 431 183 423Q183 417 175 409Q134 361 114 300T92 210ZM574 278Q574 320 550 344T486 369Q437 369 394 329T323 218Q309 184 295 109L286 64Q304 62 306 62Q423 62 498 131T574 278Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-I-1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(877.8,0)"><use data-c="6D" xlink:href="#MJX-1-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-1-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mi" transform="translate(3044.6,0)"><use data-c="1D711" xlink:href="#MJX-1-TEX-I-1D711"></use></g><g data-mml-node="mo" transform="translate(3698.6,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(4087.6,0)"><use data-c="1D45A" xlink:href="#MJX-1-TEX-I-1D45A"></use></g><g data-mml-node="mo" transform="translate(4965.6,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></svg></mjx-container> instead of <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-1-TEX-I-1D45B"></use></g></g></g></svg></mjx-container>. Now I wrap the whole algorithm with a tester in C++ as below, to help you understand:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/extc++.h&gt;</span></span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">constexpr</span> ll MOD = <span class="number">1000000007</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">namespace</span> QuickModularPowerWithPreprocess &#123;</span><br><span class="line">    <span class="comment">// all variables</span></span><br><span class="line">    ll k;</span><br><span class="line">    vector&lt;ll&gt; p;</span><br><span class="line">    vector&lt;ll&gt; q;</span><br><span class="line">    <span class="comment">// O(1) modulo mul to calculate a^b mod m</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">static</span></span></span><br><span class="line"><span class="function">    ll <span class="title">modmul</span><span class="params">(ll a, ll b, ll m)</span> </span>&#123;</span><br><span class="line">        a = (a % m + m) % m;</span><br><span class="line">        b = (b % m + m) % m;</span><br><span class="line">        <span class="keyword">return</span> ((a * b -</span><br><span class="line">                    <span class="built_in">static_cast</span>&lt;ll&gt;(<span class="built_in">static_cast</span>&lt;<span class="type">long</span> <span class="type">double</span>&gt;(a) / m * b) * m) %</span><br><span class="line">                m + m) % m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Preprocess</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">static</span></span></span><br><span class="line"><span class="function">    <span class="type">void</span> <span class="title">init</span><span class="params">(ll a, ll m)</span> </span>&#123;</span><br><span class="line">        k = <span class="built_in">ceil</span>(<span class="built_in">sqrt</span>(<span class="built_in">static_cast</span>&lt;<span class="type">double</span>&gt;(m)));</span><br><span class="line">        <span class="built_in">vector</span>&lt;ll&gt;().<span class="built_in">swap</span>(p);</span><br><span class="line">        <span class="built_in">vector</span>&lt;ll&gt;().<span class="built_in">swap</span>(q);</span><br><span class="line">        p.<span class="built_in">resize</span>(k + <span class="number">1</span>);</span><br><span class="line">        p.<span class="built_in">at</span>(<span class="number">0</span>) = <span class="number">1</span> % m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) &#123;</span><br><span class="line">            p.<span class="built_in">at</span>(i) = <span class="built_in">modmul</span>(a, p.<span class="built_in">at</span>(i - <span class="number">1</span>), m);</span><br><span class="line">        &#125;</span><br><span class="line">        q.<span class="built_in">resize</span>(k + <span class="number">1</span>);</span><br><span class="line">        q.<span class="built_in">at</span>(<span class="number">0</span>) = <span class="number">1</span> % m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) &#123;</span><br><span class="line">            <span class="comment">// q[i] = a^k * q_&#123;i-1&#125; mod m = p.at(k) * q_&#123;i-1&#125; mod m</span></span><br><span class="line">            q.<span class="built_in">at</span>(i) = <span class="built_in">modmul</span>(p.<span class="built_in">at</span>(k), q.<span class="built_in">at</span>(i - <span class="number">1</span>), m);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Query in O(1)</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">static</span></span></span><br><span class="line"><span class="function">    ll <span class="title">query</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line">        ll n_prime = n % (MOD - <span class="number">1</span>);</span><br><span class="line">        ll x = n_prime / k;</span><br><span class="line">        ll y = n_prime % k;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">modmul</span>(q.<span class="built_in">at</span>(x), p.<span class="built_in">at</span>(y), MOD);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Tester &#123;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">static</span></span></span><br><span class="line"><span class="function">    ll <span class="title">modpow</span><span class="params">(ll a, ll n, ll M = MOD)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (M == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        ll r;</span><br><span class="line">        <span class="keyword">for</span> (r = <span class="number">1</span>, a %= M; n; a = (a * a) % M, n &gt;&gt;= <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> (n % <span class="number">2</span>)</span><br><span class="line">                r = (r * a) % M;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> get_random_n = []() &#123;</span><br><span class="line">        <span class="type">static</span> ll lower_bound = <span class="number">1</span>;</span><br><span class="line">        <span class="type">static</span> ll upper_bound = <span class="number">1000000000000000000</span>;</span><br><span class="line">        <span class="type">static</span> random_device dev;</span><br><span class="line">        <span class="function"><span class="type">static</span> mt19937 <span class="title">random_generator</span><span class="params">(dev())</span></span>;</span><br><span class="line">        <span class="function"><span class="type">static</span> uniform_int_distribution <span class="title">dist</span><span class="params">(lower_bound, upper_bound)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dist</span>(random_generator);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">10000000</span>;</span><br><span class="line">    ll a = <span class="number">1147483648</span>;</span><br><span class="line">    ll b;</span><br><span class="line">    <span class="comment">// init</span></span><br><span class="line">    QuickModularPowerWithPreprocess::<span class="built_in">init</span>(a, MOD);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        b = Tester::<span class="built_in">get_random_n</span>();</span><br><span class="line">        <span class="built_in">assert</span>(QuickModularPowerWithPreprocess::<span class="built_in">query</span>(b) ==</span><br><span class="line">                Tester::<span class="built_in">modpow</span>(a, b, MOD));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Furthermore, you can always rewrite the algorithm and let the modern C++ does the pre-calculation in compile-time and reduce its runtime.</p><h4 id="0x03-Exponentiation-of-Matrix-with-Modulo-Operation-1"><a href="#0x03-Exponentiation-of-Matrix-with-Modulo-Operation-1" class="headerlink" title="0x03 Exponentiation of Matrix with Modulo Operation"></a>0x03 Exponentiation of Matrix with Modulo Operation</h4><p>Like the integers, suppose we are given a matrix <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.697ex" height="1.62ex" role="img" focusable="false" viewBox="0 -716 750 716" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D434" xlink:href="#MJX-1-TEX-I-1D434"></use></g></g></g></svg></mjx-container> with the same length of rows and columns and two positive integers <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="3.115ex" height="2.009ex" role="img" focusable="false" viewBox="0 -694 1376.7 888" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-1-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-1-TEX-I-1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D44F" xlink:href="#MJX-1-TEX-I-1D44F"></use></g><g data-mml-node="mo" transform="translate(429,0)"><use data-c="2C" xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(873.7,0)"><use data-c="1D45D" xlink:href="#MJX-1-TEX-I-1D45D"></use></g></g></g></svg></mjx-container>, and calculate <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="9.24ex" height="2.37ex" role="img" focusable="false" viewBox="0 -853.7 4083.9 1047.7" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path><path id="MJX-1-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-1-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path><path id="MJX-1-TEX-I-1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><use data-c="1D434" xlink:href="#MJX-1-TEX-I-1D434"></use></g><g data-mml-node="mi" transform="translate(783,363) scale(0.707)"><use data-c="1D44F" xlink:href="#MJX-1-TEX-I-1D44F"></use></g></g><g data-mml-node="mo" transform="translate(1414.1,0)"><use data-c="6D" xlink:href="#MJX-1-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-1-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mi" transform="translate(3580.9,0)"><use data-c="1D45D" xlink:href="#MJX-1-TEX-I-1D45D"></use></g></g></g></svg></mjx-container>. Since the matrix has the associative property, we can apply the method which is similar to the second method in <strong>0x02</strong>, in coding competition, this technique can help obtain some value that fits in a linear recurrence relation in logarithmic time, such as obtain the <strong>kth</strong> Fibonacci number in <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.008ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3539.7 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-C-4F" d="M308 428Q289 428 289 438Q289 457 318 508T378 593Q417 638 475 671T599 705Q688 705 732 643T777 483Q777 380 733 285T620 123T464 18T293 -22Q188 -22 123 51T58 245Q58 327 87 403T159 533T249 626T333 685T388 705Q404 705 404 693Q404 674 363 649Q333 632 304 606T239 537T181 429T158 290Q158 179 214 114T364 48Q489 48 583 165T677 438Q677 473 670 505T648 568T601 617T528 636Q518 636 513 635Q486 629 460 600T419 544T392 490Q383 470 372 459Q341 430 308 428Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"></path><path id="MJX-1-TEX-N-2061" d=""></path><path id="MJX-1-TEX-I-1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="4F" xlink:href="#MJX-1-TEX-C-4F"></use></g></g><g data-mml-node="mo" transform="translate(796,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1185,0)"><use data-c="6C" xlink:href="#MJX-1-TEX-N-6C"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(278,0)"></use><use data-c="67" xlink:href="#MJX-1-TEX-N-67" transform="translate(778,0)"></use></g><g data-mml-node="mo" transform="translate(2463,0)"><use data-c="2061" xlink:href="#MJX-1-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2629.7,0)"><g data-mml-node="mi"><use data-c="1D458" xlink:href="#MJX-1-TEX-I-1D458"></use></g></g><g data-mml-node="mo" transform="translate(3150.7,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></svg></mjx-container>, which can extend to obtain the <strong>kth</strong> element of any linear recurrence relation with constant coefficients. I don’t want to go deeper since this technique has been covered in Eigenvalues of linear algebra, and its time complexity is <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="10.145ex" height="2.451ex" role="img" focusable="false" viewBox="0 -833.2 4483.9 1083.2" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-398" d="M56 340Q56 423 86 494T164 610T270 680T388 705Q521 705 621 601T722 341Q722 260 693 191T617 75T510 4T388 -22T267 3T160 74T85 189T56 340ZM610 339Q610 428 590 495T535 598T463 651T384 668Q332 668 289 638T221 566Q168 485 168 339Q168 274 176 235Q189 158 228 105T324 28Q356 16 388 16Q415 16 442 24T501 54T555 111T594 205T610 339ZM223 263V422H263V388H514V422H554V263H514V297H263V263H223Z"></path><path id="MJX-1-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-1-TEX-I-1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path id="MJX-1-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-1-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-1-TEX-N-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"></path><path id="MJX-1-TEX-N-2061" d=""></path><path id="MJX-1-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-1-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="398" xlink:href="#MJX-1-TEX-N-398"></use></g><g data-mml-node="mo" transform="translate(778,0)"><use data-c="28" xlink:href="#MJX-1-TEX-N-28"></use></g><g data-mml-node="msup" transform="translate(1167,0)"><g data-mml-node="mi"><use data-c="1D45F" xlink:href="#MJX-1-TEX-I-1D45F"></use></g><g data-mml-node="mn" transform="translate(484,363) scale(0.707)"><use data-c="33" xlink:href="#MJX-1-TEX-N-33"></use></g></g><g data-mml-node="mi" transform="translate(2221.2,0)"><use data-c="6C" xlink:href="#MJX-1-TEX-N-6C"></use><use data-c="6F" xlink:href="#MJX-1-TEX-N-6F" transform="translate(278,0)"></use><use data-c="67" xlink:href="#MJX-1-TEX-N-67" transform="translate(778,0)"></use></g><g data-mml-node="mo" transform="translate(3499.2,0)"><use data-c="2061" xlink:href="#MJX-1-TEX-N-2061"></use></g><g data-mml-node="mi" transform="translate(3665.9,0)"><use data-c="1D44F" xlink:href="#MJX-1-TEX-I-1D44F"></use></g><g data-mml-node="mo" transform="translate(4094.9,0)"><use data-c="29" xlink:href="#MJX-1-TEX-N-29"></use></g></g></g></svg></mjx-container>.</p><p>such that <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.02ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 451 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D45F" xlink:href="#MJX-1-TEX-I-1D45F"></use></g></g></g></svg></mjx-container> is the size of <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.697ex" height="1.62ex" role="img" focusable="false" viewBox="0 -716 750 716" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D434" xlink:href="#MJX-1-TEX-I-1D434"></use></g></g></g></svg></mjx-container>.</p><p>But I would like to share with you some tips when you solve such problems, as a coding competitor:</p><ul><li>Avoid recursion, since it is expensive to copy the matrix.</li><li>Do not forget the modulo operation when you do the multiplication of two matrices.</li><li>For the multiplication of extremely large matrices, use other algorithms such as <a href="https://en.wikipedia.org/wiki/Strassen_algorithm">the Strassen algorithm</a> to reduce the time complexity.</li></ul><h4 id="0x04-References-1"><a href="#0x04-References-1" class="headerlink" title="0x04 References"></a>0x04 References</h4><p><a href="https://cp-algorithms.com/algebra/fibonacci-numbers.html">Fibonacci Numbers</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;The-Tricks-of-Modulo-Operation-with-Exponentiation-for-Coding-Competition&quot;&gt;&lt;a href=&quot;#The-Tricks-of-Modulo-Operation-with-Exponentiat</summary>
      
    
    
    
    
    <category term="Blogs" scheme="https://h-shen.github.io/tags/Blogs/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://h-shen.github.io/note_06/"/>
    <id>https://h-shen.github.io/note_06/</id>
    <published>2023-11-11T05:54:11.000Z</published>
    <updated>2023-11-12T00:27:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Coding-Template"><a href="#Coding-Template" class="headerlink" title="Coding Template"></a>Coding Template</h3><p>This is the full version of my personal coding template for competitive coding in C++, suppose we are using GCC with standard C++17.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br><span class="line">1423</span><br><span class="line">1424</span><br><span class="line">1425</span><br><span class="line">1426</span><br><span class="line">1427</span><br><span class="line">1428</span><br><span class="line">1429</span><br><span class="line">1430</span><br><span class="line">1431</span><br><span class="line">1432</span><br><span class="line">1433</span><br><span class="line">1434</span><br><span class="line">1435</span><br><span class="line">1436</span><br><span class="line">1437</span><br><span class="line">1438</span><br><span class="line">1439</span><br><span class="line">1440</span><br><span class="line">1441</span><br><span class="line">1442</span><br><span class="line">1443</span><br><span class="line">1444</span><br><span class="line">1445</span><br><span class="line">1446</span><br><span class="line">1447</span><br><span class="line">1448</span><br><span class="line">1449</span><br><span class="line">1450</span><br><span class="line">1451</span><br><span class="line">1452</span><br><span class="line">1453</span><br><span class="line">1454</span><br><span class="line">1455</span><br><span class="line">1456</span><br><span class="line">1457</span><br><span class="line">1458</span><br><span class="line">1459</span><br><span class="line">1460</span><br><span class="line">1461</span><br><span class="line">1462</span><br><span class="line">1463</span><br><span class="line">1464</span><br><span class="line">1465</span><br><span class="line">1466</span><br><span class="line">1467</span><br><span class="line">1468</span><br><span class="line">1469</span><br><span class="line">1470</span><br><span class="line">1471</span><br><span class="line">1472</span><br><span class="line">1473</span><br><span class="line">1474</span><br><span class="line">1475</span><br><span class="line">1476</span><br><span class="line">1477</span><br><span class="line">1478</span><br><span class="line">1479</span><br><span class="line">1480</span><br><span class="line">1481</span><br><span class="line">1482</span><br><span class="line">1483</span><br><span class="line">1484</span><br><span class="line">1485</span><br><span class="line">1486</span><br><span class="line">1487</span><br><span class="line">1488</span><br><span class="line">1489</span><br><span class="line">1490</span><br><span class="line">1491</span><br><span class="line">1492</span><br><span class="line">1493</span><br><span class="line">1494</span><br><span class="line">1495</span><br><span class="line">1496</span><br><span class="line">1497</span><br><span class="line">1498</span><br><span class="line">1499</span><br><span class="line">1500</span><br><span class="line">1501</span><br><span class="line">1502</span><br><span class="line">1503</span><br><span class="line">1504</span><br><span class="line">1505</span><br><span class="line">1506</span><br><span class="line">1507</span><br><span class="line">1508</span><br><span class="line">1509</span><br><span class="line">1510</span><br><span class="line">1511</span><br><span class="line">1512</span><br><span class="line">1513</span><br><span class="line">1514</span><br><span class="line">1515</span><br><span class="line">1516</span><br><span class="line">1517</span><br><span class="line">1518</span><br><span class="line">1519</span><br><span class="line">1520</span><br><span class="line">1521</span><br><span class="line">1522</span><br><span class="line">1523</span><br><span class="line">1524</span><br><span class="line">1525</span><br><span class="line">1526</span><br><span class="line">1527</span><br><span class="line">1528</span><br><span class="line">1529</span><br><span class="line">1530</span><br><span class="line">1531</span><br><span class="line">1532</span><br><span class="line">1533</span><br><span class="line">1534</span><br><span class="line">1535</span><br><span class="line">1536</span><br><span class="line">1537</span><br><span class="line">1538</span><br><span class="line">1539</span><br><span class="line">1540</span><br><span class="line">1541</span><br><span class="line">1542</span><br><span class="line">1543</span><br><span class="line">1544</span><br><span class="line">1545</span><br><span class="line">1546</span><br><span class="line">1547</span><br><span class="line">1548</span><br><span class="line">1549</span><br><span class="line">1550</span><br><span class="line">1551</span><br><span class="line">1552</span><br><span class="line">1553</span><br><span class="line">1554</span><br><span class="line">1555</span><br><span class="line">1556</span><br><span class="line">1557</span><br><span class="line">1558</span><br><span class="line">1559</span><br><span class="line">1560</span><br><span class="line">1561</span><br><span class="line">1562</span><br><span class="line">1563</span><br><span class="line">1564</span><br><span class="line">1565</span><br><span class="line">1566</span><br><span class="line">1567</span><br><span class="line">1568</span><br><span class="line">1569</span><br><span class="line">1570</span><br><span class="line">1571</span><br><span class="line">1572</span><br><span class="line">1573</span><br><span class="line">1574</span><br><span class="line">1575</span><br><span class="line">1576</span><br><span class="line">1577</span><br><span class="line">1578</span><br><span class="line">1579</span><br><span class="line">1580</span><br><span class="line">1581</span><br><span class="line">1582</span><br><span class="line">1583</span><br><span class="line">1584</span><br><span class="line">1585</span><br><span class="line">1586</span><br><span class="line">1587</span><br><span class="line">1588</span><br><span class="line">1589</span><br><span class="line">1590</span><br><span class="line">1591</span><br><span class="line">1592</span><br><span class="line">1593</span><br><span class="line">1594</span><br><span class="line">1595</span><br><span class="line">1596</span><br><span class="line">1597</span><br><span class="line">1598</span><br><span class="line">1599</span><br><span class="line">1600</span><br><span class="line">1601</span><br><span class="line">1602</span><br><span class="line">1603</span><br><span class="line">1604</span><br><span class="line">1605</span><br><span class="line">1606</span><br><span class="line">1607</span><br><span class="line">1608</span><br><span class="line">1609</span><br><span class="line">1610</span><br><span class="line">1611</span><br><span class="line">1612</span><br><span class="line">1613</span><br><span class="line">1614</span><br><span class="line">1615</span><br><span class="line">1616</span><br><span class="line">1617</span><br><span class="line">1618</span><br><span class="line">1619</span><br><span class="line">1620</span><br><span class="line">1621</span><br><span class="line">1622</span><br><span class="line">1623</span><br><span class="line">1624</span><br><span class="line">1625</span><br><span class="line">1626</span><br><span class="line">1627</span><br><span class="line">1628</span><br><span class="line">1629</span><br><span class="line">1630</span><br><span class="line">1631</span><br><span class="line">1632</span><br><span class="line">1633</span><br><span class="line">1634</span><br><span class="line">1635</span><br><span class="line">1636</span><br><span class="line">1637</span><br><span class="line">1638</span><br><span class="line">1639</span><br><span class="line">1640</span><br><span class="line">1641</span><br><span class="line">1642</span><br><span class="line">1643</span><br><span class="line">1644</span><br><span class="line">1645</span><br><span class="line">1646</span><br><span class="line">1647</span><br><span class="line">1648</span><br><span class="line">1649</span><br><span class="line">1650</span><br><span class="line">1651</span><br><span class="line">1652</span><br><span class="line">1653</span><br><span class="line">1654</span><br><span class="line">1655</span><br><span class="line">1656</span><br><span class="line">1657</span><br><span class="line">1658</span><br><span class="line">1659</span><br><span class="line">1660</span><br><span class="line">1661</span><br><span class="line">1662</span><br><span class="line">1663</span><br><span class="line">1664</span><br><span class="line">1665</span><br><span class="line">1666</span><br><span class="line">1667</span><br><span class="line">1668</span><br><span class="line">1669</span><br><span class="line">1670</span><br><span class="line">1671</span><br><span class="line">1672</span><br><span class="line">1673</span><br><span class="line">1674</span><br><span class="line">1675</span><br><span class="line">1676</span><br><span class="line">1677</span><br><span class="line">1678</span><br><span class="line">1679</span><br><span class="line">1680</span><br><span class="line">1681</span><br><span class="line">1682</span><br><span class="line">1683</span><br><span class="line">1684</span><br><span class="line">1685</span><br><span class="line">1686</span><br><span class="line">1687</span><br><span class="line">1688</span><br><span class="line">1689</span><br><span class="line">1690</span><br><span class="line">1691</span><br><span class="line">1692</span><br><span class="line">1693</span><br><span class="line">1694</span><br><span class="line">1695</span><br><span class="line">1696</span><br><span class="line">1697</span><br><span class="line">1698</span><br><span class="line">1699</span><br><span class="line">1700</span><br><span class="line">1701</span><br><span class="line">1702</span><br><span class="line">1703</span><br><span class="line">1704</span><br><span class="line">1705</span><br><span class="line">1706</span><br><span class="line">1707</span><br><span class="line">1708</span><br><span class="line">1709</span><br><span class="line">1710</span><br><span class="line">1711</span><br><span class="line">1712</span><br><span class="line">1713</span><br><span class="line">1714</span><br><span class="line">1715</span><br><span class="line">1716</span><br><span class="line">1717</span><br><span class="line">1718</span><br><span class="line">1719</span><br><span class="line">1720</span><br><span class="line">1721</span><br><span class="line">1722</span><br><span class="line">1723</span><br><span class="line">1724</span><br><span class="line">1725</span><br><span class="line">1726</span><br><span class="line">1727</span><br><span class="line">1728</span><br><span class="line">1729</span><br><span class="line">1730</span><br><span class="line">1731</span><br><span class="line">1732</span><br><span class="line">1733</span><br><span class="line">1734</span><br><span class="line">1735</span><br><span class="line">1736</span><br><span class="line">1737</span><br><span class="line">1738</span><br><span class="line">1739</span><br><span class="line">1740</span><br><span class="line">1741</span><br><span class="line">1742</span><br><span class="line">1743</span><br><span class="line">1744</span><br><span class="line">1745</span><br><span class="line">1746</span><br><span class="line">1747</span><br><span class="line">1748</span><br><span class="line">1749</span><br><span class="line">1750</span><br><span class="line">1751</span><br><span class="line">1752</span><br><span class="line">1753</span><br><span class="line">1754</span><br><span class="line">1755</span><br><span class="line">1756</span><br><span class="line">1757</span><br><span class="line">1758</span><br><span class="line">1759</span><br><span class="line">1760</span><br><span class="line">1761</span><br><span class="line">1762</span><br><span class="line">1763</span><br><span class="line">1764</span><br><span class="line">1765</span><br><span class="line">1766</span><br><span class="line">1767</span><br><span class="line">1768</span><br><span class="line">1769</span><br><span class="line">1770</span><br><span class="line">1771</span><br><span class="line">1772</span><br><span class="line">1773</span><br><span class="line">1774</span><br><span class="line">1775</span><br><span class="line">1776</span><br><span class="line">1777</span><br><span class="line">1778</span><br><span class="line">1779</span><br><span class="line">1780</span><br><span class="line">1781</span><br><span class="line">1782</span><br><span class="line">1783</span><br><span class="line">1784</span><br><span class="line">1785</span><br><span class="line">1786</span><br><span class="line">1787</span><br><span class="line">1788</span><br><span class="line">1789</span><br><span class="line">1790</span><br><span class="line">1791</span><br><span class="line">1792</span><br><span class="line">1793</span><br><span class="line">1794</span><br><span class="line">1795</span><br><span class="line">1796</span><br><span class="line">1797</span><br><span class="line">1798</span><br><span class="line">1799</span><br><span class="line">1800</span><br><span class="line">1801</span><br><span class="line">1802</span><br><span class="line">1803</span><br><span class="line">1804</span><br><span class="line">1805</span><br><span class="line">1806</span><br><span class="line">1807</span><br><span class="line">1808</span><br><span class="line">1809</span><br><span class="line">1810</span><br><span class="line">1811</span><br><span class="line">1812</span><br><span class="line">1813</span><br><span class="line">1814</span><br><span class="line">1815</span><br><span class="line">1816</span><br><span class="line">1817</span><br><span class="line">1818</span><br><span class="line">1819</span><br><span class="line">1820</span><br><span class="line">1821</span><br><span class="line">1822</span><br><span class="line">1823</span><br><span class="line">1824</span><br><span class="line">1825</span><br><span class="line">1826</span><br><span class="line">1827</span><br><span class="line">1828</span><br><span class="line">1829</span><br><span class="line">1830</span><br><span class="line">1831</span><br><span class="line">1832</span><br><span class="line">1833</span><br><span class="line">1834</span><br><span class="line">1835</span><br><span class="line">1836</span><br><span class="line">1837</span><br><span class="line">1838</span><br><span class="line">1839</span><br><span class="line">1840</span><br><span class="line">1841</span><br><span class="line">1842</span><br><span class="line">1843</span><br><span class="line">1844</span><br><span class="line">1845</span><br><span class="line">1846</span><br><span class="line">1847</span><br><span class="line">1848</span><br><span class="line">1849</span><br><span class="line">1850</span><br><span class="line">1851</span><br><span class="line">1852</span><br><span class="line">1853</span><br><span class="line">1854</span><br><span class="line">1855</span><br><span class="line">1856</span><br><span class="line">1857</span><br><span class="line">1858</span><br><span class="line">1859</span><br><span class="line">1860</span><br><span class="line">1861</span><br><span class="line">1862</span><br><span class="line">1863</span><br><span class="line">1864</span><br><span class="line">1865</span><br><span class="line">1866</span><br><span class="line">1867</span><br><span class="line">1868</span><br><span class="line">1869</span><br><span class="line">1870</span><br><span class="line">1871</span><br><span class="line">1872</span><br><span class="line">1873</span><br><span class="line">1874</span><br><span class="line">1875</span><br><span class="line">1876</span><br><span class="line">1877</span><br><span class="line">1878</span><br><span class="line">1879</span><br><span class="line">1880</span><br><span class="line">1881</span><br><span class="line">1882</span><br><span class="line">1883</span><br><span class="line">1884</span><br><span class="line">1885</span><br><span class="line">1886</span><br><span class="line">1887</span><br><span class="line">1888</span><br><span class="line">1889</span><br><span class="line">1890</span><br><span class="line">1891</span><br><span class="line">1892</span><br><span class="line">1893</span><br><span class="line">1894</span><br><span class="line">1895</span><br><span class="line">1896</span><br><span class="line">1897</span><br><span class="line">1898</span><br><span class="line">1899</span><br><span class="line">1900</span><br><span class="line">1901</span><br><span class="line">1902</span><br><span class="line">1903</span><br><span class="line">1904</span><br><span class="line">1905</span><br><span class="line">1906</span><br><span class="line">1907</span><br><span class="line">1908</span><br><span class="line">1909</span><br><span class="line">1910</span><br><span class="line">1911</span><br><span class="line">1912</span><br><span class="line">1913</span><br><span class="line">1914</span><br><span class="line">1915</span><br><span class="line">1916</span><br><span class="line">1917</span><br><span class="line">1918</span><br><span class="line">1919</span><br><span class="line">1920</span><br><span class="line">1921</span><br><span class="line">1922</span><br><span class="line">1923</span><br><span class="line">1924</span><br><span class="line">1925</span><br><span class="line">1926</span><br><span class="line">1927</span><br><span class="line">1928</span><br><span class="line">1929</span><br><span class="line">1930</span><br><span class="line">1931</span><br><span class="line">1932</span><br><span class="line">1933</span><br><span class="line">1934</span><br><span class="line">1935</span><br><span class="line">1936</span><br><span class="line">1937</span><br><span class="line">1938</span><br><span class="line">1939</span><br><span class="line">1940</span><br><span class="line">1941</span><br><span class="line">1942</span><br><span class="line">1943</span><br><span class="line">1944</span><br><span class="line">1945</span><br><span class="line">1946</span><br><span class="line">1947</span><br><span class="line">1948</span><br><span class="line">1949</span><br><span class="line">1950</span><br><span class="line">1951</span><br><span class="line">1952</span><br><span class="line">1953</span><br><span class="line">1954</span><br><span class="line">1955</span><br><span class="line">1956</span><br><span class="line">1957</span><br><span class="line">1958</span><br><span class="line">1959</span><br><span class="line">1960</span><br><span class="line">1961</span><br><span class="line">1962</span><br><span class="line">1963</span><br><span class="line">1964</span><br><span class="line">1965</span><br><span class="line">1966</span><br><span class="line">1967</span><br><span class="line">1968</span><br><span class="line">1969</span><br><span class="line">1970</span><br><span class="line">1971</span><br><span class="line">1972</span><br><span class="line">1973</span><br><span class="line">1974</span><br><span class="line">1975</span><br><span class="line">1976</span><br><span class="line">1977</span><br><span class="line">1978</span><br><span class="line">1979</span><br><span class="line">1980</span><br><span class="line">1981</span><br><span class="line">1982</span><br><span class="line">1983</span><br><span class="line">1984</span><br><span class="line">1985</span><br><span class="line">1986</span><br><span class="line">1987</span><br><span class="line">1988</span><br><span class="line">1989</span><br><span class="line">1990</span><br><span class="line">1991</span><br><span class="line">1992</span><br><span class="line">1993</span><br><span class="line">1994</span><br><span class="line">1995</span><br><span class="line">1996</span><br><span class="line">1997</span><br><span class="line">1998</span><br><span class="line">1999</span><br><span class="line">2000</span><br><span class="line">2001</span><br><span class="line">2002</span><br><span class="line">2003</span><br><span class="line">2004</span><br><span class="line">2005</span><br><span class="line">2006</span><br><span class="line">2007</span><br><span class="line">2008</span><br><span class="line">2009</span><br><span class="line">2010</span><br><span class="line">2011</span><br><span class="line">2012</span><br><span class="line">2013</span><br><span class="line">2014</span><br><span class="line">2015</span><br><span class="line">2016</span><br><span class="line">2017</span><br><span class="line">2018</span><br><span class="line">2019</span><br><span class="line">2020</span><br><span class="line">2021</span><br><span class="line">2022</span><br><span class="line">2023</span><br><span class="line">2024</span><br><span class="line">2025</span><br><span class="line">2026</span><br><span class="line">2027</span><br><span class="line">2028</span><br><span class="line">2029</span><br><span class="line">2030</span><br><span class="line">2031</span><br><span class="line">2032</span><br><span class="line">2033</span><br><span class="line">2034</span><br><span class="line">2035</span><br><span class="line">2036</span><br><span class="line">2037</span><br><span class="line">2038</span><br><span class="line">2039</span><br><span class="line">2040</span><br><span class="line">2041</span><br><span class="line">2042</span><br><span class="line">2043</span><br><span class="line">2044</span><br><span class="line">2045</span><br><span class="line">2046</span><br><span class="line">2047</span><br><span class="line">2048</span><br><span class="line">2049</span><br><span class="line">2050</span><br><span class="line">2051</span><br><span class="line">2052</span><br><span class="line">2053</span><br><span class="line">2054</span><br><span class="line">2055</span><br><span class="line">2056</span><br><span class="line">2057</span><br><span class="line">2058</span><br><span class="line">2059</span><br><span class="line">2060</span><br><span class="line">2061</span><br><span class="line">2062</span><br><span class="line">2063</span><br><span class="line">2064</span><br><span class="line">2065</span><br><span class="line">2066</span><br><span class="line">2067</span><br><span class="line">2068</span><br><span class="line">2069</span><br><span class="line">2070</span><br><span class="line">2071</span><br><span class="line">2072</span><br><span class="line">2073</span><br><span class="line">2074</span><br><span class="line">2075</span><br><span class="line">2076</span><br><span class="line">2077</span><br><span class="line">2078</span><br><span class="line">2079</span><br><span class="line">2080</span><br><span class="line">2081</span><br><span class="line">2082</span><br><span class="line">2083</span><br><span class="line">2084</span><br><span class="line">2085</span><br><span class="line">2086</span><br><span class="line">2087</span><br><span class="line">2088</span><br><span class="line">2089</span><br><span class="line">2090</span><br><span class="line">2091</span><br><span class="line">2092</span><br><span class="line">2093</span><br><span class="line">2094</span><br><span class="line">2095</span><br><span class="line">2096</span><br><span class="line">2097</span><br><span class="line">2098</span><br><span class="line">2099</span><br><span class="line">2100</span><br><span class="line">2101</span><br><span class="line">2102</span><br><span class="line">2103</span><br><span class="line">2104</span><br><span class="line">2105</span><br><span class="line">2106</span><br><span class="line">2107</span><br><span class="line">2108</span><br><span class="line">2109</span><br><span class="line">2110</span><br><span class="line">2111</span><br><span class="line">2112</span><br><span class="line">2113</span><br><span class="line">2114</span><br><span class="line">2115</span><br><span class="line">2116</span><br><span class="line">2117</span><br><span class="line">2118</span><br><span class="line">2119</span><br><span class="line">2120</span><br><span class="line">2121</span><br><span class="line">2122</span><br><span class="line">2123</span><br><span class="line">2124</span><br><span class="line">2125</span><br><span class="line">2126</span><br><span class="line">2127</span><br><span class="line">2128</span><br><span class="line">2129</span><br><span class="line">2130</span><br><span class="line">2131</span><br><span class="line">2132</span><br><span class="line">2133</span><br><span class="line">2134</span><br><span class="line">2135</span><br><span class="line">2136</span><br><span class="line">2137</span><br><span class="line">2138</span><br><span class="line">2139</span><br><span class="line">2140</span><br><span class="line">2141</span><br><span class="line">2142</span><br><span class="line">2143</span><br><span class="line">2144</span><br><span class="line">2145</span><br><span class="line">2146</span><br><span class="line">2147</span><br><span class="line">2148</span><br><span class="line">2149</span><br><span class="line">2150</span><br><span class="line">2151</span><br><span class="line">2152</span><br><span class="line">2153</span><br><span class="line">2154</span><br><span class="line">2155</span><br><span class="line">2156</span><br><span class="line">2157</span><br><span class="line">2158</span><br><span class="line">2159</span><br><span class="line">2160</span><br><span class="line">2161</span><br><span class="line">2162</span><br><span class="line">2163</span><br><span class="line">2164</span><br><span class="line">2165</span><br><span class="line">2166</span><br><span class="line">2167</span><br><span class="line">2168</span><br><span class="line">2169</span><br><span class="line">2170</span><br><span class="line">2171</span><br><span class="line">2172</span><br><span class="line">2173</span><br><span class="line">2174</span><br><span class="line">2175</span><br><span class="line">2176</span><br><span class="line">2177</span><br><span class="line">2178</span><br><span class="line">2179</span><br><span class="line">2180</span><br><span class="line">2181</span><br><span class="line">2182</span><br><span class="line">2183</span><br><span class="line">2184</span><br><span class="line">2185</span><br><span class="line">2186</span><br><span class="line">2187</span><br><span class="line">2188</span><br><span class="line">2189</span><br><span class="line">2190</span><br><span class="line">2191</span><br><span class="line">2192</span><br><span class="line">2193</span><br><span class="line">2194</span><br><span class="line">2195</span><br><span class="line">2196</span><br><span class="line">2197</span><br><span class="line">2198</span><br><span class="line">2199</span><br><span class="line">2200</span><br><span class="line">2201</span><br><span class="line">2202</span><br><span class="line">2203</span><br><span class="line">2204</span><br><span class="line">2205</span><br><span class="line">2206</span><br><span class="line">2207</span><br><span class="line">2208</span><br><span class="line">2209</span><br><span class="line">2210</span><br><span class="line">2211</span><br><span class="line">2212</span><br><span class="line">2213</span><br><span class="line">2214</span><br><span class="line">2215</span><br><span class="line">2216</span><br><span class="line">2217</span><br><span class="line">2218</span><br><span class="line">2219</span><br><span class="line">2220</span><br><span class="line">2221</span><br><span class="line">2222</span><br><span class="line">2223</span><br><span class="line">2224</span><br><span class="line">2225</span><br><span class="line">2226</span><br><span class="line">2227</span><br><span class="line">2228</span><br><span class="line">2229</span><br><span class="line">2230</span><br><span class="line">2231</span><br><span class="line">2232</span><br><span class="line">2233</span><br><span class="line">2234</span><br><span class="line">2235</span><br><span class="line">2236</span><br><span class="line">2237</span><br><span class="line">2238</span><br><span class="line">2239</span><br><span class="line">2240</span><br><span class="line">2241</span><br><span class="line">2242</span><br><span class="line">2243</span><br><span class="line">2244</span><br><span class="line">2245</span><br><span class="line">2246</span><br><span class="line">2247</span><br><span class="line">2248</span><br><span class="line">2249</span><br><span class="line">2250</span><br><span class="line">2251</span><br><span class="line">2252</span><br><span class="line">2253</span><br><span class="line">2254</span><br><span class="line">2255</span><br><span class="line">2256</span><br><span class="line">2257</span><br><span class="line">2258</span><br><span class="line">2259</span><br><span class="line">2260</span><br><span class="line">2261</span><br><span class="line">2262</span><br><span class="line">2263</span><br><span class="line">2264</span><br><span class="line">2265</span><br><span class="line">2266</span><br><span class="line">2267</span><br><span class="line">2268</span><br><span class="line">2269</span><br><span class="line">2270</span><br><span class="line">2271</span><br><span class="line">2272</span><br><span class="line">2273</span><br><span class="line">2274</span><br><span class="line">2275</span><br><span class="line">2276</span><br><span class="line">2277</span><br><span class="line">2278</span><br><span class="line">2279</span><br><span class="line">2280</span><br><span class="line">2281</span><br><span class="line">2282</span><br><span class="line">2283</span><br><span class="line">2284</span><br><span class="line">2285</span><br><span class="line">2286</span><br><span class="line">2287</span><br><span class="line">2288</span><br><span class="line">2289</span><br><span class="line">2290</span><br><span class="line">2291</span><br><span class="line">2292</span><br><span class="line">2293</span><br><span class="line">2294</span><br><span class="line">2295</span><br><span class="line">2296</span><br><span class="line">2297</span><br><span class="line">2298</span><br><span class="line">2299</span><br><span class="line">2300</span><br><span class="line">2301</span><br><span class="line">2302</span><br><span class="line">2303</span><br><span class="line">2304</span><br><span class="line">2305</span><br><span class="line">2306</span><br><span class="line">2307</span><br><span class="line">2308</span><br><span class="line">2309</span><br><span class="line">2310</span><br><span class="line">2311</span><br><span class="line">2312</span><br><span class="line">2313</span><br><span class="line">2314</span><br><span class="line">2315</span><br><span class="line">2316</span><br><span class="line">2317</span><br><span class="line">2318</span><br><span class="line">2319</span><br><span class="line">2320</span><br><span class="line">2321</span><br><span class="line">2322</span><br><span class="line">2323</span><br><span class="line">2324</span><br><span class="line">2325</span><br><span class="line">2326</span><br><span class="line">2327</span><br><span class="line">2328</span><br><span class="line">2329</span><br><span class="line">2330</span><br><span class="line">2331</span><br><span class="line">2332</span><br><span class="line">2333</span><br><span class="line">2334</span><br><span class="line">2335</span><br><span class="line">2336</span><br><span class="line">2337</span><br><span class="line">2338</span><br><span class="line">2339</span><br><span class="line">2340</span><br><span class="line">2341</span><br><span class="line">2342</span><br><span class="line">2343</span><br><span class="line">2344</span><br><span class="line">2345</span><br><span class="line">2346</span><br><span class="line">2347</span><br><span class="line">2348</span><br><span class="line">2349</span><br><span class="line">2350</span><br><span class="line">2351</span><br><span class="line">2352</span><br><span class="line">2353</span><br><span class="line">2354</span><br><span class="line">2355</span><br><span class="line">2356</span><br><span class="line">2357</span><br><span class="line">2358</span><br><span class="line">2359</span><br><span class="line">2360</span><br><span class="line">2361</span><br><span class="line">2362</span><br><span class="line">2363</span><br><span class="line">2364</span><br><span class="line">2365</span><br><span class="line">2366</span><br><span class="line">2367</span><br><span class="line">2368</span><br><span class="line">2369</span><br><span class="line">2370</span><br><span class="line">2371</span><br><span class="line">2372</span><br><span class="line">2373</span><br><span class="line">2374</span><br><span class="line">2375</span><br><span class="line">2376</span><br><span class="line">2377</span><br><span class="line">2378</span><br><span class="line">2379</span><br><span class="line">2380</span><br><span class="line">2381</span><br><span class="line">2382</span><br><span class="line">2383</span><br><span class="line">2384</span><br><span class="line">2385</span><br><span class="line">2386</span><br><span class="line">2387</span><br><span class="line">2388</span><br><span class="line">2389</span><br><span class="line">2390</span><br><span class="line">2391</span><br><span class="line">2392</span><br><span class="line">2393</span><br><span class="line">2394</span><br><span class="line">2395</span><br><span class="line">2396</span><br><span class="line">2397</span><br><span class="line">2398</span><br><span class="line">2399</span><br><span class="line">2400</span><br><span class="line">2401</span><br><span class="line">2402</span><br><span class="line">2403</span><br><span class="line">2404</span><br><span class="line">2405</span><br><span class="line">2406</span><br><span class="line">2407</span><br><span class="line">2408</span><br><span class="line">2409</span><br><span class="line">2410</span><br><span class="line">2411</span><br><span class="line">2412</span><br><span class="line">2413</span><br><span class="line">2414</span><br><span class="line">2415</span><br><span class="line">2416</span><br><span class="line">2417</span><br><span class="line">2418</span><br><span class="line">2419</span><br><span class="line">2420</span><br><span class="line">2421</span><br><span class="line">2422</span><br><span class="line">2423</span><br><span class="line">2424</span><br><span class="line">2425</span><br><span class="line">2426</span><br><span class="line">2427</span><br><span class="line">2428</span><br><span class="line">2429</span><br><span class="line">2430</span><br><span class="line">2431</span><br><span class="line">2432</span><br><span class="line">2433</span><br><span class="line">2434</span><br><span class="line">2435</span><br><span class="line">2436</span><br><span class="line">2437</span><br><span class="line">2438</span><br><span class="line">2439</span><br><span class="line">2440</span><br><span class="line">2441</span><br><span class="line">2442</span><br><span class="line">2443</span><br><span class="line">2444</span><br><span class="line">2445</span><br><span class="line">2446</span><br><span class="line">2447</span><br><span class="line">2448</span><br><span class="line">2449</span><br><span class="line">2450</span><br><span class="line">2451</span><br><span class="line">2452</span><br><span class="line">2453</span><br><span class="line">2454</span><br><span class="line">2455</span><br><span class="line">2456</span><br><span class="line">2457</span><br><span class="line">2458</span><br><span class="line">2459</span><br><span class="line">2460</span><br><span class="line">2461</span><br><span class="line">2462</span><br><span class="line">2463</span><br><span class="line">2464</span><br><span class="line">2465</span><br><span class="line">2466</span><br><span class="line">2467</span><br><span class="line">2468</span><br><span class="line">2469</span><br><span class="line">2470</span><br><span class="line">2471</span><br><span class="line">2472</span><br><span class="line">2473</span><br><span class="line">2474</span><br><span class="line">2475</span><br><span class="line">2476</span><br><span class="line">2477</span><br><span class="line">2478</span><br><span class="line">2479</span><br><span class="line">2480</span><br><span class="line">2481</span><br><span class="line">2482</span><br><span class="line">2483</span><br><span class="line">2484</span><br><span class="line">2485</span><br><span class="line">2486</span><br><span class="line">2487</span><br><span class="line">2488</span><br><span class="line">2489</span><br><span class="line">2490</span><br><span class="line">2491</span><br><span class="line">2492</span><br><span class="line">2493</span><br><span class="line">2494</span><br><span class="line">2495</span><br><span class="line">2496</span><br><span class="line">2497</span><br><span class="line">2498</span><br><span class="line">2499</span><br><span class="line">2500</span><br><span class="line">2501</span><br><span class="line">2502</span><br><span class="line">2503</span><br><span class="line">2504</span><br><span class="line">2505</span><br><span class="line">2506</span><br><span class="line">2507</span><br><span class="line">2508</span><br><span class="line">2509</span><br><span class="line">2510</span><br><span class="line">2511</span><br><span class="line">2512</span><br><span class="line">2513</span><br><span class="line">2514</span><br><span class="line">2515</span><br><span class="line">2516</span><br><span class="line">2517</span><br><span class="line">2518</span><br><span class="line">2519</span><br><span class="line">2520</span><br><span class="line">2521</span><br><span class="line">2522</span><br><span class="line">2523</span><br><span class="line">2524</span><br><span class="line">2525</span><br><span class="line">2526</span><br><span class="line">2527</span><br><span class="line">2528</span><br><span class="line">2529</span><br><span class="line">2530</span><br><span class="line">2531</span><br><span class="line">2532</span><br><span class="line">2533</span><br><span class="line">2534</span><br><span class="line">2535</span><br><span class="line">2536</span><br><span class="line">2537</span><br><span class="line">2538</span><br><span class="line">2539</span><br><span class="line">2540</span><br><span class="line">2541</span><br><span class="line">2542</span><br><span class="line">2543</span><br><span class="line">2544</span><br><span class="line">2545</span><br><span class="line">2546</span><br><span class="line">2547</span><br><span class="line">2548</span><br><span class="line">2549</span><br><span class="line">2550</span><br><span class="line">2551</span><br><span class="line">2552</span><br><span class="line">2553</span><br><span class="line">2554</span><br><span class="line">2555</span><br><span class="line">2556</span><br><span class="line">2557</span><br><span class="line">2558</span><br><span class="line">2559</span><br><span class="line">2560</span><br><span class="line">2561</span><br><span class="line">2562</span><br><span class="line">2563</span><br><span class="line">2564</span><br><span class="line">2565</span><br><span class="line">2566</span><br><span class="line">2567</span><br><span class="line">2568</span><br><span class="line">2569</span><br><span class="line">2570</span><br><span class="line">2571</span><br><span class="line">2572</span><br><span class="line">2573</span><br><span class="line">2574</span><br><span class="line">2575</span><br><span class="line">2576</span><br><span class="line">2577</span><br><span class="line">2578</span><br><span class="line">2579</span><br><span class="line">2580</span><br><span class="line">2581</span><br><span class="line">2582</span><br><span class="line">2583</span><br><span class="line">2584</span><br><span class="line">2585</span><br><span class="line">2586</span><br><span class="line">2587</span><br><span class="line">2588</span><br><span class="line">2589</span><br><span class="line">2590</span><br><span class="line">2591</span><br><span class="line">2592</span><br><span class="line">2593</span><br><span class="line">2594</span><br><span class="line">2595</span><br><span class="line">2596</span><br><span class="line">2597</span><br><span class="line">2598</span><br><span class="line">2599</span><br><span class="line">2600</span><br><span class="line">2601</span><br><span class="line">2602</span><br><span class="line">2603</span><br><span class="line">2604</span><br><span class="line">2605</span><br><span class="line">2606</span><br><span class="line">2607</span><br><span class="line">2608</span><br><span class="line">2609</span><br><span class="line">2610</span><br><span class="line">2611</span><br><span class="line">2612</span><br><span class="line">2613</span><br><span class="line">2614</span><br><span class="line">2615</span><br><span class="line">2616</span><br><span class="line">2617</span><br><span class="line">2618</span><br><span class="line">2619</span><br><span class="line">2620</span><br><span class="line">2621</span><br><span class="line">2622</span><br><span class="line">2623</span><br><span class="line">2624</span><br><span class="line">2625</span><br><span class="line">2626</span><br><span class="line">2627</span><br><span class="line">2628</span><br><span class="line">2629</span><br><span class="line">2630</span><br><span class="line">2631</span><br><span class="line">2632</span><br><span class="line">2633</span><br><span class="line">2634</span><br><span class="line">2635</span><br><span class="line">2636</span><br><span class="line">2637</span><br><span class="line">2638</span><br><span class="line">2639</span><br><span class="line">2640</span><br><span class="line">2641</span><br><span class="line">2642</span><br><span class="line">2643</span><br><span class="line">2644</span><br><span class="line">2645</span><br><span class="line">2646</span><br><span class="line">2647</span><br><span class="line">2648</span><br><span class="line">2649</span><br><span class="line">2650</span><br><span class="line">2651</span><br><span class="line">2652</span><br><span class="line">2653</span><br><span class="line">2654</span><br><span class="line">2655</span><br><span class="line">2656</span><br><span class="line">2657</span><br><span class="line">2658</span><br><span class="line">2659</span><br><span class="line">2660</span><br><span class="line">2661</span><br><span class="line">2662</span><br><span class="line">2663</span><br><span class="line">2664</span><br><span class="line">2665</span><br><span class="line">2666</span><br><span class="line">2667</span><br><span class="line">2668</span><br><span class="line">2669</span><br><span class="line">2670</span><br><span class="line">2671</span><br><span class="line">2672</span><br><span class="line">2673</span><br><span class="line">2674</span><br><span class="line">2675</span><br><span class="line">2676</span><br><span class="line">2677</span><br><span class="line">2678</span><br><span class="line">2679</span><br><span class="line">2680</span><br><span class="line">2681</span><br><span class="line">2682</span><br><span class="line">2683</span><br><span class="line">2684</span><br><span class="line">2685</span><br><span class="line">2686</span><br><span class="line">2687</span><br><span class="line">2688</span><br><span class="line">2689</span><br><span class="line">2690</span><br><span class="line">2691</span><br><span class="line">2692</span><br><span class="line">2693</span><br><span class="line">2694</span><br><span class="line">2695</span><br><span class="line">2696</span><br><span class="line">2697</span><br><span class="line">2698</span><br><span class="line">2699</span><br><span class="line">2700</span><br><span class="line">2701</span><br><span class="line">2702</span><br><span class="line">2703</span><br><span class="line">2704</span><br><span class="line">2705</span><br><span class="line">2706</span><br><span class="line">2707</span><br><span class="line">2708</span><br><span class="line">2709</span><br><span class="line">2710</span><br><span class="line">2711</span><br><span class="line">2712</span><br><span class="line">2713</span><br><span class="line">2714</span><br><span class="line">2715</span><br><span class="line">2716</span><br><span class="line">2717</span><br><span class="line">2718</span><br><span class="line">2719</span><br><span class="line">2720</span><br><span class="line">2721</span><br><span class="line">2722</span><br><span class="line">2723</span><br><span class="line">2724</span><br><span class="line">2725</span><br><span class="line">2726</span><br><span class="line">2727</span><br><span class="line">2728</span><br><span class="line">2729</span><br><span class="line">2730</span><br><span class="line">2731</span><br><span class="line">2732</span><br><span class="line">2733</span><br><span class="line">2734</span><br><span class="line">2735</span><br><span class="line">2736</span><br><span class="line">2737</span><br><span class="line">2738</span><br><span class="line">2739</span><br><span class="line">2740</span><br><span class="line">2741</span><br><span class="line">2742</span><br><span class="line">2743</span><br><span class="line">2744</span><br><span class="line">2745</span><br><span class="line">2746</span><br><span class="line">2747</span><br><span class="line">2748</span><br><span class="line">2749</span><br><span class="line">2750</span><br><span class="line">2751</span><br><span class="line">2752</span><br><span class="line">2753</span><br><span class="line">2754</span><br><span class="line">2755</span><br><span class="line">2756</span><br><span class="line">2757</span><br><span class="line">2758</span><br><span class="line">2759</span><br><span class="line">2760</span><br><span class="line">2761</span><br><span class="line">2762</span><br><span class="line">2763</span><br><span class="line">2764</span><br><span class="line">2765</span><br><span class="line">2766</span><br><span class="line">2767</span><br><span class="line">2768</span><br><span class="line">2769</span><br><span class="line">2770</span><br><span class="line">2771</span><br><span class="line">2772</span><br><span class="line">2773</span><br><span class="line">2774</span><br><span class="line">2775</span><br><span class="line">2776</span><br><span class="line">2777</span><br><span class="line">2778</span><br><span class="line">2779</span><br><span class="line">2780</span><br><span class="line">2781</span><br><span class="line">2782</span><br><span class="line">2783</span><br><span class="line">2784</span><br><span class="line">2785</span><br><span class="line">2786</span><br><span class="line">2787</span><br><span class="line">2788</span><br><span class="line">2789</span><br><span class="line">2790</span><br><span class="line">2791</span><br><span class="line">2792</span><br><span class="line">2793</span><br><span class="line">2794</span><br><span class="line">2795</span><br><span class="line">2796</span><br><span class="line">2797</span><br><span class="line">2798</span><br><span class="line">2799</span><br><span class="line">2800</span><br><span class="line">2801</span><br><span class="line">2802</span><br><span class="line">2803</span><br><span class="line">2804</span><br><span class="line">2805</span><br><span class="line">2806</span><br><span class="line">2807</span><br><span class="line">2808</span><br><span class="line">2809</span><br><span class="line">2810</span><br><span class="line">2811</span><br><span class="line">2812</span><br><span class="line">2813</span><br><span class="line">2814</span><br><span class="line">2815</span><br><span class="line">2816</span><br><span class="line">2817</span><br><span class="line">2818</span><br><span class="line">2819</span><br><span class="line">2820</span><br><span class="line">2821</span><br><span class="line">2822</span><br><span class="line">2823</span><br><span class="line">2824</span><br><span class="line">2825</span><br><span class="line">2826</span><br><span class="line">2827</span><br><span class="line">2828</span><br><span class="line">2829</span><br><span class="line">2830</span><br><span class="line">2831</span><br><span class="line">2832</span><br><span class="line">2833</span><br><span class="line">2834</span><br><span class="line">2835</span><br><span class="line">2836</span><br><span class="line">2837</span><br><span class="line">2838</span><br><span class="line">2839</span><br><span class="line">2840</span><br><span class="line">2841</span><br><span class="line">2842</span><br><span class="line">2843</span><br><span class="line">2844</span><br><span class="line">2845</span><br><span class="line">2846</span><br><span class="line">2847</span><br><span class="line">2848</span><br><span class="line">2849</span><br><span class="line">2850</span><br><span class="line">2851</span><br><span class="line">2852</span><br><span class="line">2853</span><br><span class="line">2854</span><br><span class="line">2855</span><br><span class="line">2856</span><br><span class="line">2857</span><br><span class="line">2858</span><br><span class="line">2859</span><br><span class="line">2860</span><br><span class="line">2861</span><br><span class="line">2862</span><br><span class="line">2863</span><br><span class="line">2864</span><br><span class="line">2865</span><br><span class="line">2866</span><br><span class="line">2867</span><br><span class="line">2868</span><br><span class="line">2869</span><br><span class="line">2870</span><br><span class="line">2871</span><br><span class="line">2872</span><br><span class="line">2873</span><br><span class="line">2874</span><br><span class="line">2875</span><br><span class="line">2876</span><br><span class="line">2877</span><br><span class="line">2878</span><br><span class="line">2879</span><br><span class="line">2880</span><br><span class="line">2881</span><br><span class="line">2882</span><br><span class="line">2883</span><br><span class="line">2884</span><br><span class="line">2885</span><br><span class="line">2886</span><br><span class="line">2887</span><br><span class="line">2888</span><br><span class="line">2889</span><br><span class="line">2890</span><br><span class="line">2891</span><br><span class="line">2892</span><br><span class="line">2893</span><br><span class="line">2894</span><br><span class="line">2895</span><br><span class="line">2896</span><br><span class="line">2897</span><br><span class="line">2898</span><br><span class="line">2899</span><br><span class="line">2900</span><br><span class="line">2901</span><br><span class="line">2902</span><br><span class="line">2903</span><br><span class="line">2904</span><br><span class="line">2905</span><br><span class="line">2906</span><br><span class="line">2907</span><br><span class="line">2908</span><br><span class="line">2909</span><br><span class="line">2910</span><br><span class="line">2911</span><br><span class="line">2912</span><br><span class="line">2913</span><br><span class="line">2914</span><br><span class="line">2915</span><br><span class="line">2916</span><br><span class="line">2917</span><br><span class="line">2918</span><br><span class="line">2919</span><br><span class="line">2920</span><br><span class="line">2921</span><br><span class="line">2922</span><br><span class="line">2923</span><br><span class="line">2924</span><br><span class="line">2925</span><br><span class="line">2926</span><br><span class="line">2927</span><br><span class="line">2928</span><br><span class="line">2929</span><br><span class="line">2930</span><br><span class="line">2931</span><br><span class="line">2932</span><br><span class="line">2933</span><br><span class="line">2934</span><br><span class="line">2935</span><br><span class="line">2936</span><br><span class="line">2937</span><br><span class="line">2938</span><br><span class="line">2939</span><br><span class="line">2940</span><br><span class="line">2941</span><br><span class="line">2942</span><br><span class="line">2943</span><br><span class="line">2944</span><br><span class="line">2945</span><br><span class="line">2946</span><br><span class="line">2947</span><br><span class="line">2948</span><br><span class="line">2949</span><br><span class="line">2950</span><br><span class="line">2951</span><br><span class="line">2952</span><br><span class="line">2953</span><br><span class="line">2954</span><br><span class="line">2955</span><br><span class="line">2956</span><br><span class="line">2957</span><br><span class="line">2958</span><br><span class="line">2959</span><br><span class="line">2960</span><br><span class="line">2961</span><br><span class="line">2962</span><br><span class="line">2963</span><br><span class="line">2964</span><br><span class="line">2965</span><br><span class="line">2966</span><br><span class="line">2967</span><br><span class="line">2968</span><br><span class="line">2969</span><br><span class="line">2970</span><br><span class="line">2971</span><br><span class="line">2972</span><br><span class="line">2973</span><br><span class="line">2974</span><br><span class="line">2975</span><br><span class="line">2976</span><br><span class="line">2977</span><br><span class="line">2978</span><br><span class="line">2979</span><br><span class="line">2980</span><br><span class="line">2981</span><br><span class="line">2982</span><br><span class="line">2983</span><br><span class="line">2984</span><br><span class="line">2985</span><br><span class="line">2986</span><br><span class="line">2987</span><br><span class="line">2988</span><br><span class="line">2989</span><br><span class="line">2990</span><br><span class="line">2991</span><br><span class="line">2992</span><br><span class="line">2993</span><br><span class="line">2994</span><br><span class="line">2995</span><br><span class="line">2996</span><br><span class="line">2997</span><br><span class="line">2998</span><br><span class="line">2999</span><br><span class="line">3000</span><br><span class="line">3001</span><br><span class="line">3002</span><br><span class="line">3003</span><br><span class="line">3004</span><br><span class="line">3005</span><br><span class="line">3006</span><br><span class="line">3007</span><br><span class="line">3008</span><br><span class="line">3009</span><br><span class="line">3010</span><br><span class="line">3011</span><br><span class="line">3012</span><br><span class="line">3013</span><br><span class="line">3014</span><br><span class="line">3015</span><br><span class="line">3016</span><br><span class="line">3017</span><br><span class="line">3018</span><br><span class="line">3019</span><br><span class="line">3020</span><br><span class="line">3021</span><br><span class="line">3022</span><br><span class="line">3023</span><br><span class="line">3024</span><br><span class="line">3025</span><br><span class="line">3026</span><br><span class="line">3027</span><br><span class="line">3028</span><br><span class="line">3029</span><br><span class="line">3030</span><br><span class="line">3031</span><br><span class="line">3032</span><br><span class="line">3033</span><br><span class="line">3034</span><br><span class="line">3035</span><br><span class="line">3036</span><br><span class="line">3037</span><br><span class="line">3038</span><br><span class="line">3039</span><br><span class="line">3040</span><br><span class="line">3041</span><br><span class="line">3042</span><br><span class="line">3043</span><br><span class="line">3044</span><br><span class="line">3045</span><br><span class="line">3046</span><br><span class="line">3047</span><br><span class="line">3048</span><br><span class="line">3049</span><br><span class="line">3050</span><br><span class="line">3051</span><br><span class="line">3052</span><br><span class="line">3053</span><br><span class="line">3054</span><br><span class="line">3055</span><br><span class="line">3056</span><br><span class="line">3057</span><br><span class="line">3058</span><br><span class="line">3059</span><br><span class="line">3060</span><br><span class="line">3061</span><br><span class="line">3062</span><br><span class="line">3063</span><br><span class="line">3064</span><br><span class="line">3065</span><br><span class="line">3066</span><br><span class="line">3067</span><br><span class="line">3068</span><br><span class="line">3069</span><br><span class="line">3070</span><br><span class="line">3071</span><br><span class="line">3072</span><br><span class="line">3073</span><br><span class="line">3074</span><br><span class="line">3075</span><br><span class="line">3076</span><br><span class="line">3077</span><br><span class="line">3078</span><br><span class="line">3079</span><br><span class="line">3080</span><br><span class="line">3081</span><br><span class="line">3082</span><br><span class="line">3083</span><br><span class="line">3084</span><br><span class="line">3085</span><br><span class="line">3086</span><br><span class="line">3087</span><br><span class="line">3088</span><br><span class="line">3089</span><br><span class="line">3090</span><br><span class="line">3091</span><br><span class="line">3092</span><br><span class="line">3093</span><br><span class="line">3094</span><br><span class="line">3095</span><br><span class="line">3096</span><br><span class="line">3097</span><br><span class="line">3098</span><br><span class="line">3099</span><br><span class="line">3100</span><br><span class="line">3101</span><br><span class="line">3102</span><br><span class="line">3103</span><br><span class="line">3104</span><br><span class="line">3105</span><br><span class="line">3106</span><br><span class="line">3107</span><br><span class="line">3108</span><br><span class="line">3109</span><br><span class="line">3110</span><br><span class="line">3111</span><br><span class="line">3112</span><br><span class="line">3113</span><br><span class="line">3114</span><br><span class="line">3115</span><br><span class="line">3116</span><br><span class="line">3117</span><br><span class="line">3118</span><br><span class="line">3119</span><br><span class="line">3120</span><br><span class="line">3121</span><br><span class="line">3122</span><br><span class="line">3123</span><br><span class="line">3124</span><br><span class="line">3125</span><br><span class="line">3126</span><br><span class="line">3127</span><br><span class="line">3128</span><br><span class="line">3129</span><br><span class="line">3130</span><br><span class="line">3131</span><br><span class="line">3132</span><br><span class="line">3133</span><br><span class="line">3134</span><br><span class="line">3135</span><br><span class="line">3136</span><br><span class="line">3137</span><br><span class="line">3138</span><br><span class="line">3139</span><br><span class="line">3140</span><br><span class="line">3141</span><br><span class="line">3142</span><br><span class="line">3143</span><br><span class="line">3144</span><br><span class="line">3145</span><br><span class="line">3146</span><br><span class="line">3147</span><br><span class="line">3148</span><br><span class="line">3149</span><br><span class="line">3150</span><br><span class="line">3151</span><br><span class="line">3152</span><br><span class="line">3153</span><br><span class="line">3154</span><br><span class="line">3155</span><br><span class="line">3156</span><br><span class="line">3157</span><br><span class="line">3158</span><br><span class="line">3159</span><br><span class="line">3160</span><br><span class="line">3161</span><br><span class="line">3162</span><br><span class="line">3163</span><br><span class="line">3164</span><br><span class="line">3165</span><br><span class="line">3166</span><br><span class="line">3167</span><br><span class="line">3168</span><br><span class="line">3169</span><br><span class="line">3170</span><br><span class="line">3171</span><br><span class="line">3172</span><br><span class="line">3173</span><br><span class="line">3174</span><br><span class="line">3175</span><br><span class="line">3176</span><br><span class="line">3177</span><br><span class="line">3178</span><br><span class="line">3179</span><br><span class="line">3180</span><br><span class="line">3181</span><br><span class="line">3182</span><br><span class="line">3183</span><br><span class="line">3184</span><br><span class="line">3185</span><br><span class="line">3186</span><br><span class="line">3187</span><br><span class="line">3188</span><br><span class="line">3189</span><br><span class="line">3190</span><br><span class="line">3191</span><br><span class="line">3192</span><br><span class="line">3193</span><br><span class="line">3194</span><br><span class="line">3195</span><br><span class="line">3196</span><br><span class="line">3197</span><br><span class="line">3198</span><br><span class="line">3199</span><br><span class="line">3200</span><br><span class="line">3201</span><br><span class="line">3202</span><br><span class="line">3203</span><br><span class="line">3204</span><br><span class="line">3205</span><br><span class="line">3206</span><br><span class="line">3207</span><br><span class="line">3208</span><br><span class="line">3209</span><br><span class="line">3210</span><br><span class="line">3211</span><br><span class="line">3212</span><br><span class="line">3213</span><br><span class="line">3214</span><br><span class="line">3215</span><br><span class="line">3216</span><br><span class="line">3217</span><br><span class="line">3218</span><br><span class="line">3219</span><br><span class="line">3220</span><br><span class="line">3221</span><br><span class="line">3222</span><br><span class="line">3223</span><br><span class="line">3224</span><br><span class="line">3225</span><br><span class="line">3226</span><br><span class="line">3227</span><br><span class="line">3228</span><br><span class="line">3229</span><br><span class="line">3230</span><br><span class="line">3231</span><br><span class="line">3232</span><br><span class="line">3233</span><br><span class="line">3234</span><br><span class="line">3235</span><br><span class="line">3236</span><br><span class="line">3237</span><br><span class="line">3238</span><br><span class="line">3239</span><br><span class="line">3240</span><br><span class="line">3241</span><br><span class="line">3242</span><br><span class="line">3243</span><br><span class="line">3244</span><br><span class="line">3245</span><br><span class="line">3246</span><br><span class="line">3247</span><br><span class="line">3248</span><br><span class="line">3249</span><br><span class="line">3250</span><br><span class="line">3251</span><br><span class="line">3252</span><br><span class="line">3253</span><br><span class="line">3254</span><br><span class="line">3255</span><br><span class="line">3256</span><br><span class="line">3257</span><br><span class="line">3258</span><br><span class="line">3259</span><br><span class="line">3260</span><br><span class="line">3261</span><br><span class="line">3262</span><br><span class="line">3263</span><br><span class="line">3264</span><br><span class="line">3265</span><br><span class="line">3266</span><br><span class="line">3267</span><br><span class="line">3268</span><br><span class="line">3269</span><br><span class="line">3270</span><br><span class="line">3271</span><br><span class="line">3272</span><br><span class="line">3273</span><br><span class="line">3274</span><br><span class="line">3275</span><br><span class="line">3276</span><br><span class="line">3277</span><br><span class="line">3278</span><br><span class="line">3279</span><br><span class="line">3280</span><br><span class="line">3281</span><br><span class="line">3282</span><br><span class="line">3283</span><br><span class="line">3284</span><br><span class="line">3285</span><br><span class="line">3286</span><br><span class="line">3287</span><br><span class="line">3288</span><br><span class="line">3289</span><br><span class="line">3290</span><br><span class="line">3291</span><br><span class="line">3292</span><br><span class="line">3293</span><br><span class="line">3294</span><br><span class="line">3295</span><br><span class="line">3296</span><br><span class="line">3297</span><br><span class="line">3298</span><br><span class="line">3299</span><br><span class="line">3300</span><br><span class="line">3301</span><br><span class="line">3302</span><br><span class="line">3303</span><br><span class="line">3304</span><br><span class="line">3305</span><br><span class="line">3306</span><br><span class="line">3307</span><br><span class="line">3308</span><br><span class="line">3309</span><br><span class="line">3310</span><br><span class="line">3311</span><br><span class="line">3312</span><br><span class="line">3313</span><br><span class="line">3314</span><br><span class="line">3315</span><br><span class="line">3316</span><br><span class="line">3317</span><br><span class="line">3318</span><br><span class="line">3319</span><br><span class="line">3320</span><br><span class="line">3321</span><br><span class="line">3322</span><br><span class="line">3323</span><br><span class="line">3324</span><br><span class="line">3325</span><br><span class="line">3326</span><br><span class="line">3327</span><br><span class="line">3328</span><br><span class="line">3329</span><br><span class="line">3330</span><br><span class="line">3331</span><br><span class="line">3332</span><br><span class="line">3333</span><br><span class="line">3334</span><br><span class="line">3335</span><br><span class="line">3336</span><br><span class="line">3337</span><br><span class="line">3338</span><br><span class="line">3339</span><br><span class="line">3340</span><br><span class="line">3341</span><br><span class="line">3342</span><br><span class="line">3343</span><br><span class="line">3344</span><br><span class="line">3345</span><br><span class="line">3346</span><br><span class="line">3347</span><br><span class="line">3348</span><br><span class="line">3349</span><br><span class="line">3350</span><br><span class="line">3351</span><br><span class="line">3352</span><br><span class="line">3353</span><br><span class="line">3354</span><br><span class="line">3355</span><br><span class="line">3356</span><br><span class="line">3357</span><br><span class="line">3358</span><br><span class="line">3359</span><br><span class="line">3360</span><br><span class="line">3361</span><br><span class="line">3362</span><br><span class="line">3363</span><br><span class="line">3364</span><br><span class="line">3365</span><br><span class="line">3366</span><br><span class="line">3367</span><br><span class="line">3368</span><br><span class="line">3369</span><br><span class="line">3370</span><br><span class="line">3371</span><br><span class="line">3372</span><br><span class="line">3373</span><br><span class="line">3374</span><br><span class="line">3375</span><br><span class="line">3376</span><br><span class="line">3377</span><br><span class="line">3378</span><br><span class="line">3379</span><br><span class="line">3380</span><br><span class="line">3381</span><br><span class="line">3382</span><br><span class="line">3383</span><br><span class="line">3384</span><br><span class="line">3385</span><br><span class="line">3386</span><br><span class="line">3387</span><br><span class="line">3388</span><br><span class="line">3389</span><br><span class="line">3390</span><br><span class="line">3391</span><br><span class="line">3392</span><br><span class="line">3393</span><br><span class="line">3394</span><br><span class="line">3395</span><br><span class="line">3396</span><br><span class="line">3397</span><br><span class="line">3398</span><br><span class="line">3399</span><br><span class="line">3400</span><br><span class="line">3401</span><br><span class="line">3402</span><br><span class="line">3403</span><br><span class="line">3404</span><br><span class="line">3405</span><br><span class="line">3406</span><br><span class="line">3407</span><br><span class="line">3408</span><br><span class="line">3409</span><br><span class="line">3410</span><br><span class="line">3411</span><br><span class="line">3412</span><br><span class="line">3413</span><br><span class="line">3414</span><br><span class="line">3415</span><br><span class="line">3416</span><br><span class="line">3417</span><br><span class="line">3418</span><br><span class="line">3419</span><br><span class="line">3420</span><br><span class="line">3421</span><br><span class="line">3422</span><br><span class="line">3423</span><br><span class="line">3424</span><br><span class="line">3425</span><br><span class="line">3426</span><br><span class="line">3427</span><br><span class="line">3428</span><br><span class="line">3429</span><br><span class="line">3430</span><br><span class="line">3431</span><br><span class="line">3432</span><br><span class="line">3433</span><br><span class="line">3434</span><br><span class="line">3435</span><br><span class="line">3436</span><br><span class="line">3437</span><br><span class="line">3438</span><br><span class="line">3439</span><br><span class="line">3440</span><br><span class="line">3441</span><br><span class="line">3442</span><br><span class="line">3443</span><br><span class="line">3444</span><br><span class="line">3445</span><br><span class="line">3446</span><br><span class="line">3447</span><br><span class="line">3448</span><br><span class="line">3449</span><br><span class="line">3450</span><br><span class="line">3451</span><br><span class="line">3452</span><br><span class="line">3453</span><br><span class="line">3454</span><br><span class="line">3455</span><br><span class="line">3456</span><br><span class="line">3457</span><br><span class="line">3458</span><br><span class="line">3459</span><br><span class="line">3460</span><br><span class="line">3461</span><br><span class="line">3462</span><br><span class="line">3463</span><br><span class="line">3464</span><br><span class="line">3465</span><br><span class="line">3466</span><br><span class="line">3467</span><br><span class="line">3468</span><br><span class="line">3469</span><br><span class="line">3470</span><br><span class="line">3471</span><br><span class="line">3472</span><br><span class="line">3473</span><br><span class="line">3474</span><br><span class="line">3475</span><br><span class="line">3476</span><br><span class="line">3477</span><br><span class="line">3478</span><br><span class="line">3479</span><br><span class="line">3480</span><br><span class="line">3481</span><br><span class="line">3482</span><br><span class="line">3483</span><br><span class="line">3484</span><br><span class="line">3485</span><br><span class="line">3486</span><br><span class="line">3487</span><br><span class="line">3488</span><br><span class="line">3489</span><br><span class="line">3490</span><br><span class="line">3491</span><br><span class="line">3492</span><br><span class="line">3493</span><br><span class="line">3494</span><br><span class="line">3495</span><br><span class="line">3496</span><br><span class="line">3497</span><br><span class="line">3498</span><br><span class="line">3499</span><br><span class="line">3500</span><br><span class="line">3501</span><br><span class="line">3502</span><br><span class="line">3503</span><br><span class="line">3504</span><br><span class="line">3505</span><br><span class="line">3506</span><br><span class="line">3507</span><br><span class="line">3508</span><br><span class="line">3509</span><br><span class="line">3510</span><br><span class="line">3511</span><br><span class="line">3512</span><br><span class="line">3513</span><br><span class="line">3514</span><br><span class="line">3515</span><br><span class="line">3516</span><br><span class="line">3517</span><br><span class="line">3518</span><br><span class="line">3519</span><br><span class="line">3520</span><br><span class="line">3521</span><br><span class="line">3522</span><br><span class="line">3523</span><br><span class="line">3524</span><br><span class="line">3525</span><br><span class="line">3526</span><br><span class="line">3527</span><br><span class="line">3528</span><br><span class="line">3529</span><br><span class="line">3530</span><br><span class="line">3531</span><br><span class="line">3532</span><br><span class="line">3533</span><br><span class="line">3534</span><br><span class="line">3535</span><br><span class="line">3536</span><br><span class="line">3537</span><br><span class="line">3538</span><br><span class="line">3539</span><br><span class="line">3540</span><br><span class="line">3541</span><br><span class="line">3542</span><br><span class="line">3543</span><br><span class="line">3544</span><br><span class="line">3545</span><br><span class="line">3546</span><br><span class="line">3547</span><br><span class="line">3548</span><br><span class="line">3549</span><br><span class="line">3550</span><br><span class="line">3551</span><br><span class="line">3552</span><br><span class="line">3553</span><br><span class="line">3554</span><br><span class="line">3555</span><br><span class="line">3556</span><br><span class="line">3557</span><br><span class="line">3558</span><br><span class="line">3559</span><br><span class="line">3560</span><br><span class="line">3561</span><br><span class="line">3562</span><br><span class="line">3563</span><br><span class="line">3564</span><br><span class="line">3565</span><br><span class="line">3566</span><br><span class="line">3567</span><br><span class="line">3568</span><br><span class="line">3569</span><br><span class="line">3570</span><br><span class="line">3571</span><br><span class="line">3572</span><br><span class="line">3573</span><br><span class="line">3574</span><br><span class="line">3575</span><br><span class="line">3576</span><br><span class="line">3577</span><br><span class="line">3578</span><br><span class="line">3579</span><br><span class="line">3580</span><br><span class="line">3581</span><br><span class="line">3582</span><br><span class="line">3583</span><br><span class="line">3584</span><br><span class="line">3585</span><br><span class="line">3586</span><br><span class="line">3587</span><br><span class="line">3588</span><br><span class="line">3589</span><br><span class="line">3590</span><br><span class="line">3591</span><br><span class="line">3592</span><br><span class="line">3593</span><br><span class="line">3594</span><br><span class="line">3595</span><br><span class="line">3596</span><br><span class="line">3597</span><br><span class="line">3598</span><br><span class="line">3599</span><br><span class="line">3600</span><br><span class="line">3601</span><br><span class="line">3602</span><br><span class="line">3603</span><br><span class="line">3604</span><br><span class="line">3605</span><br><span class="line">3606</span><br><span class="line">3607</span><br><span class="line">3608</span><br><span class="line">3609</span><br><span class="line">3610</span><br><span class="line">3611</span><br><span class="line">3612</span><br><span class="line">3613</span><br><span class="line">3614</span><br><span class="line">3615</span><br><span class="line">3616</span><br><span class="line">3617</span><br><span class="line">3618</span><br><span class="line">3619</span><br><span class="line">3620</span><br><span class="line">3621</span><br><span class="line">3622</span><br><span class="line">3623</span><br><span class="line">3624</span><br><span class="line">3625</span><br><span class="line">3626</span><br><span class="line">3627</span><br><span class="line">3628</span><br><span class="line">3629</span><br><span class="line">3630</span><br><span class="line">3631</span><br><span class="line">3632</span><br><span class="line">3633</span><br><span class="line">3634</span><br><span class="line">3635</span><br><span class="line">3636</span><br><span class="line">3637</span><br><span class="line">3638</span><br><span class="line">3639</span><br><span class="line">3640</span><br><span class="line">3641</span><br><span class="line">3642</span><br><span class="line">3643</span><br><span class="line">3644</span><br><span class="line">3645</span><br><span class="line">3646</span><br><span class="line">3647</span><br><span class="line">3648</span><br><span class="line">3649</span><br><span class="line">3650</span><br><span class="line">3651</span><br><span class="line">3652</span><br><span class="line">3653</span><br><span class="line">3654</span><br><span class="line">3655</span><br><span class="line">3656</span><br><span class="line">3657</span><br><span class="line">3658</span><br><span class="line">3659</span><br><span class="line">3660</span><br><span class="line">3661</span><br><span class="line">3662</span><br><span class="line">3663</span><br><span class="line">3664</span><br><span class="line">3665</span><br><span class="line">3666</span><br><span class="line">3667</span><br><span class="line">3668</span><br><span class="line">3669</span><br><span class="line">3670</span><br><span class="line">3671</span><br><span class="line">3672</span><br><span class="line">3673</span><br><span class="line">3674</span><br><span class="line">3675</span><br><span class="line">3676</span><br><span class="line">3677</span><br><span class="line">3678</span><br><span class="line">3679</span><br><span class="line">3680</span><br><span class="line">3681</span><br><span class="line">3682</span><br><span class="line">3683</span><br><span class="line">3684</span><br><span class="line">3685</span><br><span class="line">3686</span><br><span class="line">3687</span><br><span class="line">3688</span><br><span class="line">3689</span><br><span class="line">3690</span><br><span class="line">3691</span><br><span class="line">3692</span><br><span class="line">3693</span><br><span class="line">3694</span><br><span class="line">3695</span><br><span class="line">3696</span><br><span class="line">3697</span><br><span class="line">3698</span><br><span class="line">3699</span><br><span class="line">3700</span><br><span class="line">3701</span><br><span class="line">3702</span><br><span class="line">3703</span><br><span class="line">3704</span><br><span class="line">3705</span><br><span class="line">3706</span><br><span class="line">3707</span><br><span class="line">3708</span><br><span class="line">3709</span><br><span class="line">3710</span><br><span class="line">3711</span><br><span class="line">3712</span><br><span class="line">3713</span><br><span class="line">3714</span><br><span class="line">3715</span><br><span class="line">3716</span><br><span class="line">3717</span><br><span class="line">3718</span><br><span class="line">3719</span><br><span class="line">3720</span><br><span class="line">3721</span><br><span class="line">3722</span><br><span class="line">3723</span><br><span class="line">3724</span><br><span class="line">3725</span><br><span class="line">3726</span><br><span class="line">3727</span><br><span class="line">3728</span><br><span class="line">3729</span><br><span class="line">3730</span><br><span class="line">3731</span><br><span class="line">3732</span><br><span class="line">3733</span><br><span class="line">3734</span><br><span class="line">3735</span><br><span class="line">3736</span><br><span class="line">3737</span><br><span class="line">3738</span><br><span class="line">3739</span><br><span class="line">3740</span><br><span class="line">3741</span><br><span class="line">3742</span><br><span class="line">3743</span><br><span class="line">3744</span><br><span class="line">3745</span><br><span class="line">3746</span><br><span class="line">3747</span><br><span class="line">3748</span><br><span class="line">3749</span><br><span class="line">3750</span><br><span class="line">3751</span><br><span class="line">3752</span><br><span class="line">3753</span><br><span class="line">3754</span><br><span class="line">3755</span><br><span class="line">3756</span><br><span class="line">3757</span><br><span class="line">3758</span><br><span class="line">3759</span><br><span class="line">3760</span><br><span class="line">3761</span><br><span class="line">3762</span><br><span class="line">3763</span><br><span class="line">3764</span><br><span class="line">3765</span><br><span class="line">3766</span><br><span class="line">3767</span><br><span class="line">3768</span><br><span class="line">3769</span><br><span class="line">3770</span><br><span class="line">3771</span><br><span class="line">3772</span><br><span class="line">3773</span><br><span class="line">3774</span><br><span class="line">3775</span><br><span class="line">3776</span><br><span class="line">3777</span><br><span class="line">3778</span><br><span class="line">3779</span><br><span class="line">3780</span><br><span class="line">3781</span><br><span class="line">3782</span><br><span class="line">3783</span><br><span class="line">3784</span><br><span class="line">3785</span><br><span class="line">3786</span><br><span class="line">3787</span><br><span class="line">3788</span><br><span class="line">3789</span><br><span class="line">3790</span><br><span class="line">3791</span><br><span class="line">3792</span><br><span class="line">3793</span><br><span class="line">3794</span><br><span class="line">3795</span><br><span class="line">3796</span><br><span class="line">3797</span><br><span class="line">3798</span><br><span class="line">3799</span><br><span class="line">3800</span><br><span class="line">3801</span><br><span class="line">3802</span><br><span class="line">3803</span><br><span class="line">3804</span><br><span class="line">3805</span><br><span class="line">3806</span><br><span class="line">3807</span><br><span class="line">3808</span><br><span class="line">3809</span><br><span class="line">3810</span><br><span class="line">3811</span><br><span class="line">3812</span><br><span class="line">3813</span><br><span class="line">3814</span><br><span class="line">3815</span><br><span class="line">3816</span><br><span class="line">3817</span><br><span class="line">3818</span><br><span class="line">3819</span><br><span class="line">3820</span><br><span class="line">3821</span><br><span class="line">3822</span><br><span class="line">3823</span><br><span class="line">3824</span><br><span class="line">3825</span><br><span class="line">3826</span><br><span class="line">3827</span><br><span class="line">3828</span><br><span class="line">3829</span><br><span class="line">3830</span><br><span class="line">3831</span><br><span class="line">3832</span><br><span class="line">3833</span><br><span class="line">3834</span><br><span class="line">3835</span><br><span class="line">3836</span><br><span class="line">3837</span><br><span class="line">3838</span><br><span class="line">3839</span><br><span class="line">3840</span><br><span class="line">3841</span><br><span class="line">3842</span><br><span class="line">3843</span><br><span class="line">3844</span><br><span class="line">3845</span><br><span class="line">3846</span><br><span class="line">3847</span><br><span class="line">3848</span><br><span class="line">3849</span><br><span class="line">3850</span><br><span class="line">3851</span><br><span class="line">3852</span><br><span class="line">3853</span><br><span class="line">3854</span><br><span class="line">3855</span><br><span class="line">3856</span><br><span class="line">3857</span><br><span class="line">3858</span><br><span class="line">3859</span><br><span class="line">3860</span><br><span class="line">3861</span><br><span class="line">3862</span><br><span class="line">3863</span><br><span class="line">3864</span><br><span class="line">3865</span><br><span class="line">3866</span><br><span class="line">3867</span><br><span class="line">3868</span><br><span class="line">3869</span><br><span class="line">3870</span><br><span class="line">3871</span><br><span class="line">3872</span><br><span class="line">3873</span><br><span class="line">3874</span><br><span class="line">3875</span><br><span class="line">3876</span><br><span class="line">3877</span><br><span class="line">3878</span><br><span class="line">3879</span><br><span class="line">3880</span><br><span class="line">3881</span><br><span class="line">3882</span><br><span class="line">3883</span><br><span class="line">3884</span><br><span class="line">3885</span><br><span class="line">3886</span><br><span class="line">3887</span><br><span class="line">3888</span><br><span class="line">3889</span><br><span class="line">3890</span><br><span class="line">3891</span><br><span class="line">3892</span><br><span class="line">3893</span><br><span class="line">3894</span><br><span class="line">3895</span><br><span class="line">3896</span><br><span class="line">3897</span><br><span class="line">3898</span><br><span class="line">3899</span><br><span class="line">3900</span><br><span class="line">3901</span><br><span class="line">3902</span><br><span class="line">3903</span><br><span class="line">3904</span><br><span class="line">3905</span><br><span class="line">3906</span><br><span class="line">3907</span><br><span class="line">3908</span><br><span class="line">3909</span><br><span class="line">3910</span><br><span class="line">3911</span><br><span class="line">3912</span><br><span class="line">3913</span><br><span class="line">3914</span><br><span class="line">3915</span><br><span class="line">3916</span><br><span class="line">3917</span><br><span class="line">3918</span><br><span class="line">3919</span><br><span class="line">3920</span><br><span class="line">3921</span><br><span class="line">3922</span><br><span class="line">3923</span><br><span class="line">3924</span><br><span class="line">3925</span><br><span class="line">3926</span><br><span class="line">3927</span><br><span class="line">3928</span><br><span class="line">3929</span><br><span class="line">3930</span><br><span class="line">3931</span><br><span class="line">3932</span><br><span class="line">3933</span><br><span class="line">3934</span><br><span class="line">3935</span><br><span class="line">3936</span><br><span class="line">3937</span><br><span class="line">3938</span><br><span class="line">3939</span><br><span class="line">3940</span><br><span class="line">3941</span><br><span class="line">3942</span><br><span class="line">3943</span><br><span class="line">3944</span><br><span class="line">3945</span><br><span class="line">3946</span><br><span class="line">3947</span><br><span class="line">3948</span><br><span class="line">3949</span><br><span class="line">3950</span><br><span class="line">3951</span><br><span class="line">3952</span><br><span class="line">3953</span><br><span class="line">3954</span><br><span class="line">3955</span><br><span class="line">3956</span><br><span class="line">3957</span><br><span class="line">3958</span><br><span class="line">3959</span><br><span class="line">3960</span><br><span class="line">3961</span><br><span class="line">3962</span><br><span class="line">3963</span><br><span class="line">3964</span><br><span class="line">3965</span><br><span class="line">3966</span><br><span class="line">3967</span><br><span class="line">3968</span><br><span class="line">3969</span><br><span class="line">3970</span><br><span class="line">3971</span><br><span class="line">3972</span><br><span class="line">3973</span><br><span class="line">3974</span><br><span class="line">3975</span><br><span class="line">3976</span><br><span class="line">3977</span><br><span class="line">3978</span><br><span class="line">3979</span><br><span class="line">3980</span><br><span class="line">3981</span><br><span class="line">3982</span><br><span class="line">3983</span><br><span class="line">3984</span><br><span class="line">3985</span><br><span class="line">3986</span><br><span class="line">3987</span><br><span class="line">3988</span><br><span class="line">3989</span><br><span class="line">3990</span><br><span class="line">3991</span><br><span class="line">3992</span><br><span class="line">3993</span><br><span class="line">3994</span><br><span class="line">3995</span><br><span class="line">3996</span><br><span class="line">3997</span><br><span class="line">3998</span><br><span class="line">3999</span><br><span class="line">4000</span><br><span class="line">4001</span><br><span class="line">4002</span><br><span class="line">4003</span><br><span class="line">4004</span><br><span class="line">4005</span><br><span class="line">4006</span><br><span class="line">4007</span><br><span class="line">4008</span><br><span class="line">4009</span><br><span class="line">4010</span><br><span class="line">4011</span><br><span class="line">4012</span><br><span class="line">4013</span><br><span class="line">4014</span><br><span class="line">4015</span><br><span class="line">4016</span><br><span class="line">4017</span><br><span class="line">4018</span><br><span class="line">4019</span><br><span class="line">4020</span><br><span class="line">4021</span><br><span class="line">4022</span><br><span class="line">4023</span><br><span class="line">4024</span><br><span class="line">4025</span><br><span class="line">4026</span><br><span class="line">4027</span><br><span class="line">4028</span><br><span class="line">4029</span><br><span class="line">4030</span><br><span class="line">4031</span><br><span class="line">4032</span><br><span class="line">4033</span><br><span class="line">4034</span><br><span class="line">4035</span><br><span class="line">4036</span><br><span class="line">4037</span><br><span class="line">4038</span><br><span class="line">4039</span><br><span class="line">4040</span><br><span class="line">4041</span><br><span class="line">4042</span><br><span class="line">4043</span><br><span class="line">4044</span><br><span class="line">4045</span><br><span class="line">4046</span><br><span class="line">4047</span><br><span class="line">4048</span><br><span class="line">4049</span><br><span class="line">4050</span><br><span class="line">4051</span><br><span class="line">4052</span><br><span class="line">4053</span><br><span class="line">4054</span><br><span class="line">4055</span><br><span class="line">4056</span><br><span class="line">4057</span><br><span class="line">4058</span><br><span class="line">4059</span><br><span class="line">4060</span><br><span class="line">4061</span><br><span class="line">4062</span><br><span class="line">4063</span><br><span class="line">4064</span><br><span class="line">4065</span><br><span class="line">4066</span><br><span class="line">4067</span><br><span class="line">4068</span><br><span class="line">4069</span><br><span class="line">4070</span><br><span class="line">4071</span><br><span class="line">4072</span><br><span class="line">4073</span><br><span class="line">4074</span><br><span class="line">4075</span><br><span class="line">4076</span><br><span class="line">4077</span><br><span class="line">4078</span><br><span class="line">4079</span><br><span class="line">4080</span><br><span class="line">4081</span><br><span class="line">4082</span><br><span class="line">4083</span><br><span class="line">4084</span><br><span class="line">4085</span><br><span class="line">4086</span><br><span class="line">4087</span><br><span class="line">4088</span><br><span class="line">4089</span><br><span class="line">4090</span><br><span class="line">4091</span><br><span class="line">4092</span><br><span class="line">4093</span><br><span class="line">4094</span><br><span class="line">4095</span><br><span class="line">4096</span><br><span class="line">4097</span><br><span class="line">4098</span><br><span class="line">4099</span><br><span class="line">4100</span><br><span class="line">4101</span><br><span class="line">4102</span><br><span class="line">4103</span><br><span class="line">4104</span><br><span class="line">4105</span><br><span class="line">4106</span><br><span class="line">4107</span><br><span class="line">4108</span><br><span class="line">4109</span><br><span class="line">4110</span><br><span class="line">4111</span><br><span class="line">4112</span><br><span class="line">4113</span><br><span class="line">4114</span><br><span class="line">4115</span><br><span class="line">4116</span><br><span class="line">4117</span><br><span class="line">4118</span><br><span class="line">4119</span><br><span class="line">4120</span><br><span class="line">4121</span><br><span class="line">4122</span><br><span class="line">4123</span><br><span class="line">4124</span><br><span class="line">4125</span><br><span class="line">4126</span><br><span class="line">4127</span><br><span class="line">4128</span><br><span class="line">4129</span><br><span class="line">4130</span><br><span class="line">4131</span><br><span class="line">4132</span><br><span class="line">4133</span><br><span class="line">4134</span><br><span class="line">4135</span><br><span class="line">4136</span><br><span class="line">4137</span><br><span class="line">4138</span><br><span class="line">4139</span><br><span class="line">4140</span><br><span class="line">4141</span><br><span class="line">4142</span><br><span class="line">4143</span><br><span class="line">4144</span><br><span class="line">4145</span><br><span class="line">4146</span><br><span class="line">4147</span><br><span class="line">4148</span><br><span class="line">4149</span><br><span class="line">4150</span><br><span class="line">4151</span><br><span class="line">4152</span><br><span class="line">4153</span><br><span class="line">4154</span><br><span class="line">4155</span><br><span class="line">4156</span><br><span class="line">4157</span><br><span class="line">4158</span><br><span class="line">4159</span><br><span class="line">4160</span><br><span class="line">4161</span><br><span class="line">4162</span><br><span class="line">4163</span><br><span class="line">4164</span><br><span class="line">4165</span><br><span class="line">4166</span><br><span class="line">4167</span><br><span class="line">4168</span><br><span class="line">4169</span><br><span class="line">4170</span><br><span class="line">4171</span><br><span class="line">4172</span><br><span class="line">4173</span><br><span class="line">4174</span><br><span class="line">4175</span><br><span class="line">4176</span><br><span class="line">4177</span><br><span class="line">4178</span><br><span class="line">4179</span><br><span class="line">4180</span><br><span class="line">4181</span><br><span class="line">4182</span><br><span class="line">4183</span><br><span class="line">4184</span><br><span class="line">4185</span><br><span class="line">4186</span><br><span class="line">4187</span><br><span class="line">4188</span><br><span class="line">4189</span><br><span class="line">4190</span><br><span class="line">4191</span><br><span class="line">4192</span><br><span class="line">4193</span><br><span class="line">4194</span><br><span class="line">4195</span><br><span class="line">4196</span><br><span class="line">4197</span><br><span class="line">4198</span><br><span class="line">4199</span><br><span class="line">4200</span><br><span class="line">4201</span><br><span class="line">4202</span><br><span class="line">4203</span><br><span class="line">4204</span><br><span class="line">4205</span><br><span class="line">4206</span><br><span class="line">4207</span><br><span class="line">4208</span><br><span class="line">4209</span><br><span class="line">4210</span><br><span class="line">4211</span><br><span class="line">4212</span><br><span class="line">4213</span><br><span class="line">4214</span><br><span class="line">4215</span><br><span class="line">4216</span><br><span class="line">4217</span><br><span class="line">4218</span><br><span class="line">4219</span><br><span class="line">4220</span><br><span class="line">4221</span><br><span class="line">4222</span><br><span class="line">4223</span><br><span class="line">4224</span><br><span class="line">4225</span><br><span class="line">4226</span><br><span class="line">4227</span><br><span class="line">4228</span><br><span class="line">4229</span><br><span class="line">4230</span><br><span class="line">4231</span><br><span class="line">4232</span><br><span class="line">4233</span><br><span class="line">4234</span><br><span class="line">4235</span><br><span class="line">4236</span><br><span class="line">4237</span><br><span class="line">4238</span><br><span class="line">4239</span><br><span class="line">4240</span><br><span class="line">4241</span><br><span class="line">4242</span><br><span class="line">4243</span><br><span class="line">4244</span><br><span class="line">4245</span><br><span class="line">4246</span><br><span class="line">4247</span><br><span class="line">4248</span><br><span class="line">4249</span><br><span class="line">4250</span><br><span class="line">4251</span><br><span class="line">4252</span><br><span class="line">4253</span><br><span class="line">4254</span><br><span class="line">4255</span><br><span class="line">4256</span><br><span class="line">4257</span><br><span class="line">4258</span><br><span class="line">4259</span><br><span class="line">4260</span><br><span class="line">4261</span><br><span class="line">4262</span><br><span class="line">4263</span><br><span class="line">4264</span><br><span class="line">4265</span><br><span class="line">4266</span><br><span class="line">4267</span><br><span class="line">4268</span><br><span class="line">4269</span><br><span class="line">4270</span><br><span class="line">4271</span><br><span class="line">4272</span><br><span class="line">4273</span><br><span class="line">4274</span><br><span class="line">4275</span><br><span class="line">4276</span><br><span class="line">4277</span><br><span class="line">4278</span><br><span class="line">4279</span><br><span class="line">4280</span><br><span class="line">4281</span><br><span class="line">4282</span><br><span class="line">4283</span><br><span class="line">4284</span><br><span class="line">4285</span><br><span class="line">4286</span><br><span class="line">4287</span><br><span class="line">4288</span><br><span class="line">4289</span><br><span class="line">4290</span><br><span class="line">4291</span><br><span class="line">4292</span><br><span class="line">4293</span><br><span class="line">4294</span><br><span class="line">4295</span><br><span class="line">4296</span><br><span class="line">4297</span><br><span class="line">4298</span><br><span class="line">4299</span><br><span class="line">4300</span><br><span class="line">4301</span><br><span class="line">4302</span><br><span class="line">4303</span><br><span class="line">4304</span><br><span class="line">4305</span><br><span class="line">4306</span><br><span class="line">4307</span><br><span class="line">4308</span><br><span class="line">4309</span><br><span class="line">4310</span><br><span class="line">4311</span><br><span class="line">4312</span><br><span class="line">4313</span><br><span class="line">4314</span><br><span class="line">4315</span><br><span class="line">4316</span><br><span class="line">4317</span><br><span class="line">4318</span><br><span class="line">4319</span><br><span class="line">4320</span><br><span class="line">4321</span><br><span class="line">4322</span><br><span class="line">4323</span><br><span class="line">4324</span><br><span class="line">4325</span><br><span class="line">4326</span><br><span class="line">4327</span><br><span class="line">4328</span><br><span class="line">4329</span><br><span class="line">4330</span><br><span class="line">4331</span><br><span class="line">4332</span><br><span class="line">4333</span><br><span class="line">4334</span><br><span class="line">4335</span><br><span class="line">4336</span><br><span class="line">4337</span><br><span class="line">4338</span><br><span class="line">4339</span><br><span class="line">4340</span><br><span class="line">4341</span><br><span class="line">4342</span><br><span class="line">4343</span><br><span class="line">4344</span><br><span class="line">4345</span><br><span class="line">4346</span><br><span class="line">4347</span><br><span class="line">4348</span><br><span class="line">4349</span><br><span class="line">4350</span><br><span class="line">4351</span><br><span class="line">4352</span><br><span class="line">4353</span><br><span class="line">4354</span><br><span class="line">4355</span><br><span class="line">4356</span><br><span class="line">4357</span><br><span class="line">4358</span><br><span class="line">4359</span><br><span class="line">4360</span><br><span class="line">4361</span><br><span class="line">4362</span><br><span class="line">4363</span><br><span class="line">4364</span><br><span class="line">4365</span><br><span class="line">4366</span><br><span class="line">4367</span><br><span class="line">4368</span><br><span class="line">4369</span><br><span class="line">4370</span><br><span class="line">4371</span><br><span class="line">4372</span><br><span class="line">4373</span><br><span class="line">4374</span><br><span class="line">4375</span><br><span class="line">4376</span><br><span class="line">4377</span><br><span class="line">4378</span><br><span class="line">4379</span><br><span class="line">4380</span><br><span class="line">4381</span><br><span class="line">4382</span><br><span class="line">4383</span><br><span class="line">4384</span><br><span class="line">4385</span><br><span class="line">4386</span><br><span class="line">4387</span><br><span class="line">4388</span><br><span class="line">4389</span><br><span class="line">4390</span><br><span class="line">4391</span><br><span class="line">4392</span><br><span class="line">4393</span><br><span class="line">4394</span><br><span class="line">4395</span><br><span class="line">4396</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize (<span class="string">&quot;Ofast&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize (<span class="string">&quot;unroll-loops&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC target (<span class="string">&quot;sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/extc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_cxx;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> ld = <span class="type">long</span> <span class="type">double</span>;</span><br><span class="line"><span class="keyword">using</span> ull = <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> ii = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> vii = vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __SIZEOF_INT128__</span></span><br><span class="line"><span class="keyword">using</span> int128 = <span class="type">__int128_t</span>;</span><br><span class="line"><span class="keyword">using</span> uint128 = <span class="type">__uint128_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">print_int128</span><span class="params">(int128 a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!a) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">while</span> (a) &#123;</span><br><span class="line">        s = <span class="built_in">char</span>(<span class="built_in">llabs</span>((<span class="type">long</span> <span class="type">long</span>)(a % <span class="number">10</span>)) + <span class="string">&#x27;0&#x27;</span>) + s;</span><br><span class="line">        <span class="keyword">if</span> (a &lt; <span class="number">0</span> &amp;&amp; a &gt; <span class="number">-10</span>) &#123;</span><br><span class="line">            s = <span class="string">&#x27;-&#x27;</span> + s;</span><br><span class="line">        &#125;</span><br><span class="line">        a /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">int128 <span class="title">stoint128</span><span class="params">(<span class="type">const</span> string &amp;s)</span> </span>&#123;</span><br><span class="line">    int128 a = <span class="number">0</span>, sgn = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="type">char</span> &amp;ch : s) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>) sgn *= <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> a = a * <span class="number">10</span> + sgn * (ch - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__SIZEOF_FLOAT128__) &amp;&amp; defined(__linux__)</span></span><br><span class="line"><span class="keyword">using</span> float128 = __float128;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;ext/pb_ds/tree_policy.hpp&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;ext/pb_ds/assoc_container.hpp&gt;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">using</span> RBTree = tree&lt;T, null_type, less&lt;&gt;, rb_tree_tag, tree_order_statistics_node_update&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> Trie = trie&lt;string, null_type, trie_string_access_traits&lt;&gt;, pat_trie_tag, trie_prefix_search_node_update&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> fast_io = []() &#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    cin.<span class="built_in">exceptions</span>(cin.failbit);    <span class="comment">// throw an exception if cin fails</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">    <span class="type">bool</span> <span class="title">can_read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> ch = <span class="built_in">getchar_unlocked</span>();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch == EOF) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            n |= ch == <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">            ch = <span class="built_in">getchar_unlocked</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">            t = t * <span class="number">10</span> + ch - <span class="number">48</span>;</span><br><span class="line">            ch = <span class="built_in">getchar_unlocked</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n) t = -t;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span></span><br><span class="line"><span class="function">    <span class="type">bool</span> <span class="title">can_read</span><span class="params">(T &amp;t, Args &amp;... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">can_read</span>(t) &amp;&amp; <span class="built_in">can_read</span>(args...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">    <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> c = <span class="built_in">getchar_unlocked</span>();</span><br><span class="line">        t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c)) n |= c == <span class="string">&#x27;-&#x27;</span>, c = <span class="built_in">getchar_unlocked</span>();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) t = t * <span class="number">10</span> + c - <span class="number">48</span>, c = <span class="built_in">getchar_unlocked</span>();</span><br><span class="line">        <span class="keyword">if</span> (n) t = -t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span></span><br><span class="line"><span class="function">    <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;t, Args &amp;... args)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">read</span>(t);</span><br><span class="line">        <span class="built_in">read</span>(args...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">    <span class="type">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) x = -x, <span class="built_in">putchar_unlocked</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">9</span>) <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">putchar_unlocked</span>(x % <span class="number">10</span> + <span class="number">48</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">    <span class="type">void</span> <span class="title">writeln</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">write</span>(x);</span><br><span class="line">        <span class="built_in">putchar_unlocked</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DSU: Union_Find_Set</span></span><br><span class="line"><span class="comment">// Complexity: O (a(n)) per operation. Note: O (log n) if one of</span></span><br><span class="line"><span class="comment">// union-by-size or path compression is omitted</span></span><br><span class="line"><span class="comment">// a(n) is the inverse Ackermann function</span></span><br><span class="line"><span class="keyword">namespace</span> DSU &#123;</span><br><span class="line">    <span class="comment">// father[x]: the father of x</span></span><br><span class="line">    <span class="comment">// Size[x]:  the size of tree/disjoint set whose ancestor is &#x27;x&#x27;</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; father, Size;</span><br><span class="line">    <span class="type">int</span> cc;      <span class="comment">// the number of disjoint sets</span></span><br><span class="line">    <span class="comment">// iniitalization</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// reset</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(father);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(Size);</span><br><span class="line">        <span class="comment">// initialize: 5 is an offset just in case</span></span><br><span class="line">        father.<span class="built_in">resize</span>(n + <span class="number">5</span>);</span><br><span class="line">        <span class="built_in">iota</span>(father.<span class="built_in">begin</span>(), father.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        Size.<span class="built_in">resize</span>(n + <span class="number">5</span>, <span class="number">1</span>);</span><br><span class="line">        cc = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// find the ancestor of i with path compression</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x != father[x]) father[x] = <span class="built_in">find</span>(father[x]);</span><br><span class="line">        <span class="keyword">return</span> father[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// merge x and y</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        x = <span class="built_in">find</span>(x); y = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (x == y) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// Make sure the tree with less nodes combines to the tree with more nodes</span></span><br><span class="line">        <span class="keyword">if</span> (Size[x] &gt; Size[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">        --cc;</span><br><span class="line">        father[x] = y;</span><br><span class="line">        Size[y] += Size[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// check if x and y are in the same set</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">is_same_group</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">find</span>(i) == <span class="built_in">find</span>(j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// check the size of set where &#x27;x&#x27; is</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">check_set_size</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Size[<span class="built_in">find</span>(x)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// check the number of disjoint sets</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">number_of_disjoint_sets</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Modified DSU, supports move p from its set to the set contains q</span></span><br><span class="line"><span class="comment">// Reference: UVA11987</span></span><br><span class="line"><span class="keyword">namespace</span> DSU_Modified &#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; father;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; Size;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(father);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(Size);</span><br><span class="line">        father.<span class="built_in">resize</span>(<span class="number">2</span> * n + <span class="number">5</span>);</span><br><span class="line">        Size.<span class="built_in">resize</span>(<span class="number">2</span> * n + <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            father.<span class="built_in">at</span>(i) = i + n;</span><br><span class="line">            father.<span class="built_in">at</span>(i + n) = father.<span class="built_in">at</span>(i);</span><br><span class="line">            Size.<span class="built_in">at</span>(i + n) = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x != father[x]) &#123;</span><br><span class="line">            father[x] = <span class="built_in">find</span>(father[x]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> father[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        x = <span class="built_in">find</span>(x);</span><br><span class="line">        y = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (x == y) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Size[x] &gt; Size[y]) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        father[x] = y;</span><br><span class="line">        Size[y] += Size[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// move x_ from its set to the set contains y_</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">move_to</span><span class="params">(<span class="type">int</span> x_, <span class="type">int</span> y_)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="built_in">find</span>(x_);</span><br><span class="line">        <span class="type">int</span> y = <span class="built_in">find</span>(y_);</span><br><span class="line">        <span class="keyword">if</span> (x == y) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        --Size[x];</span><br><span class="line">        ++Size[y];</span><br><span class="line">        father[x_] = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">is_same_group</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Catalan[0] = 1, Catalan[1] = 1</span></span><br><span class="line"><span class="comment">Catalan[n] = (4n-2)/(n+1) * Catalan[n-1]</span></span><br><span class="line"><span class="comment">Catalan[n] % p</span></span><br><span class="line"><span class="comment">= ( (4n-2)/(n+1) * Catalan[n-1] ) % p</span></span><br><span class="line"><span class="comment">= ( (4n-2) * Catalan[n-1] ) % p * inv[n+1] % p</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">namespace</span> Catalan &#123;</span><br><span class="line">    <span class="keyword">constexpr</span> ll MOD = <span class="number">1000000007</span>;</span><br><span class="line">    <span class="keyword">constexpr</span> ll MAXN = <span class="number">1005</span>;</span><br><span class="line">    ll inv[MAXN + <span class="number">5</span>];</span><br><span class="line">    ll catalan[MAXN + <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Obtain inverse of MOD from 1 to MAXN</span></span><br><span class="line">        inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">2</span>; i &lt;= MAXN; ++i) &#123;</span><br><span class="line">            inv[i] = (MOD - MOD / i) * inv[MOD % i] % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Obtain Catalan[n] % MOD</span></span><br><span class="line">        catalan[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        catalan[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">2</span>; i &lt;= MAXN; ++i) &#123;</span><br><span class="line">            catalan[i] =</span><br><span class="line">                    ((<span class="number">4</span> * i - <span class="number">2</span>) * catalan[i - <span class="number">1</span>] % MOD * inv[i + <span class="number">1</span>] % MOD) %</span><br><span class="line">                    MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ll <span class="title">query</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> catalan[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pre-condition: DSU</span></span><br><span class="line"><span class="keyword">namespace</span> MST_Kruskal &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        <span class="type">int</span> w;</span><br><span class="line">        <span class="function"><span class="keyword">explicit</span> <span class="title">Edge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span> : u(u), v(v), w(w) &#123;</span>&#125;</span><br><span class="line">        <span class="built_in">Edge</span>() = <span class="keyword">default</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function">vector&lt;Edge&gt; <span class="title">kruskal</span><span class="params">(vector&lt;Edge&gt; E, <span class="type">int</span> number_of_nodes)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// initialize a DSU</span></span><br><span class="line">        DSU::<span class="built_in">init</span>(number_of_nodes);</span><br><span class="line">        <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// sort by the edge&#x27;s weight in increasing order</span></span><br><span class="line">        <span class="built_in">sort</span>(E.<span class="built_in">begin</span>(), E.<span class="built_in">end</span>(),</span><br><span class="line">             [](<span class="type">const</span> Edge &amp;lhs, <span class="type">const</span> Edge &amp;rhs) &#123;</span><br><span class="line">                 <span class="built_in">return</span> (lhs.w &lt; rhs.w);</span><br><span class="line">             &#125;);</span><br><span class="line">        vector&lt;Edge&gt; minimum_spanning_tree;</span><br><span class="line">        <span class="comment">// int cost = 0;    // to calculate the total weight of the MST</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;[u, v, w] : E) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!DSU::<span class="built_in">is_same_group</span>(u, v)) &#123;</span><br><span class="line">                DSU::<span class="built_in">merge</span>(u, v);</span><br><span class="line">                minimum_spanning_tree.<span class="built_in">emplace_back</span>(<span class="built_in">Edge</span>(u, v, w));</span><br><span class="line">                <span class="comment">// cost += w;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minimum_spanning_tree;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// The collection of methods and data structures are used to obtain an MST of a</span></span><br><span class="line"><span class="comment">// undirected-graph using Prim&#x27;s algorithm with a priority queue optimized</span></span><br><span class="line"><span class="comment">// O(mlogn)</span></span><br><span class="line"><span class="keyword">namespace</span> MST_Prim &#123;</span><br><span class="line">    vector&lt;vector&lt;pair&lt;<span class="type">int</span>, ll&gt; &gt; &gt; AL;</span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; taken;</span><br><span class="line">    priority_queue&lt;pair&lt;ll, <span class="type">int</span>&gt; &gt; pq;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">process</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        taken[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[v, w] : AL[u])</span><br><span class="line">            <span class="keyword">if</span> (!taken[v])</span><br><span class="line">                pq.<span class="built_in">push</span>(&#123;-w, -v&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ll mst_cost = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> num_taken = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mst_cost = <span class="number">0</span>;</span><br><span class="line">        num_taken = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">decltype</span>(pq)().<span class="built_in">swap</span>(pq);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;().<span class="built_in">swap</span>(taken);</span><br><span class="line">        <span class="keyword">decltype</span>(AL)().<span class="built_in">swap</span>(AL);</span><br><span class="line">        n = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">prim</span><span class="params">(<span class="type">int</span> source)</span> </span>&#123;</span><br><span class="line">        taken.<span class="built_in">resize</span>(n, <span class="literal">false</span>);</span><br><span class="line">        <span class="built_in">process</span>(source);</span><br><span class="line">        <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span>[w, u] = pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            w = -w;</span><br><span class="line">            u = -u;</span><br><span class="line">            <span class="keyword">if</span> (taken[u]) <span class="keyword">continue</span>;</span><br><span class="line">            mst_cost += w;</span><br><span class="line">            <span class="built_in">process</span>(u);</span><br><span class="line">            ++num_taken;</span><br><span class="line">            <span class="keyword">if</span> (num_taken == n - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the Prim&#x27;s algorithm with adjacency matrix</span></span><br><span class="line"><span class="keyword">namespace</span> MST_Prim_ &#123;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">int</span> MAXN = <span class="number">1005</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> w = INF;</span><br><span class="line">        <span class="type">int</span> to = <span class="number">-1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; adj; <span class="comment">// adjacency matrix</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">prim</span><span class="params">(<span class="type">int</span> &amp;total_weight)</span> </span>&#123;</span><br><span class="line">        total_weight = <span class="number">0</span>;</span><br><span class="line">        bitset&lt;MAXN&gt; vis;</span><br><span class="line">        <span class="type">int</span> n = (<span class="type">int</span>)adj.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;Edge&gt; <span class="title">minE</span><span class="params">(n)</span></span>;</span><br><span class="line">        minE.<span class="built_in">at</span>(<span class="number">0</span>).w = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> v = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!vis[j] &amp;&amp; (v == <span class="number">-1</span> || minE.<span class="built_in">at</span>(j).w &lt; minE.<span class="built_in">at</span>(v).w)) &#123;</span><br><span class="line">                    v = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (minE.<span class="built_in">at</span>(v).w == INF) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;   <span class="comment">// No MST exists</span></span><br><span class="line">            &#125;</span><br><span class="line">            vis[v] = <span class="literal">true</span>;</span><br><span class="line">            total_weight += minE.<span class="built_in">at</span>(v).w;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> to = <span class="number">0</span>; to &lt; n; ++to) &#123;</span><br><span class="line">                <span class="keyword">if</span> (adj.<span class="built_in">at</span>(v).<span class="built_in">at</span>(to) &lt; minE.<span class="built_in">at</span>(to).w) &#123;</span><br><span class="line">                    minE.<span class="built_in">at</span>(to) = &#123;adj.<span class="built_in">at</span>(v).<span class="built_in">at</span>(to), v&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Negative all weights + Kruskal for Minimum Spanning Tree</span></span><br><span class="line"><span class="keyword">namespace</span> MaximumSpanningTree &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> u, v, w, neg_w;</span><br><span class="line">        <span class="function"><span class="keyword">explicit</span> <span class="title">Edge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span> : u(u), v(v), w(w), neg_w(-w) &#123;</span>&#125;</span><br><span class="line">        <span class="built_in">Edge</span>() = <span class="keyword">default</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function">vector&lt;Edge&gt; <span class="title">kruskal</span><span class="params">(vector&lt;Edge&gt; &amp;E)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(E.<span class="built_in">begin</span>(), E.<span class="built_in">end</span>(), [](<span class="type">const</span> Edge &amp;l, <span class="type">const</span> Edge &amp;r) &#123;</span><br><span class="line">            <span class="built_in">return</span> (l.neg_w &lt; r.neg_w);</span><br><span class="line">        &#125;);</span><br><span class="line">        vector&lt;Edge&gt; result;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;e : E) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!DSU::<span class="built_in">is_same_group</span>(e.u, e.v)) &#123;</span><br><span class="line">                DSU::<span class="built_in">merge</span>(e.u, e.v);</span><br><span class="line">                result.<span class="built_in">emplace_back</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Obtain Directed Minimum Spanning Tree using Edmond&#x27;s algorithm, takes O(mn)</span></span><br><span class="line"><span class="keyword">namespace</span> DMST &#123;</span><br><span class="line">    <span class="keyword">constexpr</span> ll INF = <span class="number">0x3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">explicit</span> <span class="title">Edge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, ll w)</span> : u(u), v(v), w(w) &#123;</span>&#125;</span><br><span class="line">        <span class="built_in">Edge</span>() = <span class="keyword">default</span>;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        ll w;</span><br><span class="line">    &#125;;</span><br><span class="line">    vector&lt;Edge&gt; edges;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; pre;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; id;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; visit;</span><br><span class="line">    vector&lt;ll&gt; in;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;Edge&gt;().<span class="built_in">swap</span>(edges);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(pre);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(id);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(visit);</span><br><span class="line">        <span class="built_in">vector</span>&lt;ll&gt;().<span class="built_in">swap</span>(in);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return the sum of MDST, or -INF if there is no MDST</span></span><br><span class="line">    <span class="function">ll <span class="title">Edmonds</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> number_of_nodes)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// init</span></span><br><span class="line">        <span class="type">int</span> number_of_edges = (<span class="type">int</span>)edges.<span class="built_in">size</span>();</span><br><span class="line">        pre.<span class="built_in">resize</span>(number_of_nodes + <span class="number">5</span>);</span><br><span class="line">        id.<span class="built_in">resize</span>(number_of_nodes + <span class="number">5</span>);</span><br><span class="line">        visit.<span class="built_in">resize</span>(number_of_nodes + <span class="number">5</span>);</span><br><span class="line">        in.<span class="built_in">resize</span>(number_of_nodes + <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        ll result = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> u, v, tn;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; number_of_nodes; ++i) &#123;</span><br><span class="line">                in.<span class="built_in">at</span>(i) = INF;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; number_of_edges; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (edges.<span class="built_in">at</span>(i).u != edges.<span class="built_in">at</span>(i).v &amp;&amp;</span><br><span class="line">                    edges.<span class="built_in">at</span>(i).w &lt; in.<span class="built_in">at</span>(edges.<span class="built_in">at</span>(i).v)) &#123;</span><br><span class="line">                    pre.<span class="built_in">at</span>(edges.<span class="built_in">at</span>(i).v) = edges.<span class="built_in">at</span>(i).u;</span><br><span class="line">                    in.<span class="built_in">at</span>(edges.<span class="built_in">at</span>(i).v) = edges.<span class="built_in">at</span>(i).w;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; number_of_nodes; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i != root &amp;&amp; in.<span class="built_in">at</span>(i) == INF) &#123;</span><br><span class="line">                    <span class="keyword">return</span> -INF;    <span class="comment">// No MDST exists</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            tn = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">fill</span>(id.<span class="built_in">begin</span>(), id.<span class="built_in">end</span>(), <span class="number">-1</span>);</span><br><span class="line">            <span class="built_in">fill</span>(visit.<span class="built_in">begin</span>(), visit.<span class="built_in">end</span>(), <span class="number">-1</span>);</span><br><span class="line">            in.<span class="built_in">at</span>(root) = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; number_of_nodes; ++i) &#123;</span><br><span class="line">                result += in.<span class="built_in">at</span>(i);</span><br><span class="line">                v = i;</span><br><span class="line">                <span class="keyword">while</span> (visit.<span class="built_in">at</span>(v) != i &amp;&amp; id.<span class="built_in">at</span>(v) == <span class="number">-1</span> &amp;&amp; v != root) &#123;</span><br><span class="line">                    visit.<span class="built_in">at</span>(v) = i;</span><br><span class="line">                    v = pre.<span class="built_in">at</span>(v);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (v != root &amp;&amp; id.<span class="built_in">at</span>(v) == <span class="number">-1</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (u = pre.<span class="built_in">at</span>(v); u != v; u = pre.<span class="built_in">at</span>(u)) &#123;</span><br><span class="line">                        id.<span class="built_in">at</span>(u) = tn;</span><br><span class="line">                    &#125;</span><br><span class="line">                    id.<span class="built_in">at</span>(v) = tn;</span><br><span class="line">                    ++tn;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tn == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;  <span class="comment">// No cycles found</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; number_of_nodes; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (id.<span class="built_in">at</span>(i) == <span class="number">-1</span>) &#123;</span><br><span class="line">                    id.<span class="built_in">at</span>(i) = tn;</span><br><span class="line">                    ++tn;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; number_of_edges; ) &#123;</span><br><span class="line">                v = edges.<span class="built_in">at</span>(i).v;</span><br><span class="line">                edges.<span class="built_in">at</span>(i).u = id.<span class="built_in">at</span>(edges.<span class="built_in">at</span>(i).u);</span><br><span class="line">                edges.<span class="built_in">at</span>(i).v = id.<span class="built_in">at</span>(edges.<span class="built_in">at</span>(i).v);</span><br><span class="line">                <span class="keyword">if</span> (edges.<span class="built_in">at</span>(i).u != edges.<span class="built_in">at</span>(i).v) &#123;</span><br><span class="line">                    edges.<span class="built_in">at</span>(i).w -= in.<span class="built_in">at</span>(v);</span><br><span class="line">                    ++i;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">swap</span>(edges.<span class="built_in">at</span>(i), edges.<span class="built_in">at</span>(--number_of_edges));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            number_of_nodes = tn;</span><br><span class="line">            root = id.<span class="built_in">at</span>(root);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Usage:</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n, m, r, u, v;</span><br><span class="line">        ll w;</span><br><span class="line">        vector&lt;unordered_map&lt;<span class="type">int</span>, ll&gt; &gt; adj;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m &gt;&gt; r;</span><br><span class="line">        --r;</span><br><span class="line">        adj.<span class="built_in">resize</span>(n + <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">            <span class="keyword">if</span> (u == v) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (adj.<span class="built_in">at</span>(u).<span class="built_in">find</span>(v) == adj.<span class="built_in">at</span>(u).<span class="built_in">end</span>()) &#123;</span><br><span class="line">                adj.<span class="built_in">at</span>(u)[v] = w;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                adj.<span class="built_in">at</span>(u)[v] = <span class="built_in">min</span>(adj.<span class="built_in">at</span>(u)[v], w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// add edges</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;[j, k] : adj.<span class="built_in">at</span>(i)) &#123;</span><br><span class="line">                edges.<span class="built_in">emplace_back</span>(i, j, k);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ll result = <span class="built_in">Edmonds</span>(r, n);</span><br><span class="line">        <span class="keyword">if</span> (result == -INF) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; result &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Merge two std::priority_queue efficiently (combine the heap with less nodes to the heap with more nodes)</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="comment">// O(n)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_pq</span><span class="params">(std::priority_queue&lt;T&gt; &amp;dest, std::priority_queue&lt;T&gt; &amp;src)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dest.<span class="built_in">size</span>() &lt; src.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(dest, src);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!src.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        dest.<span class="built_in">push</span>(src.<span class="built_in">top</span>());</span><br><span class="line">        src.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// An implementation of Floyd_Warshall Algorithm O(n^3) for finding</span></span><br><span class="line"><span class="comment">// all pairs of shortest path in a graph</span></span><br><span class="line"><span class="keyword">namespace</span> APSP_Floyd_Warshall &#123;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; am; <span class="comment">// adjacency matrix</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; prev; <span class="comment">// prev[i][j] is the previous vertex of j</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> number_of_nodes, <span class="type">bool</span> store_path = <span class="literal">false</span>)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// reset</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt; &gt;().<span class="built_in">swap</span>(am);</span><br><span class="line">        n = number_of_nodes;</span><br><span class="line">        am.<span class="built_in">resize</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, INF));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            am[i][i] = <span class="number">0</span>;   <span class="comment">// true on most cases</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (store_path) &#123;</span><br><span class="line">            prev.<span class="built_in">resize</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n));</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                prev[i][i] = i;   <span class="comment">// true on most cases</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">floyd_warshall</span><span class="params">(<span class="type">bool</span> store_path = <span class="literal">false</span>)</span> </span>&#123; <span class="comment">// order: k, i, j</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; n; ++k)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">                    <span class="keyword">if</span> (am[i][k] &lt; INF &amp;&amp; am[k][j] &lt; INF) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (am[i][j] &gt; am[i][k] + am[k][j]) &#123;</span><br><span class="line">                            am[i][j] = am[i][k] + am[k][j];</span><br><span class="line">                            <span class="keyword">if</span> (store_path) &#123;</span><br><span class="line">                                prev[i][j] = prev[k][j];</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">        <span class="comment">// No need for graph with edges of non-negative weights</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">0</span>; t &lt; n; ++t)</span><br><span class="line">                    <span class="keyword">if</span> (am[i][t] &lt; INF &amp;&amp; am[t][t] &lt; <span class="number">0</span> &amp;&amp; am[t][j] &lt; INF)</span><br><span class="line">                        am[i][j] = -INF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Query the shortest distance from u to v</span></span><br><span class="line">    <span class="comment">// INF: cant reach -INF: in a negative cycle</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dist</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;u, <span class="type">const</span> <span class="type">int</span> &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> am[u][v];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Print the path from u to v</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print_path</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;u, <span class="type">const</span> <span class="type">int</span> &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">dist</span>(u, v) == INF) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;\nthe final path does not exist\n&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (u != v) &#123;</span><br><span class="line">            <span class="built_in">print_path</span>(u, prev[u][v]);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; v &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Usage</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> number_of_nodes, m, u, v, s, d;</span><br><span class="line">        cin &gt;&gt; number_of_nodes &gt;&gt; m;</span><br><span class="line">        <span class="built_in">init</span>(number_of_nodes, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">            cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">            am[u][v] = <span class="number">1</span>;</span><br><span class="line">            prev[u][v] = u;</span><br><span class="line">            am[v][u] = <span class="number">1</span>;</span><br><span class="line">            prev[v][u] = v;</span><br><span class="line">        &#125;</span><br><span class="line">        cin &gt;&gt; s &gt;&gt; d;</span><br><span class="line">        <span class="built_in">floyd_warshall</span>(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">print_path</span>(s, d);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// An implementation of Floyd Warshall Algorithm to obtain the transitive closure of a directed-graph in O(N^3)</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">bool</span>&gt; &gt;</span><br><span class="line"><span class="built_in">floyd_warshall</span>(<span class="type">int</span> n, <span class="type">const</span> vector&lt;vector&lt;<span class="type">bool</span>&gt; &gt; &amp;adjacency_matrix) &#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">bool</span>&gt; &gt; <span class="built_in">reach</span>(n, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            <span class="comment">// If there is an edge between i and j, that is, adjacency_matrix[i][j] is true, then we make its weight as 1 in &#x27;reach&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> (adjacency_matrix.<span class="built_in">at</span>(i).<span class="built_in">at</span>(j)) &#123;</span><br><span class="line">                reach.<span class="built_in">at</span>(i).<span class="built_in">at</span>(j) = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="comment">// If vertex k is on a path from i to j,</span></span><br><span class="line">                <span class="comment">// then make sure that the value of reach[i][j] is true</span></span><br><span class="line">                reach.<span class="built_in">at</span>(i).<span class="built_in">at</span>(j) = reach.<span class="built_in">at</span>(i).<span class="built_in">at</span>(j) ||</span><br><span class="line">                                    (reach.<span class="built_in">at</span>(i).<span class="built_in">at</span>(k) &amp;&amp; reach.<span class="built_in">at</span>(k).<span class="built_in">at</span>(j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> reach;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// An implementation of Floyd Warshall Algorithm to obtain the transitive closure of a directed-graph in O(N^3 / w) with bitset optimized</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">size_t</span> N&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TransitiveClosure</span> &#123;</span><br><span class="line">    bitset&lt;N&gt; reach[N];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">floyd_warshall</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (reach[i][k]) &#123;</span><br><span class="line">                    reach[i] |= reach[k];    <span class="comment">// reach[i] = reach[i] | reach[k];</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">            reach[i].<span class="built_in">reset</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Find minimum weight cycle in an undirected graph using Floyd</span></span><br><span class="line"><span class="keyword">namespace</span> MinimumWeightCycleUndirectedGraph &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; adj_matrix;</span><br><span class="line">    <span class="type">int</span> number_of_nodes;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        number_of_nodes = n;</span><br><span class="line">        adj_matrix.<span class="built_in">resize</span>(number_of_nodes + <span class="number">5</span>,</span><br><span class="line">                          <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(number_of_nodes + <span class="number">5</span>, INF));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= number_of_nodes; ++i) &#123;</span><br><span class="line">            adj_matrix.<span class="built_in">at</span>(i).<span class="built_in">at</span>(i) = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">        adj_matrix.<span class="built_in">at</span>(u).<span class="built_in">at</span>(v) = w;</span><br><span class="line">        adj_matrix.<span class="built_in">at</span>(v).<span class="built_in">at</span>(u) = w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Obtain the summation of weights in the minimum weight cycle,</span></span><br><span class="line">    <span class="comment">// return false if no such cycle exists</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">floyd</span><span class="params">(ll &amp;answer)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; <span class="built_in">dis</span>(adj_matrix);</span><br><span class="line">        answer = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= number_of_nodes; ++k) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; k; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; ++j) &#123;</span><br><span class="line">                    answer = <span class="built_in">min</span>(answer, dis.<span class="built_in">at</span>(i).<span class="built_in">at</span>(j) * <span class="number">1LL</span> +</span><br><span class="line">                                         adj_matrix.<span class="built_in">at</span>(i).<span class="built_in">at</span>(k) +</span><br><span class="line">                                         adj_matrix.<span class="built_in">at</span>(k).<span class="built_in">at</span>(j));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= number_of_nodes; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= number_of_nodes; ++j) &#123;</span><br><span class="line">                    dis.<span class="built_in">at</span>(i).<span class="built_in">at</span>(j) = <span class="built_in">min</span>(dis.<span class="built_in">at</span>(i).<span class="built_in">at</span>(j),</span><br><span class="line">                                          dis.<span class="built_in">at</span>(i).<span class="built_in">at</span>(k) + dis.<span class="built_in">at</span>(k).<span class="built_in">at</span>(j));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer &lt; INF;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Find minimum weight cycle in a directed graph using Dijkstra with flag</span></span><br><span class="line"><span class="keyword">namespace</span> MinimumWeightCycleDirectedGraph &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">int</span> MAXN = <span class="number">505</span>;   <span class="comment">// max nodes in the graph</span></span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt; &gt; adj; <span class="comment">// The adjacency list of the graph</span></span><br><span class="line">    <span class="type">int</span> number_of_nodes;</span><br><span class="line">    bitset&lt;MAXN&gt; vis;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        number_of_nodes = n;</span><br><span class="line">        <span class="comment">// initialize the containers</span></span><br><span class="line">        adj.<span class="built_in">resize</span>(number_of_nodes + <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">        adj.<span class="built_in">at</span>(u).<span class="built_in">emplace_back</span>(v, w);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dijkstra</span><span class="params">(<span class="type">int</span> source)</span> </span>&#123;</span><br><span class="line">        vis.<span class="built_in">reset</span>();</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dis</span><span class="params">(number_of_nodes + <span class="number">5</span>, INF)</span></span>;</span><br><span class="line">        dis.<span class="built_in">at</span>(source) = <span class="number">0</span>;</span><br><span class="line">        std::priority_queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt;, greater&lt;&gt; &gt; pq;</span><br><span class="line">        pq.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(dis.<span class="built_in">at</span>(source), source));</span><br><span class="line">        <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> v = pq.<span class="built_in">top</span>().second;</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (vis[v]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            vis[v] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;[to, w] : adj.<span class="built_in">at</span>(v)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dis.<span class="built_in">at</span>(to) &gt; dis.<span class="built_in">at</span>(v) + w) &#123;</span><br><span class="line">                    dis.<span class="built_in">at</span>(to) = dis.<span class="built_in">at</span>(v) + w;</span><br><span class="line">                    <span class="keyword">if</span> (!vis[to]) &#123;</span><br><span class="line">                        pq.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(dis.<span class="built_in">at</span>(to), to));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// reset the start point</span></span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                vis[source] = <span class="literal">false</span>;</span><br><span class="line">                dis.<span class="built_in">at</span>(source) = INF;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dis;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Usage:</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = <span class="number">400</span>;    <span class="comment">// suppose in this case we have 400 nodes</span></span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">        <span class="comment">// ... After the construction of the graph, node id starts from 1</span></span><br><span class="line">        <span class="type">int</span> minimalCycle = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">auto</span> dis = <span class="built_in">dijkstra</span>(i);</span><br><span class="line">            minimalCycle = dis.<span class="built_in">at</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (minimalCycle == INF) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;No cycle found!&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; minimalCycle &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> APSP_Johnson &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">int</span> MAX_NODES = <span class="number">3005</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        <span class="type">int</span> w;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">explicit</span> <span class="title">Edge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span> : u(u), v(v), w(w) &#123;</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Data members of the graph G</span></span><br><span class="line">    <span class="type">int</span> number_of_nodes;</span><br><span class="line">    vector&lt;Edge&gt; edges;</span><br><span class="line">    <span class="type">int</span> source;</span><br><span class="line">    vector&lt;vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt; &gt; adj; <span class="comment">// The adjacency list of the graph</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// An implementation of Shortest Path Faster Algorithm (Bellman-Ford&#x27;s algorithm with queue optimized)</span></span><br><span class="line">    <span class="keyword">namespace</span> SSSP_SPFA &#123;</span><br><span class="line"></span><br><span class="line">        bitset&lt;MAX_NODES&gt; in_queue;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; dis;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// O(mn)</span></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cnt</span><span class="params">(number_of_nodes + <span class="number">5</span>)</span></span>;</span><br><span class="line">            queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">            q.<span class="built_in">push</span>(source);</span><br><span class="line">            in_queue[source] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                <span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                in_queue[u] = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;[v, w] : adj.<span class="built_in">at</span>(u)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (dis.<span class="built_in">at</span>(v) &gt; dis.<span class="built_in">at</span>(u) + w) &#123;</span><br><span class="line">                        dis.<span class="built_in">at</span>(v) = dis.<span class="built_in">at</span>(u) + w;</span><br><span class="line">                        <span class="keyword">if</span> (!in_queue[v]) &#123;</span><br><span class="line">                            q.<span class="built_in">push</span>(v);</span><br><span class="line">                            in_queue[v] = <span class="literal">true</span>;</span><br><span class="line">                            ++cnt.<span class="built_in">at</span>(v);</span><br><span class="line">                            <span class="keyword">if</span> (cnt.<span class="built_in">at</span>(v) &gt; number_of_nodes) &#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">false</span>;   <span class="comment">// a negative cycle exists</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The implementation of Dijkstra using adjacency list (based on the index)</span></span><br><span class="line">    <span class="keyword">namespace</span> SSSP_Dijkstra &#123;</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">            <span class="type">int</span> to, distance, next;</span><br><span class="line"></span><br><span class="line">            <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> Edge &amp;other) <span class="type">const</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> to == other.to &amp;&amp; distance == other.distance &amp;&amp;</span><br><span class="line">                       next == other.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">            <span class="type">int</span> distance, position;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">explicit</span> <span class="title">Node</span><span class="params">(<span class="type">int</span> distance, <span class="type">int</span> position)</span> : distance(distance),</span></span><br><span class="line"><span class="function">                                                        position(position) &#123;</span>&#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Node &amp;other) <span class="type">const</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> (other.distance &lt; distance);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Containers to store the graph</span></span><br><span class="line">        vector&lt;Edge&gt; E;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; head;</span><br><span class="line">        <span class="type">int</span> counter;</span><br><span class="line">        <span class="type">int</span> number_of_nodes;</span><br><span class="line">        <span class="type">int</span> number_of_edges;</span><br><span class="line"></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; dis;    <span class="comment">// dis.at(n) = the shortest distance from source to n</span></span><br><span class="line">        bitset&lt;MAX_NODES&gt; vis;</span><br><span class="line">        <span class="type">int</span> source;         <span class="comment">// the node id of the source</span></span><br><span class="line">        std::priority_queue&lt;Node&gt; pq;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> e)</span> </span>&#123;</span><br><span class="line">            number_of_nodes = n;</span><br><span class="line">            number_of_edges = e;</span><br><span class="line">            <span class="comment">// initialize the containers</span></span><br><span class="line">            E.<span class="built_in">resize</span>(number_of_edges + <span class="number">5</span>);</span><br><span class="line">            head.<span class="built_in">resize</span>(number_of_nodes + <span class="number">5</span>);</span><br><span class="line">            dis.<span class="built_in">resize</span>(number_of_nodes + <span class="number">5</span>, INF);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="built_in">fill</span>(dis.<span class="built_in">begin</span>(), dis.<span class="built_in">end</span>(), INF);</span><br><span class="line">            vis.<span class="built_in">reset</span>();</span><br><span class="line">            std::<span class="built_in">priority_queue</span>&lt;Node&gt;().<span class="built_in">swap</span>(pq);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">            ++counter;</span><br><span class="line">            E.<span class="built_in">at</span>(counter).distance = w;</span><br><span class="line">            E.<span class="built_in">at</span>(counter).to = v;</span><br><span class="line">            E.<span class="built_in">at</span>(counter).next = head.<span class="built_in">at</span>(u);</span><br><span class="line">            head.<span class="built_in">at</span>(u) = counter;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            dis.<span class="built_in">at</span>(source) = <span class="number">0</span>;</span><br><span class="line">            pq.<span class="built_in">push</span>(<span class="built_in">Node</span>(dis.<span class="built_in">at</span>(source), source));</span><br><span class="line">            <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                Node temp_node = pq.<span class="built_in">top</span>();</span><br><span class="line">                pq.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="type">int</span> x = temp_node.position;</span><br><span class="line">                <span class="keyword">if</span> (vis[x]) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                vis[x] = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = head.<span class="built_in">at</span>(x); i; i = E.<span class="built_in">at</span>(i).next) &#123;</span><br><span class="line">                    <span class="type">int</span> y = E.<span class="built_in">at</span>(i).to;</span><br><span class="line">                    <span class="keyword">if</span> (dis.<span class="built_in">at</span>(y) &gt; dis.<span class="built_in">at</span>(x) + E.<span class="built_in">at</span>(i).distance) &#123;</span><br><span class="line">                        dis.<span class="built_in">at</span>(y) = dis.<span class="built_in">at</span>(x) + E.<span class="built_in">at</span>(i).distance;</span><br><span class="line">                        <span class="keyword">if</span> (!vis[y]) &#123;</span><br><span class="line">                            pq.<span class="built_in">push</span>(<span class="built_in">Node</span>(dis.<span class="built_in">at</span>(y), y));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; d; <span class="comment">// d[i][j] indicates the distance of shortest path from i to j after running Johnson&#x27;s algorithm</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">johnson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// construct the graph G_prime</span></span><br><span class="line">        source = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">1</span>; v &lt;= number_of_nodes; ++v) &#123;</span><br><span class="line">            edges.<span class="built_in">emplace_back</span>(<span class="built_in">Edge</span>(source, v, <span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// convert edges of G_prime into &#x27;adj&#x27;</span></span><br><span class="line">        adj.<span class="built_in">resize</span>(number_of_nodes + <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;e : edges) &#123;</span><br><span class="line">            adj.<span class="built_in">at</span>(e.u).<span class="built_in">emplace_back</span>(<span class="built_in">make_pair</span>(e.v, e.w));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// init spfa</span></span><br><span class="line">        SSSP_SPFA::dis.<span class="built_in">resize</span>(number_of_nodes + <span class="number">5</span>, INF);</span><br><span class="line">        SSSP_SPFA::dis.<span class="built_in">at</span>(source) = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// run spfa</span></span><br><span class="line">        <span class="keyword">if</span> (!SSSP_SPFA::<span class="built_in">spfa</span>()) &#123;</span><br><span class="line">            <span class="comment">// graph G contains a negative cycle</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// update all edges in G</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e : edges) &#123;</span><br><span class="line">            e.w += SSSP_SPFA::dis.<span class="built_in">at</span>(e.u) - SSSP_SPFA::dis.<span class="built_in">at</span>(e.v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// initialize &#x27;d&#x27;</span></span><br><span class="line">        d.<span class="built_in">resize</span>(number_of_nodes + <span class="number">5</span>,</span><br><span class="line">                 <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(number_of_nodes + <span class="number">5</span>));</span><br><span class="line">        <span class="comment">// initialize Dijkstra</span></span><br><span class="line">        SSSP_Dijkstra::<span class="built_in">init</span>(number_of_nodes, <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(edges.<span class="built_in">size</span>()));</span><br><span class="line">        <span class="comment">// add edges</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;e : edges) &#123;</span><br><span class="line">            SSSP_Dijkstra::<span class="built_in">add_edge</span>(e.u, e.v, e.w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> u = <span class="number">1</span>; u &lt;= number_of_nodes; ++u) &#123;</span><br><span class="line">            <span class="comment">// run Dijkstra from each node</span></span><br><span class="line">            SSSP_Dijkstra::source = u;</span><br><span class="line">            SSSP_Dijkstra::<span class="built_in">dijkstra</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">1</span>; v &lt;= number_of_nodes; ++v) &#123;</span><br><span class="line">                <span class="keyword">if</span> (SSSP_Dijkstra::dis.<span class="built_in">at</span>(v) == INF) &#123;</span><br><span class="line">                    d.<span class="built_in">at</span>(u).<span class="built_in">at</span>(v) = INF;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    d.<span class="built_in">at</span>(u).<span class="built_in">at</span>(v) =</span><br><span class="line">                            SSSP_Dijkstra::dis.<span class="built_in">at</span>(v) + SSSP_SPFA::dis.<span class="built_in">at</span>(v) -</span><br><span class="line">                            SSSP_SPFA::dis.<span class="built_in">at</span>(u);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// reset dijkstra</span></span><br><span class="line">            SSSP_Dijkstra::<span class="built_in">reset</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// An example that does graph traversal with BFS from &#x27;s&#x27;</span></span><br><span class="line"><span class="comment">// Suppose the weight of each edge is the same.</span></span><br><span class="line"><span class="keyword">namespace</span> BFS_Example &#123;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">int</span> WEIGHT = <span class="number">1</span>;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; adj;   <span class="comment">// adjacency list</span></span><br><span class="line">    <span class="type">int</span> s;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; prev; <span class="comment">// an auxiliary container to store the path</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; dis; <span class="comment">// dis.at(n) = the distance of shortest path from &#x27;s&#x27; to n</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> number_of_nodes, <span class="type">bool</span> store_path = <span class="literal">false</span>)</span> </span>&#123;</span><br><span class="line">        dis.<span class="built_in">resize</span>(number_of_nodes + <span class="number">5</span>, INF);</span><br><span class="line">        <span class="keyword">if</span> (store_path) &#123;</span><br><span class="line">            prev.<span class="built_in">resize</span>(number_of_nodes + <span class="number">5</span>, <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">bool</span> store_path = <span class="literal">false</span>)</span> </span>&#123;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(s);</span><br><span class="line">        dis.<span class="built_in">at</span>(s) = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;to : adj.<span class="built_in">at</span>(u)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dis.<span class="built_in">at</span>(to) == INF) &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(to);</span><br><span class="line">                    dis.<span class="built_in">at</span>(to) = dis.<span class="built_in">at</span>(u) + WEIGHT;</span><br><span class="line">                    <span class="keyword">if</span> (store_path) &#123;</span><br><span class="line">                        prev.<span class="built_in">at</span>(to) = u;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">get_path</span><span class="params">(<span class="type">int</span> destination)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; result;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = destination; i != <span class="number">-1</span>; i = prev.<span class="built_in">at</span>(i)) &#123;</span><br><span class="line">            result.<span class="built_in">emplace_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(result.<span class="built_in">begin</span>(), result.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Implementation of next_combination, duplicated values will be shown once</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Itr&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">next_combination</span><span class="params">(<span class="type">const</span> Itr &amp;first, Itr k, <span class="type">const</span> Itr &amp;last)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((first == last) || (first == k) || (last == k))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    Itr iter1 = first, iter2 = last;</span><br><span class="line">    ++iter1;</span><br><span class="line">    <span class="keyword">if</span> (last == iter1) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    iter1 = k;</span><br><span class="line">    --iter2;</span><br><span class="line">    <span class="keyword">while</span> (first != iter1) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*--iter1 &lt; *iter2) &#123;</span><br><span class="line">            Itr j = k;</span><br><span class="line">            <span class="keyword">while</span> (!(*iter1 &lt; *j)) ++j;</span><br><span class="line">            std::<span class="built_in">iter_swap</span>(iter1, j);</span><br><span class="line">            ++iter1;</span><br><span class="line">            ++j;</span><br><span class="line">            iter2 = k;</span><br><span class="line">            std::<span class="built_in">rotate</span>(iter1, j, last);</span><br><span class="line">            <span class="keyword">while</span> (last != j) ++j, ++iter2;</span><br><span class="line">            std::<span class="built_in">rotate</span>(k, iter2, last);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    std::<span class="built_in">rotate</span>(first, k, last);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">next_combination_usage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Usage: next_combination on vector&lt;int&gt;</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; A = &#123;<span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="built_in">sort</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">end</span>()); <span class="comment">// Must sort first</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// The length of the array in the combination</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> comb_size = <span class="number">1</span>; comb_size &lt;= <span class="number">3</span>; ++comb_size) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; comb_size; i++) &#123;</span><br><span class="line">                cout &lt;&lt; A[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="built_in">next_combination</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">begin</span>() + comb_size, A.<span class="built_in">end</span>()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Usage: next_combination on string</span></span><br><span class="line">    string s = <span class="string">&quot;ashdioK&quot;</span>;</span><br><span class="line">    <span class="built_in">sort</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> comb_size = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">string</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">begin</span>() + comb_size) &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="built_in">next_combination</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">begin</span>() + comb_size, s.<span class="built_in">end</span>()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Longest Common Substrings: O(a.size() * b.size())</span></span><br><span class="line"><span class="function">unordered_set&lt;string&gt; <span class="title">longestCommonSubstring</span><span class="params">(<span class="type">const</span> string &amp;a, <span class="type">const</span> string &amp;b)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    unordered_set&lt;string&gt; result;</span><br><span class="line">    <span class="keyword">if</span> (a.<span class="built_in">empty</span>() || b.<span class="built_in">empty</span>()) <span class="keyword">return</span> result;</span><br><span class="line">    <span class="type">int</span> r = (<span class="type">int</span>)a.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> n = (<span class="type">int</span>)b.<span class="built_in">size</span>();</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; <span class="built_in">dp</span>(r, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n));</span><br><span class="line">    <span class="type">int</span> z = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; r; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a.<span class="built_in">at</span>(i) == b.<span class="built_in">at</span>(j)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>) &#123;</span><br><span class="line">                    dp.<span class="built_in">at</span>(i).<span class="built_in">at</span>(j) = <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp.<span class="built_in">at</span>(i).<span class="built_in">at</span>(j) = dp.<span class="built_in">at</span>(i<span class="number">-1</span>).<span class="built_in">at</span>(j<span class="number">-1</span>)+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (dp.<span class="built_in">at</span>(i).<span class="built_in">at</span>(j) &gt; z) &#123;</span><br><span class="line">                    z = dp.<span class="built_in">at</span>(i).<span class="built_in">at</span>(j);</span><br><span class="line">                    result.<span class="built_in">clear</span>();</span><br><span class="line">                    result.<span class="built_in">insert</span>(a.<span class="built_in">substr</span>(i-z+<span class="number">1</span>,z));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (dp.<span class="built_in">at</span>(i).<span class="built_in">at</span>(j) == z) &#123;</span><br><span class="line">                    result.<span class="built_in">insert</span>(a.<span class="built_in">substr</span>(i-z+<span class="number">1</span>,z));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                dp.<span class="built_in">at</span>(i).<span class="built_in">at</span>(j) = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Longest Common Subsequence: O(A.size()*B.size())</span></span><br><span class="line"><span class="comment">// assert( longestCommonSubseq(&quot;abcde&quot;, &quot;bcef&quot;) == 3 );</span></span><br><span class="line"><span class="keyword">auto</span> longestCommonSubseq = [](<span class="type">const</span> <span class="keyword">auto</span> &amp;A, <span class="type">const</span> <span class="keyword">auto</span> &amp;B) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> len_A = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(A.<span class="built_in">size</span>());</span><br><span class="line">    <span class="type">int</span> len_B = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(B.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">if</span> (len_A == <span class="number">0</span> || len_B == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; <span class="built_in">dp</span>(len_A, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(len_B));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> a = <span class="number">0</span>; a &lt; len_A; a++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> b = <span class="number">0</span>; b &lt; len_B; b++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a) dp[a][b] = <span class="built_in">max</span>(dp[a][b], dp[a - <span class="number">1</span>][b]);</span><br><span class="line">            <span class="keyword">if</span> (b) dp[a][b] = <span class="built_in">max</span>(dp[a][b], dp[a][b - <span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span> (A[a] == B[b])</span><br><span class="line">                dp[a][b] = <span class="built_in">max</span>(dp[a][b], ((a &amp;&amp; b) ? dp[a - <span class="number">1</span>][b - <span class="number">1</span>] : <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ret = dp[len_A - <span class="number">1</span>][len_B - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LevenshteinDistance</span><span class="params">(<span class="type">const</span> string &amp;a, <span class="type">const</span> string &amp;b)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a_length = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(a.<span class="built_in">size</span>());</span><br><span class="line">    <span class="type">int</span> b_length = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(b.<span class="built_in">size</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a_length == <span class="number">0</span>) <span class="keyword">return</span> b_length;</span><br><span class="line">    <span class="keyword">if</span> (b_length == <span class="number">0</span>) <span class="keyword">return</span> a_length;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; <span class="built_in">dp</span>(a_length + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(b_length + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= a_length; ++i) &#123;</span><br><span class="line">        dp.<span class="built_in">at</span>(i).<span class="built_in">at</span>(<span class="number">0</span>) = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= b_length; ++j) &#123;</span><br><span class="line">        dp.<span class="built_in">at</span>(<span class="number">0</span>).<span class="built_in">at</span>(j) = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cost;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a_length; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= b_length; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a.<span class="built_in">at</span>(i - <span class="number">1</span>) == b.<span class="built_in">at</span>(j - <span class="number">1</span>)) &#123;</span><br><span class="line">                cost = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cost = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            dp.<span class="built_in">at</span>(i).<span class="built_in">at</span>(j) = <span class="built_in">min</span>(</span><br><span class="line">                    dp.<span class="built_in">at</span>(i - <span class="number">1</span>).<span class="built_in">at</span>(j) + <span class="number">1</span>,</span><br><span class="line">                    <span class="built_in">min</span>(dp.<span class="built_in">at</span>(i).<span class="built_in">at</span>(j - <span class="number">1</span>) + <span class="number">1</span>, dp.<span class="built_in">at</span>(i - <span class="number">1</span>).<span class="built_in">at</span>(j - <span class="number">1</span>) + cost)</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp.<span class="built_in">at</span>(a_length).<span class="built_in">at</span>(b_length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate the prime table from 1 to MAXN</span></span><br><span class="line"><span class="comment">// Usage: Sieve primes from 1 to 1005: EulerPrimeSieve::init();</span></span><br><span class="line"><span class="comment">// Usage: Check if N is a prime: !EulerPrimeSieve::isNotPrime[N];</span></span><br><span class="line"><span class="comment">// Usage: Check the kth prime: EulerPrimeSieve::prime[k - 1];</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Reduce num_prime to the number of primes if the space is not enough.</span></span><br><span class="line"><span class="keyword">namespace</span> EulerPrimeSieve &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1005</span>;</span><br><span class="line">    <span class="type">int</span> prime[MAXN] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> num_prime = <span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> isNotPrime[MAXN] = &#123;<span class="literal">true</span>, <span class="literal">true</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate the prime table from 1 to MAXN</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; MAXN; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isNotPrime[i])</span><br><span class="line">                prime[num_prime++] = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; num_prime &amp;&amp; i * prime[j] &lt; MAXN; j++) &#123;</span><br><span class="line">                isNotPrime[i * prime[j]] = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (!(i % prime[j]))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Only check if n &lt; MAXN is a prime</span></span><br><span class="line"><span class="keyword">namespace</span> EulerPrimeSieve_ &#123;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">int</span> MAXN = <span class="number">100005</span>;</span><br><span class="line">    bitset&lt;MAXN&gt; isNotPrime;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        isNotPrime[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        isNotPrime[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; MAXN; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isNotPrime[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; MAXN / i) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = i * i; j &lt; MAXN; j += i) &#123;</span><br><span class="line">                    isNotPrime[j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Calculate a^n (n &gt;= 0) in O(lgn) without recursion</span></span><br><span class="line"><span class="function">ll <span class="title">quickPower</span><span class="params">(ll a, ll n)</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            res *= a;</span><br><span class="line">        &#125;</span><br><span class="line">        a *= a;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isPrime</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">2</span>; i * i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Calculate (a^n) % m (n &gt;= 0, m &gt; 0) in O(lgn) without recursion</span></span><br><span class="line"><span class="function">ll <span class="title">quickPower</span><span class="params">(ll a, ll n, ll m)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Corner case:</span></span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If m is a prime, then (a^n) % m = a^(n % (m - 1)) % m (Fermat&#x27;s little theorem)</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isPrime</span>(m)) &#123;</span><br><span class="line">        n = n % (m - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    a %= m;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            res = res * a % m;</span><br><span class="line">        &#125;</span><br><span class="line">        a = a * a % m;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O(1) modulo mul</span></span><br><span class="line"><span class="function">ll <span class="title">multmod</span><span class="params">(ll a, ll b, ll m)</span> </span>&#123;</span><br><span class="line">    a = (a % m + m) % m;</span><br><span class="line">    b = (b % m + m) % m;</span><br><span class="line">    <span class="keyword">return</span> ((a * b - (ll)((<span class="type">long</span> <span class="type">double</span>)(a) / m * b) * m) %</span><br><span class="line">            m + m) % m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O(logb), better version</span></span><br><span class="line"><span class="function">ll <span class="title">powmod</span><span class="params">(ll a, ll b, ll m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ll r;</span><br><span class="line">    <span class="keyword">for</span> (r = <span class="number">1</span>, a %= m; b; a = <span class="built_in">multmod</span>(a, a, m), b &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b % <span class="number">2</span>) r = <span class="built_in">multmod</span>(r, a, m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a % p = a - floor(a / p) * p</span></span><br><span class="line"><span class="comment">// For a^b % p:</span></span><br><span class="line"><span class="comment">// If p is prime: a^b % p = a^(b % (p-1)) % p</span></span><br><span class="line"><span class="comment">// Otherwise: a^b % p = a^(b % phi(p) + phi(p)) % p</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// A way to hash fixed length array</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> MAXLENGTH = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">myHashFunc</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> array&lt;<span class="type">int</span>, MAXLENGTH&gt; &amp;A)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="type">size_t</span> h = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;i : A) &#123;</span><br><span class="line">            h ^= hash&lt;<span class="type">int</span>&gt;&#123;&#125;(i) + <span class="number">0x9e3779b9</span> + (h &lt;&lt; <span class="number">6</span>) + (h &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use gp_hash_table + custom hash function to accelerate</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">custom_hash</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">uint64_t</span> <span class="title">splitmix64</span><span class="params">(<span class="type">uint64_t</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// http://xorshift.di.unimi.it/splitmix64.c</span></span><br><span class="line">        x += <span class="number">0x9e3779b97f4a7c15</span>;</span><br><span class="line">        x = (x ^ (x &gt;&gt; <span class="number">30</span>)) * <span class="number">0xbf58476d1ce4e5b9</span>;</span><br><span class="line">        x = (x ^ (x &gt;&gt; <span class="number">27</span>)) * <span class="number">0x94d049bb133111eb</span>;</span><br><span class="line">        <span class="keyword">return</span> x ^ (x &gt;&gt; <span class="number">31</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">uint64_t</span> x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">const</span> <span class="type">uint64_t</span> FIXED_RANDOM = chrono::steady_clock::<span class="built_in">now</span>().<span class="built_in">time_since_epoch</span>().<span class="built_in">count</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">splitmix64</span>(x + FIXED_RANDOM);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// For a pair of integers</span></span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(pair&lt;<span class="type">uint64_t</span>, <span class="type">uint64_t</span>&gt; x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">const</span> <span class="type">uint64_t</span> FIXED_RANDOM = chrono::steady_clock::<span class="built_in">now</span>().<span class="built_in">time_since_epoch</span>().<span class="built_in">count</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">splitmix64</span>(x.first + FIXED_RANDOM) ^</span><br><span class="line">               (<span class="built_in">splitmix64</span>(x.second + FIXED_RANDOM) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">gp_hash_table&lt;<span class="type">int</span>, pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, custom_hash&gt; my_hash_table;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage:</span></span><br><span class="line"><span class="comment">// auto dp = MultiDimensionArray::Array&lt;int&gt;(5, 4, 12);</span></span><br><span class="line"><span class="comment">// auto dp__ = MultiDimensionArray::Array&lt;double&gt;(4, 5, 1, 1.0);</span></span><br><span class="line"><span class="keyword">namespace</span> MultiDimensionArray &#123;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Args&gt;</span></span><br><span class="line"><span class="function">    <span class="keyword">auto</span> <span class="title">Array</span><span class="params">(<span class="type">size_t</span> n, Args &amp;&amp;... args)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">if</span> <span class="title">constexpr</span> <span class="params">(<span class="number">1</span> == <span class="keyword">sizeof</span> ... (args))</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">vector</span>&lt;T&gt;(n, args ...);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">vector</span>(n, <span class="built_in">Array</span>&lt;T&gt;(args...));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// max and min in double type with unknown number of arguments(at least 2)</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">double</span> EPS = <span class="number">1e-6</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">constexpr</span> <span class="type">static</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sgn</span><span class="params">(<span class="type">const</span> <span class="type">double</span> &amp;x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; EPS) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; -EPS) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T = <span class="type">double</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">const</span> <span class="type">static</span></span><br><span class="line">T &amp; <span class="built_in">doubleMax</span>(<span class="type">const</span> T &amp;a) &#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T </span>= <span class="type">double</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">const</span> <span class="type">static</span></span></span><br><span class="line"><span class="function">T &amp; <span class="title">doubleMax</span><span class="params">(<span class="type">const</span> T &amp;l, <span class="type">const</span> T &amp;r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sgn</span>(l - r) &gt;= <span class="number">0</span> ? l : r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T </span>= <span class="type">double</span>, <span class="keyword">typename</span> ... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">const</span> <span class="type">static</span></span></span><br><span class="line"><span class="function">T &amp; <span class="title">doubleMax</span><span class="params">(<span class="type">const</span> T &amp;l, <span class="type">const</span> Args &amp;... args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">doubleMax</span>(l, <span class="built_in">doubleMax</span>(args ...));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T = <span class="type">double</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">const</span> <span class="type">static</span></span><br><span class="line">T &amp; <span class="built_in">doubleMin</span>(<span class="type">const</span> T &amp;a) &#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T </span>= <span class="type">double</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">const</span> <span class="type">static</span></span></span><br><span class="line"><span class="function">T &amp; <span class="title">doubleMin</span><span class="params">(<span class="type">const</span> T &amp;l, <span class="type">const</span> T &amp;r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sgn</span>(l - r) &gt;= <span class="number">0</span> ? r : l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T </span>= <span class="type">double</span>, <span class="keyword">typename</span> ... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">const</span> <span class="type">static</span></span></span><br><span class="line"><span class="function">T &amp; <span class="title">doubleMin</span><span class="params">(<span class="type">const</span> T&amp; l, <span class="type">const</span> Args&amp; ... args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">doubleMin</span>(l, <span class="built_in">doubleMin</span>(args ...));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reference:</span></span><br><span class="line"><span class="comment">// https://cs.uwaterloo.ca/~m32rober/rsqrt.pdf</span></span><br><span class="line"><span class="comment">// http://www.lomont.org/papers/2003/InvSqrt.pdf</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// FAST INVERSE SQUARE ROOT in long double</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">inv_sqrt64</span><span class="params">(<span class="type">double</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> x2 = n * <span class="number">0.5</span>;</span><br><span class="line">    <span class="type">double</span> y = n;</span><br><span class="line">    <span class="type">uint64_t</span> i = *(<span class="type">uint64_t</span> *) &amp;y;</span><br><span class="line">    i = <span class="number">0x5fe6eb50c7b537a9</span> - (i &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    y = *(<span class="type">double</span> *) &amp;i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// add more Newton iterations if you wanna improve the accuracy</span></span><br><span class="line">    y = y * (<span class="number">1.5</span> - (x2 * y * y));</span><br><span class="line">    y = y * (<span class="number">1.5</span> - (x2 * y * y));</span><br><span class="line">    <span class="comment">//y = y * (1.5 - (x2 * y * y));</span></span><br><span class="line">    <span class="comment">//y = y * (1.5 - (x2 * y * y));</span></span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A collection of containers and procedures that implements Tarjan&#x27;s strongly</span></span><br><span class="line"><span class="comment">// connected components algorithm. Assume that the node id starts from 1 and the</span></span><br><span class="line"><span class="comment">// index of a strongly connected component (SCC) also starts from 1</span></span><br><span class="line"><span class="keyword">namespace</span> SCC_Tarjan &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// adjacency list of the graph</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; G;</span><br><span class="line">    <span class="comment">// number of nodes in the graph</span></span><br><span class="line">    <span class="type">int</span> number_of_nodes;</span><br><span class="line">    <span class="comment">// number of strongly connected components</span></span><br><span class="line">    <span class="type">int</span> number_of_scc;</span><br><span class="line">    <span class="type">int</span> current_timestamp;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; s;   <span class="comment">// A stack is used to store all nodes that may form a</span></span><br><span class="line">    <span class="comment">// strongly connected component</span></span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt;</span><br><span class="line">            vis; <span class="comment">// vis.at(id) flags if the node id is in the stack</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; dfs_rank; <span class="comment">// dfs_rank.at(id) numbers the nodes consecutively in</span></span><br><span class="line">    <span class="comment">// the order in which they are discovered by DFS</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; low_link; <span class="comment">// low_link.at(id) represents the smallest node id of</span></span><br><span class="line">    <span class="comment">// any node known to be reachable from id through</span></span><br><span class="line">    <span class="comment">// id&#x27;s DFS subtree, including id itself</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; scc;      <span class="comment">// scc.at(id) is the index of the strongly connected</span></span><br><span class="line">    <span class="comment">// component that the node id belongs to</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; size_of_scc; <span class="comment">// size_of_scc.at(id) is the size of the strongly</span></span><br><span class="line">    <span class="comment">// connected component whose index is id</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// reset all containers</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">decltype</span>(G)().<span class="built_in">swap</span>(G);</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(s);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;().<span class="built_in">swap</span>(vis);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(dfs_rank);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(low_link);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(scc);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(size_of_scc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Initialize all global variables in the namespace</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        number_of_nodes = n;</span><br><span class="line">        number_of_scc = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// NOTICE: starts from 1 if the node id starts from 1</span></span><br><span class="line">        current_timestamp = <span class="number">1</span>;</span><br><span class="line">        G.<span class="built_in">resize</span>(number_of_nodes + <span class="number">5</span>);</span><br><span class="line">        vis.<span class="built_in">resize</span>(number_of_nodes + <span class="number">5</span>, <span class="literal">false</span>);</span><br><span class="line">        dfs_rank.<span class="built_in">resize</span>(number_of_nodes + <span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line">        low_link.<span class="built_in">resize</span>(number_of_nodes + <span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line">        scc.<span class="built_in">resize</span>(number_of_nodes + <span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line">        size_of_scc.<span class="built_in">resize</span>(number_of_nodes + <span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Tarjan</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123; <span class="comment">// u: the node id being processed</span></span><br><span class="line">        dfs_rank.<span class="built_in">at</span>(u) = current_timestamp;</span><br><span class="line">        low_link.<span class="built_in">at</span>(u) = current_timestamp;</span><br><span class="line">        ++current_timestamp;</span><br><span class="line">        s.<span class="built_in">push</span>(u);</span><br><span class="line">        vis.<span class="built_in">at</span>(u) = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;v : G[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!dfs_rank[v]) &#123;</span><br><span class="line">                <span class="built_in">Tarjan</span>(v);</span><br><span class="line">                low_link.<span class="built_in">at</span>(u) = <span class="built_in">min</span>(low_link.<span class="built_in">at</span>(u), low_link.<span class="built_in">at</span>(v));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (vis.<span class="built_in">at</span>(v)) &#123;</span><br><span class="line">                low_link.<span class="built_in">at</span>(u) = <span class="built_in">min</span>(low_link.<span class="built_in">at</span>(u), dfs_rank.<span class="built_in">at</span>(v));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (low_link.<span class="built_in">at</span>(u) == dfs_rank.<span class="built_in">at</span>(u)) &#123;</span><br><span class="line">            ++number_of_scc;</span><br><span class="line">            <span class="keyword">while</span> (s.<span class="built_in">top</span>() != u) &#123;</span><br><span class="line">                <span class="type">int</span> top_id = s.<span class="built_in">top</span>();</span><br><span class="line">                <span class="comment">// Paint top_id</span></span><br><span class="line">                s.<span class="built_in">pop</span>();</span><br><span class="line">                scc.<span class="built_in">at</span>(top_id) = number_of_scc;</span><br><span class="line">                ++size_of_scc.<span class="built_in">at</span>(number_of_scc);</span><br><span class="line">                vis.<span class="built_in">at</span>(top_id) = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Paint u</span></span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">            scc.<span class="built_in">at</span>(u) = number_of_scc;</span><br><span class="line">            ++size_of_scc.<span class="built_in">at</span>(number_of_scc);</span><br><span class="line">            vis.<span class="built_in">at</span>(u) = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Usage:</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n, m, u, v;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">        <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">            cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">            G[u].<span class="built_in">emplace_back</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Run Tarjan&#x27;s SCC algorithm</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="comment">// Process node i if the node i has not been visited</span></span><br><span class="line">            <span class="keyword">if</span> (!dfs_rank.<span class="built_in">at</span>(i)) &#123;</span><br><span class="line">                <span class="built_in">Tarjan</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A collection of containers and procedures that implements the topological</span></span><br><span class="line"><span class="comment">// sort using Kahn&#x27;s algorithm</span></span><br><span class="line"><span class="keyword">namespace</span> Toposort_Kahn &#123;</span><br><span class="line">    <span class="comment">// adjacency list of the graph</span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, unordered_set&lt;<span class="type">int</span>, custom_hash&gt;, custom_hash&gt; G;</span><br><span class="line">    <span class="type">int</span> number_of_nodes;    <span class="comment">// assume that the node id starts from 1</span></span><br><span class="line">    <span class="comment">// the number of incoming edges of each node, should be calculated during</span></span><br><span class="line">    <span class="comment">// the construction of the graph, not forget that the node id starts from 1</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; in_degree;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; result; <span class="comment">// store the result after toposort</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        G.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(in_degree);</span><br><span class="line">        number_of_nodes = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        number_of_nodes = n;</span><br><span class="line">        in_degree.<span class="built_in">resize</span>(n + <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Main logic of Kahn&#x27;s algorithm: O(V+E), return true if it does not</span></span><br><span class="line">    <span class="comment">// have a cycle, otherwise false</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">kahn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= number_of_nodes; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (in_degree.<span class="built_in">at</span>(i) == <span class="number">0</span>) &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            result.<span class="built_in">emplace_back</span>(u);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;adj_v : G[u]) &#123;</span><br><span class="line">                --in_degree.<span class="built_in">at</span>(adj_v);</span><br><span class="line">                <span class="keyword">if</span> (in_degree.<span class="built_in">at</span>(adj_v) == <span class="number">0</span>) &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(adj_v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(result.<span class="built_in">size</span>()) == number_of_nodes);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Kahn&#x27;s algo if G is an undirected graph (also can be used to find nodes in the cycle)</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">kahn2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">vis</span><span class="params">(number_of_nodes+<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= number_of_nodes; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (in_degree.<span class="built_in">at</span>(i) &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> visCounter = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">            vis[u] = <span class="literal">true</span>;</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            ++visCounter;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;adj_v : G[u]) &#123;</span><br><span class="line">                --in_degree.<span class="built_in">at</span>(adj_v);</span><br><span class="line">                <span class="keyword">if</span> (in_degree.<span class="built_in">at</span>(adj_v) == <span class="number">1</span>) &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(adj_v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// if vis[i] is false (i is not visited), then i is a node in cycles</span></span><br><span class="line">        <span class="keyword">return</span> visCounter == number_of_nodes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Main logic of Kahn&#x27;s algorithm but the output should be lexicographically</span></span><br><span class="line">    <span class="comment">// smallest among all possible results after toposort: O(|V|log|V|+|E|)    </span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">kahn_with_lexicographically_smallest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;&gt; &gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= number_of_nodes; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (in_degree.<span class="built_in">at</span>(i) == <span class="number">0</span>) &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = q.<span class="built_in">top</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            result.<span class="built_in">emplace_back</span>(u);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;adj_v : G[u]) &#123;</span><br><span class="line">                --in_degree.<span class="built_in">at</span>(adj_v);</span><br><span class="line">                <span class="keyword">if</span> (in_degree.<span class="built_in">at</span>(adj_v) == <span class="number">0</span>) &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(adj_v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(result.<span class="built_in">size</span>()) == number_of_nodes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">construct_the_graph</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Toposort_Kahn::<span class="built_in">init</span>(<span class="number">6</span>);</span><br><span class="line">    Toposort_Kahn::G[<span class="number">6</span>].<span class="built_in">insert</span>(<span class="number">3</span>);</span><br><span class="line">    ++Toposort_Kahn::in_degree.<span class="built_in">at</span>(<span class="number">3</span>);</span><br><span class="line">    Toposort_Kahn::G[<span class="number">6</span>].<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line">    ++Toposort_Kahn::in_degree.<span class="built_in">at</span>(<span class="number">1</span>);</span><br><span class="line">    Toposort_Kahn::G[<span class="number">5</span>].<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line">    ++Toposort_Kahn::in_degree.<span class="built_in">at</span>(<span class="number">1</span>);</span><br><span class="line">    Toposort_Kahn::G[<span class="number">5</span>].<span class="built_in">insert</span>(<span class="number">2</span>);</span><br><span class="line">    ++Toposort_Kahn::in_degree.<span class="built_in">at</span>(<span class="number">2</span>);</span><br><span class="line">    Toposort_Kahn::G[<span class="number">3</span>].<span class="built_in">insert</span>(<span class="number">4</span>);</span><br><span class="line">    ++Toposort_Kahn::in_degree.<span class="built_in">at</span>(<span class="number">4</span>);</span><br><span class="line">    Toposort_Kahn::G[<span class="number">4</span>].<span class="built_in">insert</span>(<span class="number">2</span>);</span><br><span class="line">    ++Toposort_Kahn::in_degree.<span class="built_in">at</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_for_toposort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">construct_the_graph</span>();</span><br><span class="line">    <span class="built_in">assert</span>(Toposort_Kahn::<span class="built_in">kahn</span>());</span><br><span class="line">    Toposort_Kahn::<span class="built_in">reset</span>();</span><br><span class="line">    <span class="built_in">construct_the_graph</span>();</span><br><span class="line">    <span class="built_in">assert</span>(Toposort_Kahn::<span class="built_in">kahn_with_lexicographically_smallest</span>());</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; result = &#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    <span class="built_in">assert</span>(Toposort_Kahn::result == result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A collection of containers and procedures that implements the topological</span></span><br><span class="line"><span class="comment">// sort using DFS</span></span><br><span class="line"><span class="keyword">namespace</span> Toposort_Dfs &#123;</span><br><span class="line">    <span class="comment">// adjacency list of the graph</span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, unordered_set&lt;<span class="type">int</span>, custom_hash&gt;, custom_hash&gt; G;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vis;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; result;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        vis[u] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;v : G[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[v] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (vis[v] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!dfs[v]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        result.<span class="built_in">emplace_back</span>(u);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">toposort</span><span class="params">(<span class="type">int</span> number_of_nodes)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// reset</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(vis);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(result);</span><br><span class="line">        vis.<span class="built_in">resize</span>(number_of_nodes);</span><br><span class="line">        <span class="comment">// start DFS from 0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; number_of_nodes; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">dfs</span>(i)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(result.<span class="built_in">begin</span>(), result.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The implementation of Dijkstra using adjacency list (based on the index)</span></span><br><span class="line"><span class="keyword">namespace</span> SSSP_Dijkstra_0 &#123;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>; <span class="comment">//  A weight indicates two nodes have no paths between them</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> to, distance, next;</span><br><span class="line"></span><br><span class="line">        <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> Edge &amp;other) <span class="type">const</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> to == other.to &amp;&amp; distance == other.distance &amp;&amp;</span><br><span class="line">                   next == other.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> distance, position;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">explicit</span> <span class="title">Node</span><span class="params">(<span class="type">int</span> distance, <span class="type">int</span> position)</span> : distance(distance),</span></span><br><span class="line"><span class="function">                                                    position(position) &#123;</span>&#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Node &amp;other) <span class="type">const</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (other.distance &lt; distance);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Containers to store the graph</span></span><br><span class="line">    vector&lt;Edge&gt; E;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; head;</span><br><span class="line">    <span class="type">int</span> counter;</span><br><span class="line">    <span class="type">int</span> number_of_nodes;</span><br><span class="line">    <span class="type">int</span> number_of_edges;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; dis;    <span class="comment">// dis.at(n) = the shortest distance from source to n</span></span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; vis;</span><br><span class="line">    <span class="type">int</span> source;         <span class="comment">// the node id of the source</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; prev;   <span class="comment">// an auxiliary container to store the path</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// __gnu_pbds::priority_queue&lt;Node, less&lt;&gt;, pairing_heap_tag&gt; pq; // Alternative option if you want to use pairing heap</span></span><br><span class="line">    std::priority_queue&lt;Node&gt; pq;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> e, <span class="type">bool</span> store_path = <span class="literal">false</span>)</span> </span>&#123;</span><br><span class="line">        number_of_nodes = n;</span><br><span class="line">        number_of_edges = e;</span><br><span class="line">        <span class="comment">// initialize the containers</span></span><br><span class="line">        E.<span class="built_in">resize</span>(number_of_edges + <span class="number">5</span>);</span><br><span class="line">        head.<span class="built_in">resize</span>(number_of_nodes + <span class="number">5</span>);</span><br><span class="line">        dis.<span class="built_in">resize</span>(number_of_nodes + <span class="number">5</span>, INF);</span><br><span class="line">        vis.<span class="built_in">resize</span>(number_of_nodes + <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">if</span> (store_path) &#123;</span><br><span class="line">            prev.<span class="built_in">resize</span>(number_of_nodes, <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">(<span class="type">bool</span> store_path = <span class="literal">false</span>)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">fill</span>(dis.<span class="built_in">begin</span>(), dis.<span class="built_in">end</span>(), INF);</span><br><span class="line">        <span class="built_in">fill</span>(vis.<span class="built_in">begin</span>(), vis.<span class="built_in">end</span>(), <span class="literal">false</span>);</span><br><span class="line">        std::<span class="built_in">priority_queue</span>&lt;Node&gt;().<span class="built_in">swap</span>(pq);</span><br><span class="line">        <span class="keyword">if</span> (store_path) &#123;</span><br><span class="line">            <span class="built_in">fill</span>(prev.<span class="built_in">begin</span>(), prev.<span class="built_in">end</span>(), <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">        ++counter;</span><br><span class="line">        E.<span class="built_in">at</span>(counter).distance = w;</span><br><span class="line">        E.<span class="built_in">at</span>(counter).to = v;</span><br><span class="line">        E.<span class="built_in">at</span>(counter).next = head.<span class="built_in">at</span>(u);</span><br><span class="line">        head.<span class="built_in">at</span>(u) = counter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span></span></span><br><span class="line"><span class="function">    <span class="title">dijkstra</span><span class="params">(<span class="type">bool</span> store_path = <span class="literal">false</span>)</span> </span>&#123;</span><br><span class="line">        dis.<span class="built_in">at</span>(source) = <span class="number">0</span>;</span><br><span class="line">        pq.<span class="built_in">push</span>(<span class="built_in">Node</span>(dis.<span class="built_in">at</span>(source), source));</span><br><span class="line">        <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            Node temp_node = pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> x = temp_node.position;</span><br><span class="line">            <span class="keyword">if</span> (vis.<span class="built_in">at</span>(x)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            vis.<span class="built_in">at</span>(x) = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = head.<span class="built_in">at</span>(x); i; i = E.<span class="built_in">at</span>(i).next) &#123;</span><br><span class="line">                <span class="type">int</span> y = E.<span class="built_in">at</span>(i).to;</span><br><span class="line">                <span class="keyword">if</span> (dis.<span class="built_in">at</span>(y) &gt; dis.<span class="built_in">at</span>(x) + E.<span class="built_in">at</span>(i).distance) &#123;</span><br><span class="line">                    dis.<span class="built_in">at</span>(y) = dis.<span class="built_in">at</span>(x) + E.<span class="built_in">at</span>(i).distance;</span><br><span class="line">                    <span class="keyword">if</span> (store_path) &#123;</span><br><span class="line">                        prev.<span class="built_in">at</span>(y) = x;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!vis.<span class="built_in">at</span>(y)) &#123;</span><br><span class="line">                        pq.<span class="built_in">push</span>(<span class="built_in">Node</span>(dis.<span class="built_in">at</span>(y), y));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt;</span></span><br><span class="line"><span class="function">    <span class="title">get_path</span><span class="params">(<span class="type">int</span> destination)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        <span class="keyword">for</span> (; destination != <span class="number">-1</span>; destination = prev.<span class="built_in">at</span>(destination)) &#123;</span><br><span class="line">            path.<span class="built_in">emplace_back</span>(destination);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(path.<span class="built_in">begin</span>(), path.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> path;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The implementation of Dijkstra using adjacency list</span></span><br><span class="line"><span class="keyword">namespace</span> SSSP_Dijkstra_1 &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>; <span class="comment">//  A weight indicates two nodes have no paths between them</span></span><br><span class="line">    vector&lt;vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt; &gt; adj; <span class="comment">// The adjacency list of the graph</span></span><br><span class="line">    <span class="type">int</span> number_of_nodes;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; dis;    <span class="comment">// dis.at(n) = the shortest distance from source to n</span></span><br><span class="line">    <span class="type">int</span> source;         <span class="comment">// the node id of the source</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; prev;   <span class="comment">// an auxiliary container to store the path</span></span><br><span class="line">    std::priority_queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt;, greater&lt;&gt; &gt; pq;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span></span></span><br><span class="line"><span class="function">    <span class="title">init</span><span class="params">(<span class="type">int</span> n, <span class="type">bool</span> store_path = <span class="literal">false</span>)</span> </span>&#123;</span><br><span class="line">        number_of_nodes = n;</span><br><span class="line">        <span class="comment">// initialize the containers</span></span><br><span class="line">        adj.<span class="built_in">resize</span>(number_of_nodes + <span class="number">5</span>);</span><br><span class="line">        dis.<span class="built_in">resize</span>(number_of_nodes + <span class="number">5</span>, INF);</span><br><span class="line">        <span class="keyword">if</span> (store_path) &#123;</span><br><span class="line">            prev.<span class="built_in">resize</span>(number_of_nodes, <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span></span></span><br><span class="line"><span class="function">    <span class="title">reset</span><span class="params">(<span class="type">bool</span> store_path = <span class="literal">false</span>)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">fill</span>(dis.<span class="built_in">begin</span>(), dis.<span class="built_in">end</span>(), INF);</span><br><span class="line">        <span class="keyword">decltype</span>(pq)().<span class="built_in">swap</span>(pq);</span><br><span class="line">        <span class="keyword">if</span> (store_path) &#123;</span><br><span class="line">            <span class="built_in">fill</span>(prev.<span class="built_in">begin</span>(), prev.<span class="built_in">end</span>(), <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span></span></span><br><span class="line"><span class="function">    <span class="title">add_edge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">        adj.<span class="built_in">at</span>(u).<span class="built_in">emplace_back</span>(<span class="built_in">make_pair</span>(v, w));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span></span></span><br><span class="line"><span class="function">    <span class="title">dijkstra</span><span class="params">(<span class="type">bool</span> store_path = <span class="literal">false</span>)</span> </span>&#123;</span><br><span class="line">        dis.<span class="built_in">at</span>(source) = <span class="number">0</span>;</span><br><span class="line">        pq.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(dis.<span class="built_in">at</span>(source), source));</span><br><span class="line">        <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> d_v = pq.<span class="built_in">top</span>().first;</span><br><span class="line">            <span class="type">int</span> v = pq.<span class="built_in">top</span>().second;</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (d_v != dis.<span class="built_in">at</span>(v)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;[to, weight] : adj.<span class="built_in">at</span>(v)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dis.<span class="built_in">at</span>(to) &gt; dis.<span class="built_in">at</span>(v) + weight) &#123;</span><br><span class="line">                    dis.<span class="built_in">at</span>(to) = dis.<span class="built_in">at</span>(v) + weight;</span><br><span class="line">                    <span class="keyword">if</span> (store_path) &#123;</span><br><span class="line">                        prev.<span class="built_in">at</span>(to) = v;</span><br><span class="line">                    &#125;</span><br><span class="line">                    pq.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(dis.<span class="built_in">at</span>(to), to));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt;</span></span><br><span class="line"><span class="function">    <span class="title">get_path</span><span class="params">(<span class="type">int</span> destination)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        <span class="keyword">for</span> (; destination != <span class="number">-1</span>; destination = prev.<span class="built_in">at</span>(destination)) &#123;</span><br><span class="line">            path.<span class="built_in">emplace_back</span>(destination);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(path.<span class="built_in">begin</span>(), path.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> path;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// An implementation of Bellman Ford&#x27;s algorithm</span></span><br><span class="line"><span class="keyword">namespace</span> SSSP_Bellman_Ford &#123;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    vector&lt;vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt; &gt; AL;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; dist;</span><br><span class="line">    <span class="type">int</span> n, source;</span><br><span class="line">    <span class="comment">// Return false if there is a negative cycle</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">bellman_ford</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dist.<span class="built_in">resize</span>(n, INF);</span><br><span class="line">        dist.<span class="built_in">at</span>(source) = <span class="number">0</span>;</span><br><span class="line">        <span class="type">bool</span> relaxed;</span><br><span class="line">        <span class="comment">// relax all E edges V-1 times</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            relaxed = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> u = <span class="number">0</span>; u &lt; n; ++u) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dist.<span class="built_in">at</span>(u) != INF) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;[v, w] : AL.<span class="built_in">at</span>(u)) &#123;</span><br><span class="line">                        <span class="comment">// relax</span></span><br><span class="line">                        <span class="keyword">if</span> (dist.<span class="built_in">at</span>(v) &gt; dist.<span class="built_in">at</span>(u) + w) &#123;</span><br><span class="line">                            dist.<span class="built_in">at</span>(v) = dist.<span class="built_in">at</span>(u) + w;</span><br><span class="line">                            relaxed = <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!relaxed) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> u = <span class="number">0</span>; u &lt; n; ++u) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dist.<span class="built_in">at</span>(u) != INF) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;[v, w] : AL.<span class="built_in">at</span>(u)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (dist.<span class="built_in">at</span>(v) &gt; dist.<span class="built_in">at</span>(u) + w) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// An implementation of Shortest Path Faster Algorithm (Bellman-Ford&#x27;s algorithm with queue optimized)</span></span><br><span class="line"><span class="comment">// If you want to query the longest path from a single source, change INF to -INF and change the condition of relaxing from &gt; to &lt;</span></span><br><span class="line"><span class="keyword">namespace</span> SSSP_SPFA &#123;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    vector&lt;vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt; &gt; adj; <span class="comment">// The adjacency list of the graph</span></span><br><span class="line">    <span class="type">int</span> source;</span><br><span class="line">    <span class="type">int</span> number_of_nodes;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; dis;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span></span></span><br><span class="line"><span class="function">    <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">decltype</span>(adj)().<span class="built_in">swap</span>(adj);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(dis);</span><br><span class="line">        number_of_nodes = <span class="number">0</span>;</span><br><span class="line">        source = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span></span></span><br><span class="line"><span class="function">    <span class="title">init</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> s)</span> </span>&#123;</span><br><span class="line">        source = s;</span><br><span class="line">        number_of_nodes = n;</span><br><span class="line">        adj.<span class="built_in">resize</span>(number_of_nodes + <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span></span></span><br><span class="line"><span class="function">    <span class="title">add_edge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">        adj.<span class="built_in">at</span>(u).<span class="built_in">emplace_back</span>(<span class="built_in">make_pair</span>(v, w));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// O(mn)</span></span><br><span class="line">    <span class="function"><span class="type">bool</span></span></span><br><span class="line"><span class="function">    <span class="title">spfa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dis.<span class="built_in">resize</span>(number_of_nodes + <span class="number">5</span>, INF);</span><br><span class="line">        dis.<span class="built_in">at</span>(source) = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cnt</span><span class="params">(number_of_nodes + <span class="number">5</span>)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">in_queue</span><span class="params">(number_of_nodes + <span class="number">5</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(source);</span><br><span class="line">        in_queue.<span class="built_in">at</span>(source) = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            in_queue.<span class="built_in">at</span>(u) = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;[v, w] : adj.<span class="built_in">at</span>(u)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dis.<span class="built_in">at</span>(u) + w &lt; dis.<span class="built_in">at</span>(v)) &#123;</span><br><span class="line">                    dis.<span class="built_in">at</span>(v) = dis.<span class="built_in">at</span>(u) + w;</span><br><span class="line">                    <span class="keyword">if</span> (!in_queue.<span class="built_in">at</span>(v)) &#123;</span><br><span class="line">                        q.<span class="built_in">push</span>(v);</span><br><span class="line">                        in_queue.<span class="built_in">at</span>(v) = <span class="literal">true</span>;</span><br><span class="line">                        ++cnt.<span class="built_in">at</span>(v);</span><br><span class="line">                        <span class="keyword">if</span> (cnt.<span class="built_in">at</span>(v) &gt; number_of_nodes) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;   <span class="comment">// a negative cycle exists</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Construction of a random antimagic-square from 1 to N * N</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; <span class="built_in">antimagic_square</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; <span class="built_in">res</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n));</span><br><span class="line">    <span class="type">int</span> end_value = n * n - n + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> current_value = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - <span class="number">1</span>; ++j) &#123;</span><br><span class="line">            res.<span class="built_in">at</span>(i).<span class="built_in">at</span>(j) = current_value;</span><br><span class="line">            ++current_value;</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="built_in">at</span>(i).<span class="built_in">at</span>(n - <span class="number">1</span>) = end_value;</span><br><span class="line">        ++end_value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pre-calculate the sum of factors of each number from 1 to n</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sum_of_factors</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> length = n + <span class="number">5</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">result</span><span class="params">(length)</span></span>;  <span class="comment">// result[k] = sum of factors of k</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; length; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; i * j &lt; length; ++j) &#123;</span><br><span class="line">            result.<span class="built_in">at</span>(i * j) += i;  <span class="comment">// add the factor i</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// using Log2 = __lg2</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SparseTable</span> &#123;</span><br><span class="line">    vector&lt;vector&lt;ll&gt; &gt; spt;</span><br><span class="line">    vector&lt;ll&gt; Log2;</span><br><span class="line">    <span class="type">int</span> n, logn;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">SparseTable</span><span class="params">(<span class="type">int</span> n)</span> : n(n) &#123;</span></span><br><span class="line">        Log2.<span class="built_in">resize</span>(n + <span class="number">5</span>);</span><br><span class="line">        Log2.<span class="built_in">at</span>(<span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">        Log2.<span class="built_in">at</span>(<span class="number">2</span>) = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt; n + <span class="number">5</span>; ++i)</span><br><span class="line">            Log2.<span class="built_in">at</span>(i) = Log2.<span class="built_in">at</span>(i &gt;&gt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        logn = <span class="built_in">floor</span>(<span class="built_in">log2</span>(n) + <span class="number">2</span>);</span><br><span class="line">        spt.<span class="built_in">resize</span>(n + <span class="number">5</span>, <span class="built_in">vector</span>&lt;ll&gt;(logn));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">input</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            cin &gt;&gt; spt.<span class="built_in">at</span>(i).<span class="built_in">at</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 也可以求区间和 区间或 区间gcd/lcm 区间最小 </span></span><br><span class="line">    <span class="comment">// 只需修改spt.at(i).at(j - 1)和spt.at(i + (1 &lt;&lt; (j - 1))).at(j - 1)的二元运算符即可</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= logn; ++j) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= n; ++i) &#123;</span><br><span class="line">                spt.<span class="built_in">at</span>(i).<span class="built_in">at</span>(j) = <span class="built_in">max</span>(spt.<span class="built_in">at</span>(i).<span class="built_in">at</span>(j - <span class="number">1</span>),</span><br><span class="line">                                      spt.<span class="built_in">at</span>(i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))).<span class="built_in">at</span>(j - <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">query</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> s = Log2.<span class="built_in">at</span>(r - l + <span class="number">1</span>);</span><br><span class="line">        ll ans = <span class="built_in">max</span>(spt.<span class="built_in">at</span>(l).<span class="built_in">at</span>(s), spt.<span class="built_in">at</span>(r - (<span class="number">1</span> &lt;&lt; s) + <span class="number">1</span>).<span class="built_in">at</span>(s));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Preprocess takes O(nmlog(n)log(m))</span></span><br><span class="line"><span class="comment">// Query index starts from 1</span></span><br><span class="line"><span class="comment">// The usage is similar to SparseTable 1D</span></span><br><span class="line"><span class="comment">// If the upperbound of n and m is fixed, use C style multiple dimension arrays instead!</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SparseTable2D</span> &#123;</span><br><span class="line">    vector&lt;ll&gt; Log2;</span><br><span class="line">    vector&lt;vector&lt;vector&lt;vector&lt;ll&gt;&gt;&gt;&gt; spt;</span><br><span class="line">    <span class="type">int</span> n, m, logn, logm;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> maxSize = <span class="built_in">max</span>(n, m);</span><br><span class="line">        Log2.<span class="built_in">resize</span>(maxSize + <span class="number">5</span>);</span><br><span class="line">        Log2[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        Log2[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt; maxSize + <span class="number">5</span>; ++i)</span><br><span class="line">            Log2[i] = Log2[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        logn = <span class="built_in">floor</span>(<span class="built_in">log2</span>(n) + <span class="number">2</span>);</span><br><span class="line">        logm = <span class="built_in">floor</span>(<span class="built_in">log2</span>(m) + <span class="number">2</span>);</span><br><span class="line">        spt.<span class="built_in">resize</span>(n + <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i:spt) i.<span class="built_in">resize</span>(m + <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i:spt) <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;j:i) j.<span class="built_in">resize</span>(logn);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i:spt) <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;j:i) <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;k:j) k.<span class="built_in">resize</span>(logm);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">SparseTable2D</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">SparseTable2D</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span> : n(n), m(m) &#123;</span></span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// input 2d array of n*m elements</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">input</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">                cin &gt;&gt; spt.<span class="built_in">at</span>(i).<span class="built_in">at</span>(j).<span class="built_in">at</span>(<span class="number">0</span>).<span class="built_in">at</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt;= logn; ++k) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> f = <span class="number">0</span>; f &lt;= logm; ++f) &#123;</span><br><span class="line">                <span class="keyword">if</span> (k + f) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; k) - <span class="number">1</span> &lt;= n; ++i) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j + (<span class="number">1</span> &lt;&lt; f) - <span class="number">1</span> &lt;= m; ++j) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (k) &#123;</span><br><span class="line">                                spt[i][j][k][f] = <span class="built_in">max</span>(spt[i][j][k - <span class="number">1</span>][f],</span><br><span class="line">                                                      spt[i + (<span class="number">1</span> &lt;&lt; (k - <span class="number">1</span>))][j][k - <span class="number">1</span>][f]);</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                spt[i][j][k][f] = <span class="built_in">max</span>(spt[i][j][k][f - <span class="number">1</span>],</span><br><span class="line">                                                      spt[i][j + (<span class="number">1</span> &lt;&lt; (f - <span class="number">1</span>))][k][f - <span class="number">1</span>]);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Pre: r1 &lt;= r2, c1 &lt;= c2</span></span><br><span class="line">    <span class="function">ll <span class="title">queryMax</span><span class="params">(<span class="type">int</span> r1, <span class="type">int</span> c1, <span class="type">int</span> r2, <span class="type">int</span> c2)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">assert</span>(r1 &lt;= r2);</span><br><span class="line">        <span class="built_in">assert</span>(c1 &lt;= c2);</span><br><span class="line">        ll k1 = Log2.<span class="built_in">at</span>(r2 - r1 + <span class="number">1</span>);</span><br><span class="line">        ll k2 = Log2.<span class="built_in">at</span>(c2 - c1 + <span class="number">1</span>);</span><br><span class="line">        r2 = r2 - (<span class="type">int</span>) (<span class="number">1</span> &lt;&lt; k1) + <span class="number">1</span>;</span><br><span class="line">        c2 = c2 - (<span class="type">int</span>) (<span class="number">1</span> &lt;&lt; k2) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(&#123;spt[r1][c1][k1][k2], spt[r1][c2][k1][k2], spt[r2][c1][k1][k2], spt[r2][c2][k1][k2]&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate fixed-size array in compile-time</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> N&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FibStruct</span> &#123;</span><br><span class="line">    array&lt;<span class="type">unsigned</span> <span class="type">int</span>, N&gt; A;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="title">FibStruct</span><span class="params">()</span> : A() &#123;</span></span><br><span class="line">        A.<span class="built_in">at</span>(<span class="number">0</span>) = <span class="number">0</span>;</span><br><span class="line">        A.<span class="built_in">at</span>(<span class="number">1</span>) = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; N; ++i) &#123;</span><br><span class="line">            A.<span class="built_in">at</span>(i) = A.<span class="built_in">at</span>(i - <span class="number">1</span>) + A.<span class="built_in">at</span>(i - <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> MAXN = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">constexpr</span> FibStruct&lt;MAXN&gt; s = <span class="built_in">FibStruct</span>&lt;MAXN&gt;();</span><br><span class="line"><span class="built_in">static_assert</span>(s.A.<span class="built_in">at</span>(MAXN - <span class="number">1</span>) == <span class="number">514229</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Twice DFS to query the diameter of a tree with different weight on each edge : O(n) </span></span><br><span class="line"><span class="keyword">namespace</span> TreeDiameter0 &#123;</span><br><span class="line">    vector&lt;vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt; &gt; adj;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; d;</span><br><span class="line">    <span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> v, w;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;i : adj.<span class="built_in">at</span>(u)) &#123;</span><br><span class="line">            v = i.first;</span><br><span class="line">            w = i.second;</span><br><span class="line">            <span class="keyword">if</span> (d.<span class="built_in">at</span>(v) == <span class="number">0</span>) &#123;</span><br><span class="line">                d.<span class="built_in">at</span>(v) = d.<span class="built_in">at</span>(u) + w;</span><br><span class="line">                <span class="keyword">if</span> (d.<span class="built_in">at</span>(v) &gt; d.<span class="built_in">at</span>(c)) &#123;</span><br><span class="line">                    c = v;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">dfs</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">diameter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        d.<span class="built_in">at</span>(<span class="number">0</span>) = <span class="number">1</span>;    <span class="comment">// node id starts from 0</span></span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fill</span>(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        d.<span class="built_in">at</span>(c) = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(c);</span><br><span class="line">        <span class="keyword">return</span> d.<span class="built_in">at</span>(c) - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        adj.<span class="built_in">resize</span>(n + <span class="number">5</span>);</span><br><span class="line">        d.<span class="built_in">resize</span>(n + <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The maximum distances from every vertex are stored in maxDist[]</span></span><br><span class="line"><span class="comment">// Time cost: O(n)</span></span><br><span class="line"><span class="keyword">namespace</span> Eccentricity &#123;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">int</span> WEIGHT = <span class="number">1</span>;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; AL;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; edged, maxDist;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n_)</span> </span>&#123;</span><br><span class="line">        n = n_;</span><br><span class="line">        <span class="keyword">decltype</span>(AL)().<span class="built_in">swap</span>(AL);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(edged);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(maxDist);</span><br><span class="line">        edged.<span class="built_in">resize</span>(n,<span class="number">-1</span>);</span><br><span class="line">        maxDist.<span class="built_in">resize</span>(n);</span><br><span class="line">        AL.<span class="built_in">resize</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Obtain the longest path from the subtree with u as root to its leaves</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> fa)</span> </span>&#123;</span><br><span class="line">        edged[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;v : AL[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v == fa) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            edged[u] = <span class="built_in">max</span>(edged[u],WEIGHT+<span class="built_in">dfs1</span>(v,u));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> edged[u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> fa, <span class="type">int</span> pd)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> maxEdges[<span class="number">2</span>] = &#123;pd,<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> nwmg = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;v : AL[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v == fa) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (edged[v]+<span class="number">1</span>&gt;maxEdges[<span class="number">0</span>]) &#123;</span><br><span class="line">                maxEdges[<span class="number">1</span>] = maxEdges[<span class="number">0</span>];</span><br><span class="line">                maxEdges[<span class="number">0</span>] = edged[v]+WEIGHT;</span><br><span class="line">                nwmg = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (edged[v]+WEIGHT==maxEdges[<span class="number">0</span>]) &#123;</span><br><span class="line">                ++nwmg;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (edged[v]+WEIGHT&gt;maxEdges[<span class="number">1</span>]) &#123;</span><br><span class="line">                maxEdges[<span class="number">1</span>]=edged[v]+WEIGHT;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;v : AL[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v == fa) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> upd = maxEdges[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (upd == edged[v]+<span class="number">1</span> &amp;&amp; nwmg == <span class="number">1</span>) &#123;</span><br><span class="line">                upd = maxEdges[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">dfs2</span>(v,u,upd+WEIGHT);</span><br><span class="line">        &#125;</span><br><span class="line">        maxDist[u] = <span class="built_in">max</span>(pd, maxEdges[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (edged[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="built_in">dfs1</span>(i,<span class="number">-1</span>);</span><br><span class="line">                <span class="built_in">dfs2</span>(i,<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Interval</span> &#123;</span><br><span class="line">    <span class="type">int</span> start;</span><br><span class="line">    <span class="type">int</span> end;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> n, vector&lt;Interval&gt;&amp; Tree_edge, vector&lt;<span class="type">int</span>&gt;&amp; Edge_value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    TreeDiameter::<span class="built_in">init</span>(n);</span><br><span class="line">    <span class="type">int</span> u, v, w;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        u = Tree_edge.<span class="built_in">at</span>(i).start;</span><br><span class="line">        v = Tree_edge.<span class="built_in">at</span>(i).end;</span><br><span class="line">        w = Edge_value.<span class="built_in">at</span>(i);</span><br><span class="line">        TreeDiameter::adj.<span class="built_in">at</span>(u).<span class="built_in">emplace_back</span>(<span class="built_in">make_pair</span>(v, w));</span><br><span class="line">        TreeDiameter::adj.<span class="built_in">at</span>(v).<span class="built_in">emplace_back</span>(<span class="built_in">make_pair</span>(u, w));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TreeDiameter::<span class="built_in">diameter</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Obtain the tree diameter by DP</span></span><br><span class="line"><span class="keyword">namespace</span> TreeDiameter1 &#123;</span><br><span class="line">    <span class="comment">// the longest distance each node can reach</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; d1;</span><br><span class="line">    <span class="comment">// the second longest distance each node can reach</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; d2;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; adj;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        adj.<span class="built_in">resize</span>(n);</span><br><span class="line">        d1.<span class="built_in">resize</span>(n);</span><br><span class="line">        d2.<span class="built_in">resize</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> father_of_u)</span> </span>&#123;</span><br><span class="line">        d1.<span class="built_in">at</span>(u) = <span class="number">0</span>;</span><br><span class="line">        d2.<span class="built_in">at</span>(u) = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;v : adj.<span class="built_in">at</span>(u)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v == father_of_u) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(v, u);</span><br><span class="line">            <span class="type">int</span> temp = d1.<span class="built_in">at</span>(v) + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (temp &gt; d1.<span class="built_in">at</span>(u)) &#123;</span><br><span class="line">                d2.<span class="built_in">at</span>(u) = d1.<span class="built_in">at</span>(u);</span><br><span class="line">                d1.<span class="built_in">at</span>(u) = temp;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temp &gt; d2.<span class="built_in">at</span>(u)) &#123;</span><br><span class="line">                d2.<span class="built_in">at</span>(u) = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Usage:</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n, m, u, v;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">        <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">            cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">            adj[u].<span class="built_in">emplace_back</span>(v);</span><br><span class="line">            adj[v].<span class="built_in">emplace_back</span>(u);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// randomly pick one node </span></span><br><span class="line">        <span class="comment">// in the graph as root (we assume the tree is un-rooted)</span></span><br><span class="line">        <span class="type">int</span> dummy_root = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(dummy_root, <span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> diameter = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            diameter = <span class="built_in">max</span>(diameter, d1.<span class="built_in">at</span>(i) + d2.<span class="built_in">at</span>(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fib(2k) = Fib(k) * (2Fib(k+1) - Fib(k))</span></span><br><span class="line"><span class="comment">// Fib(2k+1) = Fib(k+1) * Fib(k+1) + F(k) * F(k)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> pair&lt;T, T&gt; <span class="title">fibInLog</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(n &gt;= <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> p = <span class="built_in">fibInLog</span>&lt;T&gt;(n / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">auto</span> a = p.first * (<span class="number">2</span> * p.second - p.first);</span><br><span class="line">    <span class="keyword">auto</span> b = p.first * p.first + p.second * p.second;</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;b, a + b&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;a, b&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">static_assert</span>(<span class="built_in">fibInLog</span>&lt;ll&gt;(<span class="number">80</span>).first == <span class="number">23416728348467685</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the minimal rotation of the string</span></span><br><span class="line"><span class="comment">// Booth&#x27;s algorithm : O(s.size())</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">minimalRotation</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    s += s; <span class="comment">// Concatenate string to it self to avoid modular arithmetic</span></span><br><span class="line">    <span class="type">int</span> length = (<span class="type">int</span>)s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">f</span><span class="params">(length, <span class="number">-1</span>)</span></span>;    <span class="comment">// Failure function</span></span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>;  <span class="comment">// Least rotation of string found so far</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>, i; j &lt; length; ++j) &#123;</span><br><span class="line">        <span class="type">char</span> sj = s.<span class="built_in">at</span>(j);</span><br><span class="line">        i = f.<span class="built_in">at</span>(j - k - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span> (i != <span class="number">-1</span> &amp;&amp; sj != s.<span class="built_in">at</span>(k + i + <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sj &lt; s.<span class="built_in">at</span>(k + i + <span class="number">1</span>)) &#123;</span><br><span class="line">                k = j - i - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i = f.<span class="built_in">at</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sj != s.<span class="built_in">at</span>(k + i + <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sj &lt; s.<span class="built_in">at</span>(k)) &#123;</span><br><span class="line">                k = j;</span><br><span class="line">            &#125;</span><br><span class="line">            f.<span class="built_in">at</span>(j - k) = <span class="number">-1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            f.<span class="built_in">at</span>(j - k) = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Check if two strings are rotated</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">rotateString</span><span class="params">(string A, string B)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (A.<span class="built_in">size</span>() != B.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">rotate</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">begin</span>() + <span class="built_in">minimalRotation</span>(A), A.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">rotate</span>(B.<span class="built_in">begin</span>(), B.<span class="built_in">begin</span>() + <span class="built_in">minimalRotation</span>(B), B.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> A == B;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Stable Matching Problem</span></span><br><span class="line"><span class="comment">// Gale Shapley&#x27;s algorithm</span></span><br><span class="line"><span class="comment">// O(mw)</span></span><br><span class="line"><span class="keyword">namespace</span> SMP &#123;</span><br><span class="line">    vector&lt;queue&lt;<span class="type">int</span>&gt; &gt; m_pref;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; w_pref;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; engaged;    <span class="comment">// w to m</span></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; free_man;</span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; is_woman_free;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        vector&lt;queue&lt;<span class="type">int</span>&gt; &gt;().<span class="built_in">swap</span>(m_pref);</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt; &gt;().<span class="built_in">swap</span>(w_pref);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(engaged);</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(free_man);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;().<span class="built_in">swap</span>(is_woman_free);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        m_pref.<span class="built_in">resize</span>(n + <span class="number">1</span>);   <span class="comment">// man/woman&#x27;s id starts from 1</span></span><br><span class="line">        w_pref.<span class="built_in">resize</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n + <span class="number">1</span>));</span><br><span class="line">        engaged.<span class="built_in">resize</span>(n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            free_man.<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        is_woman_free.<span class="built_in">resize</span>(n + <span class="number">1</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">GaleShapley</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!free_man.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> m = free_man.<span class="built_in">front</span>();</span><br><span class="line">            <span class="keyword">if</span> (m_pref.<span class="built_in">at</span>(m).<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                free_man.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> w = m_pref.<span class="built_in">at</span>(</span><br><span class="line">                    m).<span class="built_in">front</span>();   <span class="comment">// first woman on m&#x27;s list to whom m has not yet proposed</span></span><br><span class="line">            <span class="keyword">if</span> (is_woman_free.<span class="built_in">at</span>(w)) &#123;</span><br><span class="line">                engaged.<span class="built_in">at</span>(w) = m;</span><br><span class="line">                m_pref.<span class="built_in">at</span>(m).<span class="built_in">pop</span>();</span><br><span class="line">                free_man.<span class="built_in">pop</span>();</span><br><span class="line">                is_woman_free.<span class="built_in">at</span>(w) = <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> m_ = engaged.<span class="built_in">at</span>(w);</span><br><span class="line">                <span class="keyword">if</span> (w_pref.<span class="built_in">at</span>(w).<span class="built_in">at</span>(m) &gt;</span><br><span class="line">                    w_pref.<span class="built_in">at</span>(w).<span class="built_in">at</span>(m_)) &#123; <span class="comment">// w prefers m to m_</span></span><br><span class="line">                    free_man.<span class="built_in">push</span>(m_);</span><br><span class="line">                    engaged.<span class="built_in">at</span>(w) = m;</span><br><span class="line">                    free_man.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                m_pref.<span class="built_in">at</span>(m).<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// n women, n men</span></span><br><span class="line">    <span class="comment">// men invite women</span></span><br><span class="line">    <span class="comment">// preferences of men to women will be given first, then the preferences of women to men</span></span><br><span class="line">    <span class="comment">// print the result of men to women</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n, val;</span><br><span class="line">        IO::<span class="built_in">read</span>(n);</span><br><span class="line">        SMP::<span class="built_in">init</span>(n);</span><br><span class="line">        <span class="comment">// men</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                IO::<span class="built_in">read</span>(val);</span><br><span class="line">                SMP::m_pref.<span class="built_in">at</span>(i).<span class="built_in">push</span>(val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// women</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                IO::<span class="built_in">read</span>(val);</span><br><span class="line">                SMP::w_pref.<span class="built_in">at</span>(i).<span class="built_in">at</span>(val) =</span><br><span class="line">                        n + <span class="number">1</span> - j;   <span class="comment">// notice here</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        SMP::<span class="built_in">GaleShapley</span>();</span><br><span class="line">        <span class="comment">// print result: m to w</span></span><br><span class="line">        vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt; <span class="built_in">result</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            result.<span class="built_in">at</span>(i - <span class="number">1</span>).first = i;</span><br><span class="line">            result.<span class="built_in">at</span>(i - <span class="number">1</span>).second = SMP::engaged.<span class="built_in">at</span>(i);</span><br><span class="line">            <span class="built_in">swap</span>(result.<span class="built_in">at</span>(i - <span class="number">1</span>).first, result.<span class="built_in">at</span>(i - <span class="number">1</span>).second);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(result.<span class="built_in">begin</span>(), result.<span class="built_in">end</span>());</span><br><span class="line">        IO::<span class="built_in">write</span>(result.<span class="built_in">at</span>(<span class="number">0</span>).second);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">putchar_unlocked</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">            IO::<span class="built_in">write</span>(result.<span class="built_in">at</span>(i).second);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar_unlocked</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Given the preferences of 2n people and n pairs of matching of them, check</span></span><br><span class="line"><span class="comment">// how many unstable pairs among n pairs:</span></span><br><span class="line"><span class="comment">// https://leetcode.com/problems/count-unhappy-friends/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Pseudo-code</span></span><br><span class="line"><span class="comment">for w in women:</span></span><br><span class="line"><span class="comment">    for m in [men w would prefer over current_partner(w)]:</span></span><br><span class="line"><span class="comment">        if m prefers w to current_partner(m) return false</span></span><br><span class="line"><span class="comment">return true</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Lucas&#x27;s theorem</span></span><br><span class="line"><span class="keyword">namespace</span> Lucas &#123;</span><br><span class="line">    vector&lt;ll&gt; fac;</span><br><span class="line">    <span class="comment">// preprocess</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span></span></span><br><span class="line"><span class="function">    <span class="type">void</span> <span class="title">init</span><span class="params">(ll p)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// reset</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;ll&gt;().<span class="built_in">swap</span>(fac);</span><br><span class="line">        fac.<span class="built_in">emplace_back</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= p; ++i) &#123;</span><br><span class="line">            fac.<span class="built_in">emplace_back</span>(fac.<span class="built_in">back</span>() * i % p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">static</span></span></span><br><span class="line"><span class="function">    ll <span class="title">modpow</span><span class="params">(ll a, ll p, ll M)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (M == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        ll r;</span><br><span class="line">        <span class="keyword">for</span> (r = <span class="number">1</span>, a %= M; p; a = (a * a) % M, p &gt;&gt;= <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> (p % <span class="number">2</span>)</span><br><span class="line">                r = (r * a) % M;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">static</span></span></span><br><span class="line"><span class="function">    ll <span class="title">C</span><span class="params">(ll n, ll m, ll p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m &gt; n) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fac[n] * <span class="built_in">modpow</span>(fac[m] * fac[n - m], p - <span class="number">2</span>, p) % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// C(n, m) % p</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">static</span></span></span><br><span class="line"><span class="function">    ll <span class="title">Lucas</span><span class="params">(ll n, ll m, ll p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">C</span>(n % p, m % p, p) * <span class="built_in">Lucas</span>(n / p, m / p, p)) % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Given n, m, p such that p is a prime, calculate C(n+m,n) mod p</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> t;</span><br><span class="line">        IO::<span class="built_in">read</span>(t);</span><br><span class="line">        ll n, m, p;</span><br><span class="line">        <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">            IO::<span class="built_in">read</span>(n, m, p);</span><br><span class="line">            Lucas::<span class="built_in">init</span>(p);</span><br><span class="line">            IO::<span class="built_in">writeln</span>(Lucas::<span class="built_in">Lucas</span>(n + m, n, p));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lowest Common Ancestor - Tarjan&#x27;s off-line algorithm</span></span><br><span class="line"><span class="comment">// O(n + m) for m queries</span></span><br><span class="line"><span class="keyword">namespace</span> LCA0 &#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; adj;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; ancestor;</span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; vis;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; queries;</span><br><span class="line">    unordered_map&lt;pii, <span class="type">int</span>, custom_hash&gt; unmap;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Tarjan</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        vis.<span class="built_in">at</span>(u) = <span class="literal">true</span>;</span><br><span class="line">        ancestor.<span class="built_in">at</span>(u) = u;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;v : adj.<span class="built_in">at</span>(u)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis.<span class="built_in">at</span>(v)) &#123;</span><br><span class="line">                <span class="built_in">Tarjan</span>(v);</span><br><span class="line">                DSU::<span class="built_in">merge</span>(u, v);</span><br><span class="line">                ancestor.<span class="built_in">at</span>(DSU::<span class="built_in">find</span>(u)) = u;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> v : queries.<span class="built_in">at</span>(u)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis.<span class="built_in">at</span>(v)) &#123;</span><br><span class="line">                unmap[&#123;u, v&#125;] = ancestor.<span class="built_in">at</span>(DSU::<span class="built_in">find</span>(v));</span><br><span class="line">                unmap[&#123;v, u&#125;] = ancestor.<span class="built_in">at</span>(DSU::<span class="built_in">find</span>(v));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        DSU::<span class="built_in">init</span>(n);</span><br><span class="line">        ancestor.<span class="built_in">resize</span>(n + <span class="number">5</span>);</span><br><span class="line">        vis.<span class="built_in">resize</span>(n + <span class="number">5</span>, <span class="literal">false</span>);</span><br><span class="line">        adj.<span class="built_in">resize</span>(n + <span class="number">5</span>);</span><br><span class="line">        queries.<span class="built_in">resize</span>(n + <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Usage:</span></span><br><span class="line">    <span class="comment">// n nodes, (n - 1) edges, the root is s, m queries,</span></span><br><span class="line">    <span class="comment">// for each query, u and v are given, print lca of u and v</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n, m, s, u, v;</span><br><span class="line">        IO::<span class="built_in">read</span>(n, m, s);</span><br><span class="line">        LCA0::<span class="built_in">init</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            IO::<span class="built_in">read</span>(u, v);</span><br><span class="line">            LCA0::adj.<span class="built_in">at</span>(u).<span class="built_in">emplace_back</span>(v);</span><br><span class="line">            LCA0::adj.<span class="built_in">at</span>(v).<span class="built_in">emplace_back</span>(u);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt; query_list;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            IO::<span class="built_in">read</span>(u, v);</span><br><span class="line">            query_list.<span class="built_in">emplace_back</span>(<span class="built_in">make_pair</span>(u, v));</span><br><span class="line">            LCA0::queries.<span class="built_in">at</span>(u).<span class="built_in">emplace_back</span>(v);</span><br><span class="line">            LCA0::queries.<span class="built_in">at</span>(v).<span class="built_in">emplace_back</span>(u);</span><br><span class="line">        &#125;</span><br><span class="line">        LCA0::<span class="built_in">Tarjan</span>(s);    <span class="comment">// Run Tarjan from root</span></span><br><span class="line">        <span class="comment">// output</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;[u, v] : query_list) &#123;</span><br><span class="line">            IO::<span class="built_in">writeln</span>(LCA0::unmap[&#123;u, v&#125;]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Obtain LCA by binary lifting, Preprocess O(nlogn), each query costs O(logn).</span></span><br><span class="line"><span class="keyword">namespace</span> LCA1 &#123;</span><br><span class="line">    <span class="comment">// dfn: dfs序计数器</span></span><br><span class="line">    <span class="type">int</span> dfn,l,n;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; dfsIn,dfsOut;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; AL;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; fa; <span class="comment">//fa[x][y] = 节点x的第2^y个祖先</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pre</span><span class="params">(<span class="type">int</span> numberOfNodes)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(dfsIn);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(dfsOut);</span><br><span class="line">        <span class="keyword">decltype</span>(fa)().<span class="built_in">swap</span>(fa);</span><br><span class="line">        <span class="keyword">decltype</span>(AL)().<span class="built_in">swap</span>(AL);</span><br><span class="line">        n = numberOfNodes;</span><br><span class="line">        dfn = <span class="number">0</span>;</span><br><span class="line">        l = <span class="built_in">ceil</span>(<span class="built_in">log2</span>(n));</span><br><span class="line">        dfsIn.<span class="built_in">resize</span>(n);</span><br><span class="line">        dfsOut.<span class="built_in">resize</span>(n);</span><br><span class="line">        AL.<span class="built_in">resize</span>(n);</span><br><span class="line">        fa.<span class="built_in">resize</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(l+<span class="number">1</span>));</span><br><span class="line">        vis.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 根据dfs出入序 可以确定u是否是v的祖先 作为祖先 必然先进后出</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isAncestorOf</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dfsIn[u] &lt;= dfsIn[v] &amp;&amp; dfsOut[u] &gt;= dfsOut[v];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> father)</span> </span>&#123;</span><br><span class="line">        dfsIn[u] = ++dfn;</span><br><span class="line">        fa[u][<span class="number">0</span>] = father;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= l; ++i) &#123;</span><br><span class="line">            fa[u][i] = fa[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;v : AL[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v != father) <span class="built_in">dfs</span>(v,u);</span><br><span class="line">        &#125;</span><br><span class="line">        dfsOut[u] = ++dfn;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isAncestorOf</span>(u,v)) <span class="keyword">return</span> u;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isAncestorOf</span>(v,u)) <span class="keyword">return</span> v;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = l; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">isAncestorOf</span>(fa[u][i],v)) &#123;</span><br><span class="line">                u = fa[u][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">dfs</span>(root,root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Factorization of an integer using Miller Rabin Prime Check + Pollard Rho</span></span><br><span class="line"><span class="keyword">namespace</span> Factorization &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">int</span> MAX_PRIME_FACTORS = <span class="number">1000</span>;</span><br><span class="line">    ll factor[MAX_PRIME_FACTORS];    <span class="comment">// Save the result of the factorization</span></span><br><span class="line">    <span class="type">int</span> tol;    <span class="comment">// Count of prime factors</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// O(1)</span></span><br><span class="line">    <span class="function">ll <span class="title">multmod</span><span class="params">(ll a, ll b, ll m)</span> </span>&#123;</span><br><span class="line">        a = (a % m + m) % m;</span><br><span class="line">        b = (b % m + m) % m;</span><br><span class="line">        <span class="keyword">return</span> ((a * b - (ll) ((ld) a / m * b) * m) % m + m) % m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// O(logb)</span></span><br><span class="line">    <span class="function">ll <span class="title">powmod</span><span class="params">(ll a, ll b, ll m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        ll r;</span><br><span class="line">        <span class="keyword">for</span> (r = <span class="number">1</span>, a %= m; b; a = <span class="built_in">multmod</span>(a, a, m), b &gt;&gt;= <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> (b % <span class="number">2</span>) r = <span class="built_in">multmod</span>(r, a, m);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Runtime: O(logalogb)</span></span><br><span class="line">    <span class="function">ll <span class="title">bingcd</span><span class="params">(ll a, ll b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a &lt; <span class="number">0</span> || b &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">bingcd</span>(<span class="built_in">abs</span>(a), <span class="built_in">abs</span>(b));</span><br><span class="line">        <span class="keyword">if</span> (!a || !b) <span class="keyword">return</span> a | b;</span><br><span class="line">        <span class="type">unsigned</span> shift = __builtin_ctz(a | b);</span><br><span class="line">        a &gt;&gt;= __builtin_ctz(a);</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            b &gt;&gt;= __builtin_ctz(b);</span><br><span class="line">            <span class="keyword">if</span> (a &gt; b) <span class="built_in">swap</span>(a, b);</span><br><span class="line">            b -= a;</span><br><span class="line">        &#125; <span class="keyword">while</span> (b);</span><br><span class="line">        <span class="keyword">return</span> a &lt;&lt; shift;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">miller_rabin_subroutine</span><span class="params">(ll a, ll n, ll x, ll t)</span> </span>&#123;</span><br><span class="line">        ll result = <span class="built_in">powmod</span>(a, x, n);</span><br><span class="line">        ll last = result;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= t; i++) &#123;</span><br><span class="line">            result = <span class="built_in">multmod</span>(result, result, n);</span><br><span class="line">            <span class="keyword">if</span> (result == <span class="number">1</span> &amp;&amp; last != <span class="number">1</span> &amp;&amp; last != n - <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            last = result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result != <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// O(Rlognlognlogn)</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">miller_rabin</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constexpr</span> <span class="type">int</span> R = <span class="number">5</span>;   <span class="comment">// rounds</span></span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> ((n &amp; <span class="number">1</span>) == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        ll x = n - <span class="number">1</span>, t = <span class="number">0</span>;</span><br><span class="line">        ll a;</span><br><span class="line">        <span class="keyword">while</span> ((x &amp; <span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            ++t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; R; ++i) &#123;</span><br><span class="line">            a = <span class="built_in">rand</span>() % (n - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">miller_rabin_subroutine</span>(a, n, x, t)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Base on Brent&#x27;s implementation, O(sqrt(p)) such that p is a small prime factor of n</span></span><br><span class="line">    <span class="function">ll <span class="title">pollard_rho</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">3</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        ll w = <span class="number">0</span>, a = <span class="number">0</span>, val = <span class="number">1</span>, g;</span><br><span class="line">        ll c = <span class="built_in">rand</span>() % (n - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (ll k = <span class="number">2</span>;; k &lt;&lt;= <span class="number">1</span>, a = w, val = <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= k; ++i) &#123;</span><br><span class="line">                w = (<span class="built_in">multmod</span>(w, w, n) + c) % n;</span><br><span class="line">                val = <span class="built_in">multmod</span>(val, <span class="built_in">abs</span>(w - a), n);</span><br><span class="line">                <span class="keyword">if</span> (! (i &amp; <span class="number">127</span>)) &#123;</span><br><span class="line">                    g = <span class="built_in">bingcd</span>(val, n);</span><br><span class="line">                    <span class="keyword">if</span> (g &gt; <span class="number">1</span>) <span class="keyword">return</span> g;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            g = <span class="built_in">bingcd</span>(val, n);</span><br><span class="line">            <span class="keyword">if</span> (g &gt; <span class="number">1</span>) <span class="keyword">return</span> g;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">find_prime_factors</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">miller_rabin</span>(n)) &#123;</span><br><span class="line">            factor[tol++] = n;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ll p = n;</span><br><span class="line">        <span class="keyword">while</span> (p &gt;= n) p = <span class="built_in">pollard_rho</span>(n);</span><br><span class="line">        <span class="built_in">find_prime_factors</span>(p);</span><br><span class="line">        <span class="built_in">find_prime_factors</span>(n / p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Given a string s of length n, consisting only of lowercase English letters,</span></span><br><span class="line"><span class="comment">// find the number of different substrings in this string</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">count_unique_substrings</span><span class="params">(string <span class="type">const</span> &amp;s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** This part can be done in compile-time **/</span></span><br><span class="line">    <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> p = <span class="number">31</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> m = <span class="number">1e9</span> + <span class="number">9</span>;</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">p_pow</span><span class="params">(n)</span></span>;</span><br><span class="line">    p_pow[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        p_pow[i] = (p_pow[i - <span class="number">1</span>] * p) % m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*********************************/</span></span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">h</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        h[i + <span class="number">1</span>] = (h[i] + (s[i] - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>) * p_pow[i]) % m;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">1</span>; l &lt;= n; l++) &#123;</span><br><span class="line">        set&lt;ll&gt; hs;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n - l; i++) &#123;</span><br><span class="line">            ll cur_h = (h[i + l] + m - h[i]) % m;</span><br><span class="line">            cur_h = (cur_h * p_pow[n - i - <span class="number">1</span>]) % m;</span><br><span class="line">            hs.<span class="built_in">insert</span>(cur_h);</span><br><span class="line">        &#125;</span><br><span class="line">        cnt += hs.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Given two strings - a pattern s and a text t, determine if the pattern</span></span><br><span class="line"><span class="comment">// appears in the text and if it does, enumerate all its occurrences in</span></span><br><span class="line"><span class="comment">// O(|s|+|t|) time</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">rabin_karp</span><span class="params">(string <span class="type">const</span> &amp;s, string <span class="type">const</span> &amp;t)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Can be done in compile-time **/</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> p = <span class="number">31</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> m = <span class="number">1e9</span> + <span class="number">9</span>;</span><br><span class="line">    <span class="type">int</span> S = s.<span class="built_in">size</span>(), T = t.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">p_pow</span><span class="params">(max(S, T))</span></span>;</span><br><span class="line">    p_pow[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; (<span class="type">int</span>) p_pow.<span class="built_in">size</span>(); i++)</span><br><span class="line">        p_pow[i] = (p_pow[i - <span class="number">1</span>] * p) % m;</span><br><span class="line">    <span class="comment">/*********************************/</span></span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">h</span><span class="params">(T + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; T; i++)</span><br><span class="line">        h[i + <span class="number">1</span>] = (h[i] + (t[i] - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>) * p_pow[i]) % m;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> h_s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; S; i++)</span><br><span class="line">        h_s = (h_s + (s[i] - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>) * p_pow[i]) % m;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; occurrences;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i + S - <span class="number">1</span> &lt; T; i++) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> cur_h = (h[i + S] + m - h[i]) % m;</span><br><span class="line">        <span class="keyword">if</span> (cur_h == h_s * p_pow[i] % m)</span><br><span class="line">            occurrences.<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> occurrences;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check whether an undirected graph is bipartite</span></span><br><span class="line"><span class="comment">// Principle: a graph is bipartite if and only if it is two-colorable (0/1)</span></span><br><span class="line"><span class="keyword">namespace</span> BipartiteCheck &#123;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; adj;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; color;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> number_of_nodes)</span> </span>&#123;</span><br><span class="line">        n = number_of_nodes;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(color);</span><br><span class="line">        color.<span class="built_in">resize</span>(n + <span class="number">5</span>, INF);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// bfs from every node id, which will cover different CCs</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> s = <span class="number">0</span>; s &lt; n; ++s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (color.<span class="built_in">at</span>(s) == INF) &#123;</span><br><span class="line">                color.<span class="built_in">at</span>(s) = <span class="number">0</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(s);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                <span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;v : adj.<span class="built_in">at</span>(u)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (color.<span class="built_in">at</span>(v) == INF) &#123;</span><br><span class="line">                        <span class="comment">// if color[u] = 1, then color[v] = 0</span></span><br><span class="line">                        <span class="comment">// if color[u] = 0, then color[v] = 1</span></span><br><span class="line">                        color.<span class="built_in">at</span>(v) = <span class="number">1</span> - color.<span class="built_in">at</span>(u);</span><br><span class="line">                        q.<span class="built_in">push</span>(v);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (color.<span class="built_in">at</span>(v) == color.<span class="built_in">at</span>(u)) &#123;</span><br><span class="line">                        <span class="comment">// Coloring conflict found, exit</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Another version that bfs from &#x27;s&#x27;, which means we only consider if the CC that contains &#x27;s&#x27; is bipartite</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="type">bool</span> isBipartite = <span class="literal">true</span>;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        color.<span class="built_in">at</span>(s) = <span class="number">0</span>;</span><br><span class="line">        q.<span class="built_in">push</span>(s);</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>() &amp;&amp; isBipartite) &#123;</span><br><span class="line">            <span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;v : adj.<span class="built_in">at</span>(u)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (color.<span class="built_in">at</span>(v) == INF) &#123;</span><br><span class="line">                    <span class="comment">// if color[u] = 1, then color[v] = 0</span></span><br><span class="line">                    <span class="comment">// if color[u] = 0, then color[v] = 1</span></span><br><span class="line">                    color.<span class="built_in">at</span>(v) = <span class="number">1</span> - color.<span class="built_in">at</span>(u);</span><br><span class="line">                    q.<span class="built_in">push</span>(v);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (color.<span class="built_in">at</span>(v) == color.<span class="built_in">at</span>(u)) &#123;</span><br><span class="line">                    <span class="comment">// Coloring conflict found</span></span><br><span class="line">                    isBipartite = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isBipartite;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Find cut vertices and bridges in an undirected graph in O(m+n)</span></span><br><span class="line"><span class="keyword">namespace</span> CutVertexAndBridges &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n; <span class="comment">// number of nodes</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; adj; <span class="comment">// adjacency list of graph</span></span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; visited;</span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; isCutVertex;</span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt; bridges;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; tin, low;</span><br><span class="line">    <span class="type">int</span> timer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">decltype</span>(adj)().<span class="built_in">swap</span>(adj);</span><br><span class="line">        <span class="keyword">decltype</span>(visited)().<span class="built_in">swap</span>(visited);</span><br><span class="line">        <span class="keyword">decltype</span>(isCutVertex)().<span class="built_in">swap</span>(isCutVertex);</span><br><span class="line">        <span class="keyword">decltype</span>(bridges)().<span class="built_in">swap</span>(bridges);</span><br><span class="line">        <span class="keyword">decltype</span>(tin)().<span class="built_in">swap</span>(tin);</span><br><span class="line">        <span class="keyword">decltype</span>(low)().<span class="built_in">swap</span>(low);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> number_of_nodes)</span> </span>&#123;</span><br><span class="line">        n = number_of_nodes;</span><br><span class="line">        adj.<span class="built_in">resize</span>(n + <span class="number">5</span>);</span><br><span class="line">        visited.<span class="built_in">resize</span>(n + <span class="number">5</span>, <span class="literal">false</span>);</span><br><span class="line">        isCutVertex.<span class="built_in">resize</span>(n + <span class="number">5</span>, <span class="literal">false</span>);</span><br><span class="line">        tin.<span class="built_in">resize</span>(n + <span class="number">5</span>);</span><br><span class="line">        low.<span class="built_in">resize</span>(n + <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> p = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">        visited[u] = <span class="literal">true</span>;</span><br><span class="line">        tin[u] = low[u] = timer++;</span><br><span class="line">        <span class="type">int</span> children = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> v : adj[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v == p) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (visited[v]) &#123;</span><br><span class="line">                low[u] = <span class="built_in">min</span>(low[u], tin[v]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">dfs</span>(v, u);</span><br><span class="line">                low[u] = <span class="built_in">min</span>(low[u], low[v]);</span><br><span class="line">                <span class="keyword">if</span> (low[v] &gt; tin[u]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (u &gt; v) &#123;</span><br><span class="line">                        bridges.<span class="built_in">emplace_back</span>(v, u);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        bridges.<span class="built_in">emplace_back</span>(u, v);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (low[v] &gt;= tin[u] &amp;&amp; p != <span class="number">-1</span>)</span><br><span class="line">                    isCutVertex[u] = <span class="literal">true</span>;</span><br><span class="line">                ++children;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="number">-1</span> &amp;&amp; children &gt; <span class="number">1</span>)</span><br><span class="line">            isCutVertex[u] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">findCutVerticesAndBridges</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        timer = <span class="number">0</span>;</span><br><span class="line">        visited.<span class="built_in">resize</span>(n, <span class="literal">false</span>);</span><br><span class="line">        tin.<span class="built_in">resize</span>(n, <span class="number">-1</span>);</span><br><span class="line">        low.<span class="built_in">resize</span>(n, <span class="number">-1</span>);</span><br><span class="line">        isCutVertex.<span class="built_in">resize</span>(n, <span class="literal">false</span>);</span><br><span class="line">        vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt;().<span class="built_in">swap</span>(bridges);</span><br><span class="line">        <span class="comment">// Assume node id starts from 0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[i]) <span class="built_in">dfs</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// How to obtain edges biconnected Components (eBCC) in an undirected graph G</span></span><br><span class="line"><span class="comment">// 1. Identify all bridges in an undirected graph G</span></span><br><span class="line"><span class="comment">// 2. Remove all bridges in G, we have G&#x27;</span></span><br><span class="line"><span class="comment">// 3. Use DSU to get CCs in G&#x27;</span></span><br><span class="line"><span class="comment">// 4. Each CC in G&#x27; is an eBCC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// obtain vertice-biconnected components</span></span><br><span class="line"><span class="comment">// Notice: dont add self-loops in &#x27;adj&#x27;</span></span><br><span class="line"><span class="keyword">namespace</span> vBCC &#123;</span><br><span class="line">    <span class="type">int</span> n, bccCnt, dfnCnt;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; adj, bcc;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; dfn, low;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; sta;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> number_of_nodes)</span> </span>&#123;</span><br><span class="line">        n = number_of_nodes;</span><br><span class="line">        dfn.<span class="built_in">resize</span>(n+<span class="number">5</span>);</span><br><span class="line">        low.<span class="built_in">resize</span>(n+<span class="number">5</span>);</span><br><span class="line">        bcc.<span class="built_in">resize</span>(n+<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Tarjan</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> fa)</span> </span>&#123;</span><br><span class="line">        ++dfnCnt;</span><br><span class="line">        dfn[u] = dfnCnt;</span><br><span class="line">        low[u] = dfnCnt;</span><br><span class="line">        sta.<span class="built_in">push</span>(u);</span><br><span class="line">        <span class="keyword">if</span> (adj[u].<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            bcc[++bccCnt].<span class="built_in">emplace_back</span>(u);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;v : adj[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (!dfn[v]) &#123;</span><br><span class="line">                <span class="built_in">Tarjan</span>(v,u);</span><br><span class="line">                low[u] = <span class="built_in">min</span>(low[u],low[v]);</span><br><span class="line">                <span class="keyword">if</span> (low[v] &gt;= dfn[u]) &#123;</span><br><span class="line">                    ++bccCnt;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        temp = sta.<span class="built_in">top</span>();</span><br><span class="line">                        sta.<span class="built_in">pop</span>();</span><br><span class="line">                        bcc[bccCnt].<span class="built_in">emplace_back</span>(temp);</span><br><span class="line">                    &#125; <span class="keyword">while</span> (temp != v);</span><br><span class="line">                    bcc[bccCnt].<span class="built_in">emplace_back</span>(u);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                low[u] = <span class="built_in">min</span>(low[u], dfn[v]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// node id starts from 1</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!dfn[i]) &#123;</span><br><span class="line">                <span class="built_in">Tarjan</span>(i, <span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// print all vbccs</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= bccCnt; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">const</span> <span class="type">int</span> &amp;j : bcc[i]) &#123;</span><br><span class="line">                cout &lt;&lt; j &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> PrefixSum2D &#123;</span><br><span class="line">    vector&lt;vector&lt;ll&gt; &gt; pre;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">const</span> vector&lt;vector&lt;ll&gt; &gt; &amp;A)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (A.<span class="built_in">empty</span>() || A.<span class="built_in">front</span>().<span class="built_in">empty</span>()) <span class="keyword">return</span>;</span><br><span class="line">        n = (<span class="type">int</span>) A.<span class="built_in">size</span>();</span><br><span class="line">        m = (<span class="type">int</span>) A.<span class="built_in">front</span>().<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">decltype</span>(pre)().<span class="built_in">swap</span>(pre);</span><br><span class="line">        pre.<span class="built_in">resize</span>(n, <span class="built_in">vector</span>&lt;ll&gt;(m));</span><br><span class="line"></span><br><span class="line">        pre[<span class="number">0</span>][<span class="number">0</span>] = A[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; ++i)</span><br><span class="line">            pre[<span class="number">0</span>][i] = pre[<span class="number">0</span>][i - <span class="number">1</span>] + A[<span class="number">0</span>][i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">            pre[i][<span class="number">0</span>] = pre[i - <span class="number">1</span>][<span class="number">0</span>] + A[i][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; m; ++j)</span><br><span class="line">                pre[i][j] = pre[i - <span class="number">1</span>][j] + pre[i][j - <span class="number">1</span>] - pre[i - <span class="number">1</span>][j - <span class="number">1</span>] + A[i][j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ll <span class="title">rangeSum</span><span class="params">(<span class="type">int</span> r0, <span class="type">int</span> c0, <span class="type">int</span> r1, <span class="type">int</span> c1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (r0 == <span class="number">0</span> &amp;&amp; c0 == <span class="number">0</span>) <span class="keyword">return</span> pre[r1][c1];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (r0 == <span class="number">0</span> &amp;&amp; c0 != <span class="number">0</span>) <span class="keyword">return</span> pre[r1][c1] - pre[r1][c0 - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (r0 != <span class="number">0</span> &amp;&amp; c0 == <span class="number">0</span>) <span class="keyword">return</span> pre[r1][c1] - pre[r0 - <span class="number">1</span>][c1];</span><br><span class="line">        <span class="keyword">return</span> pre[r1][c1] - pre[r0 - <span class="number">1</span>][c1] - pre[r1][c0 - <span class="number">1</span>] + pre[r0 - <span class="number">1</span>][c0 - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prefix sum of edges&#x27; weights on a rooted tree</span></span><br><span class="line"><span class="keyword">namespace</span> PrefixSumTree0 &#123;</span><br><span class="line">    vector&lt;ll&gt; pre;</span><br><span class="line">    vector&lt;vector&lt;pair&lt;<span class="type">int</span>, ll&gt; &gt; &gt; adj;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        adj.<span class="built_in">resize</span>(n);</span><br><span class="line">        pre.<span class="built_in">resize</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> father_of_u, ll currSum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;[v, w] : adj[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v != father_of_u) &#123;</span><br><span class="line">                pre[v] = currSum + w;</span><br><span class="line">                <span class="built_in">dfs</span>(v, u, pre[v]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Query the distance from u to v:</span></span><br><span class="line">    <span class="comment">// ll dist(int u, int v) &#123; return pre[u] + pre[v] - 2*pre[lca(u, v)]; &#125;</span></span><br><span class="line">    <span class="comment">// Usage</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n, root, m, u, v, q; ll w;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; root &gt;&gt; m;</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">        <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">            cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">            adj[u].<span class="built_in">emplace_back</span>(v, w);</span><br><span class="line">            adj[v].<span class="built_in">emplace_back</span>(u, w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> dummy_node = <span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(root, dummy_node, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">            cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; dist(u, v) &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prefix sum of nodes&#x27; weights on a rooted tree</span></span><br><span class="line"><span class="keyword">namespace</span> PrefixSumTree1 &#123;</span><br><span class="line">    vector&lt;ll&gt; pre;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; adj;</span><br><span class="line">    vector&lt;ll&gt; weight;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; father;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        pre.<span class="built_in">resize</span>(n);</span><br><span class="line">        adj.<span class="built_in">resize</span>(n);</span><br><span class="line">        weight.<span class="built_in">resize</span>(n);</span><br><span class="line">        father.<span class="built_in">resize</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> father_of_u, ll currSum)</span> </span>&#123;</span><br><span class="line">        pre[u] = currSum + weight[u];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;v : adj[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v != father_of_u) &#123;</span><br><span class="line">                <span class="built_in">dfs</span>(v, u, pre[u]);</span><br><span class="line">                father[v] = u;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Query the distance from u to v:</span></span><br><span class="line">    <span class="comment">//    ll dist(int u, int v) &#123; </span></span><br><span class="line">    <span class="comment">//        int Lca = lca(u, v);</span></span><br><span class="line">    <span class="comment">//        // Case 1: lca is root</span></span><br><span class="line">    <span class="comment">//        if (father[Lca] == -1) &#123;</span></span><br><span class="line">    <span class="comment">//            return pre[u] + pre[v] - pre[Lca];</span></span><br><span class="line">    <span class="comment">//        &#125;</span></span><br><span class="line">    <span class="comment">//        // Case 2: otherwise</span></span><br><span class="line">    <span class="comment">//        return pre[u] + pre[v] - pre[Lca] - pre[father[Lca]];</span></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">// Usage</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n, root, m, u, v, q;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; root &gt;&gt; m;</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : weight) cin &gt;&gt; i;</span><br><span class="line">        <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">            cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">            adj[u].<span class="built_in">emplace_back</span>(v);</span><br><span class="line">            adj[v].<span class="built_in">emplace_back</span>(u);</span><br><span class="line">        &#125;</span><br><span class="line">        father[root] = <span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> dummy_node = <span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(root, dummy_node, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">            cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; dist(u, v) &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C(n, m) = ((n-m+1)(n-m+2)...(n-m+m))/(m(m-1)(m-2)...2*1)</span></span><br><span class="line"><span class="comment">// P(m,k): For all integers m, k, such that k &gt;= 1</span></span><br><span class="line"><span class="comment">// m(m+1)(m+2)...(m+k-1) is divided by k!</span></span><br><span class="line"><span class="comment">// This can be proved by nested induction</span></span><br><span class="line"><span class="comment">// Ref: </span></span><br><span class="line"><span class="comment">// https://math.stackexchange.com/questions/12065/the-product-of-n-consecutive-integers-is-divisible-by-n-factorial/12073#12073</span></span><br><span class="line"><span class="comment">// https://gowers.wordpress.com/2010/09/18/are-these-the-same-proof/</span></span><br><span class="line"><span class="function">ll <span class="title">comb</span><span class="params">(ll n, ll m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m &gt; n - m) m = n - m;</span><br><span class="line">    ll result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        result = result * (n - m + i) / i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Suppose there is a majority element in n integers such that its occurrence is &gt; (n / 2)</span></span><br><span class="line"><span class="comment">// We can obtain in O(n) time and O(1) space</span></span><br><span class="line"><span class="keyword">namespace</span> MajorityElement &#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> val = <span class="number">-1</span>, cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">            <span class="keyword">if</span> (a != val) &#123;</span><br><span class="line">                <span class="keyword">if</span> (--cnt &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                val = a, cnt = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ++cnt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; val &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Eulerian Circuit and Eulerian Path</span></span><br><span class="line"><span class="comment">// Eulerian Path: a trail in a finite graph that visits every EDGE exactly once</span></span><br><span class="line"><span class="comment">// Eulerian Circuit: an Eulerian trail that starts and ends on the same vertex</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// For an undirected graph G:</span></span><br><span class="line"><span class="comment">// G has an Eulerian Circuit &lt;=&gt; G is connected, G has no vertices with odd degree</span></span><br><span class="line"><span class="comment">// G has an Eulerian Path &lt;=&gt; G is connected, G has 0 or 2 vertices with odd degree</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// For a directed graph G:</span></span><br><span class="line"><span class="comment">// G has an Eulerian Circuit &lt;=&gt; G is a single SCC and for all vertex v, in_degree[v] = out_degree[v]</span></span><br><span class="line"><span class="comment">// G has an Eulerian Path &lt;=&gt; Suppose its underlying undirected graph is G&#x27;, for G&#x27;</span></span><br><span class="line"><span class="comment">// 1. G&#x27; is a single CC</span></span><br><span class="line"><span class="comment">// 2. there is at most 1 vertex v such that in_degree[v] - out_degree[v] = 1</span></span><br><span class="line"><span class="comment">// 3. there is at most 1 vertex v such that out_degree[v] - in_degree[v] = 1</span></span><br><span class="line"><span class="comment">// 4. for other vertices v, in_degree[v] = out_degree[v]</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// We use Hierholzer&#x27;s algorithm to find the Eulerian Circuit/Path</span></span><br><span class="line"><span class="comment">// 1. If we confirms G contains an Eulerian Path, then:</span></span><br><span class="line"><span class="comment">//    if G is undirected, &#x27;startVertex&#x27; is one of the vertex with odd degree.</span></span><br><span class="line"><span class="comment">//    if G is directed, out_degree[startVertex] - in_degree[startVertex] = 1.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 2. If we confirms G contains an Eulerian Circuit, then &#x27;startVertex&#x27; can be any of vertices.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Sort the adjList if you need to find the lexicographically smallest/largest Eulerian Path/Circuit</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Hierholzer for directed graphs</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Hierholzer</span><span class="params">(<span class="type">int</span> startVertex, vector&lt;deque&lt;<span class="type">int</span>&gt; &gt; &amp;adjList)</span> </span>&#123;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; circuit;</span><br><span class="line">    <span class="type">int</span> current = startVertex;</span><br><span class="line">    path.<span class="built_in">push</span>(current);</span><br><span class="line">    <span class="keyword">while</span> (!path.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!adjList.<span class="built_in">at</span>(current).<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            path.<span class="built_in">push</span>(current);</span><br><span class="line">            <span class="type">int</span> next = adjList.<span class="built_in">at</span>(current).<span class="built_in">front</span>();</span><br><span class="line">            adjList.<span class="built_in">at</span>(current).<span class="built_in">pop_front</span>();</span><br><span class="line">            current = next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            circuit.<span class="built_in">emplace_back</span>(current);</span><br><span class="line">            current = path.<span class="built_in">top</span>();</span><br><span class="line">            path.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(circuit.<span class="built_in">begin</span>(), circuit.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> circuit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hierholzer for undirected graphs</span></span><br><span class="line"><span class="comment">// Once an edge (u,v) is added to the graph</span></span><br><span class="line"><span class="comment">// We update &#x27;stats&#x27; by ++stats[u][v], ++stats[v][u]</span></span><br><span class="line">unordered_map&lt;<span class="type">int</span>, unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt; stats;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Hierholzer2</span><span class="params">(<span class="type">int</span> startVertex, vector&lt;deque&lt;<span class="type">int</span>&gt; &gt; &amp;adjList)</span> </span>&#123;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; circuit;</span><br><span class="line">    <span class="type">int</span> current = startVertex;</span><br><span class="line">    path.<span class="built_in">push</span>(startVertex);</span><br><span class="line">    <span class="keyword">while</span> (!path.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!adjList.<span class="built_in">at</span>(current).<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            path.<span class="built_in">push</span>(current);</span><br><span class="line">            <span class="type">int</span> next = adjList.<span class="built_in">at</span>(current).<span class="built_in">front</span>();</span><br><span class="line">            adjList.<span class="built_in">at</span>(current).<span class="built_in">pop_front</span>();</span><br><span class="line">            <span class="comment">// avoid traversing the same edge twice</span></span><br><span class="line">            <span class="keyword">if</span> (stats[current][next] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                --stats[current][next];</span><br><span class="line">                --stats[next][current];</span><br><span class="line">                current = next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            circuit.<span class="built_in">emplace_back</span>(current);</span><br><span class="line">            current = path.<span class="built_in">top</span>();</span><br><span class="line">            path.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(circuit.<span class="built_in">begin</span>(), circuit.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> circuit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Bitwise &#123;</span><br><span class="line">    <span class="comment">// All boolean array are in 0-based indexing</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isOn</span><span class="params">(<span class="type">int</span> S, <span class="type">int</span> j)</span> </span>&#123; <span class="keyword">return</span> (S &amp; (<span class="number">1</span> &lt;&lt; j)); &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setBit</span><span class="params">(<span class="type">int</span> &amp;S, <span class="type">int</span> j)</span> </span>&#123; S |= (<span class="number">1</span> &lt;&lt; j); &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clearBit</span><span class="params">(<span class="type">int</span> &amp;S, <span class="type">int</span> j)</span> </span>&#123; S &amp;= ~(<span class="number">1</span> &lt;&lt; j); &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">toggleBit</span><span class="params">(<span class="type">int</span> &amp;S, <span class="type">int</span> j)</span> </span>&#123; S ^= (<span class="number">1</span> &lt;&lt; j); &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lowBit</span><span class="params">(<span class="type">int</span> S)</span> </span>&#123; <span class="keyword">return</span> S &amp; (-S); &#125;  <span class="comment">// S&amp;(-S) is 2^j such that the j-th of S is 0</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setAll</span><span class="params">(<span class="type">int</span> &amp;S, <span class="type">int</span> n)</span> </span>&#123; S = (<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>; &#125; <span class="comment">// set S to all &#x27;1&#x27; bit of length n</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">modulo</span><span class="params">(<span class="type">int</span> S, <span class="type">int</span> n)</span> </span>&#123; <span class="keyword">return</span> S &amp; (n - <span class="number">1</span>); &#125; <span class="comment">// Obtain S%n such that n is a power of 2</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="type">int</span> S)</span> </span>&#123; <span class="keyword">return</span> !(S &amp; (S<span class="number">-1</span>)); &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">turnOffLastBit</span><span class="params">(<span class="type">int</span> S)</span> </span>&#123; <span class="keyword">return</span> S &amp; (S<span class="number">-1</span>); &#125; <span class="comment">// pre: the last bit of S has not been turned off</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// __builtin_ctz(2^n) = n</span></span><br><span class="line">    <span class="comment">// Count how many bits are set in &#x27;x&#x27;</span></span><br><span class="line">    <span class="comment">// __builtin_popcount(x)</span></span><br><span class="line">    <span class="comment">// __builtin_popcountl(x)</span></span><br><span class="line">    <span class="comment">// __builtin_ctz(x) return the number of trailing 0</span></span><br><span class="line">    <span class="comment">// __builtin_clz(x) return the number of leading 0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Loop through all subsets except itself and the empty set</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">loop_through_all_subsets</span><span class="params">(<span class="type">int</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> ss=(s<span class="number">-1</span>)&amp;s; ss; ss=(ss<span class="number">-1</span>)&amp;s) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">bitset</span>&lt;<span class="number">5</span>&gt;(ss).<span class="built_in">to_string</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Loop through all subsets with size r in N (Gosper&#x27;s Hack)</span></span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">loop_through_subsets_with_size_r</span><span class="params">(<span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> s = (<span class="number">1</span>&lt;&lt;r)<span class="number">-1</span>; s&lt;<span class="number">1</span>&lt;&lt;N;) &#123;</span><br><span class="line">            <span class="comment">// output</span></span><br><span class="line">            cout &lt;&lt; (bitset&lt;N&gt;)s &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="comment">// update</span></span><br><span class="line">            <span class="type">int</span> x = s&amp;(-s);</span><br><span class="line">            <span class="type">int</span> y = s+x;</span><br><span class="line">            s = ((s&amp;(~y))/x&gt;&gt;<span class="number">1</span>)|y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Compute the lexicographically next bit permutation</span></span><br><span class="line">    <span class="comment">// 0b10001 --&gt; 0b10010</span></span><br><span class="line">    <span class="comment">// 0b00000 --&gt; 0b11111 (32bits)</span></span><br><span class="line">    <span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">next_bit_permutation</span><span class="params">(<span class="type">unsigned</span> current_bit_permutation)</span> </span>&#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> v = current_bit_permutation;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> w; <span class="comment">// next permutation of bits</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> t = v | (v - <span class="number">1</span>); <span class="comment">// t gets v&#x27;s least significant 0 bits set to 1</span></span><br><span class="line">        <span class="comment">// Next set to 1 the most significant bit to change,</span></span><br><span class="line">        <span class="comment">// set to 0 the least significant ones, and add the necessary 1 bits.</span></span><br><span class="line">        w = (t + <span class="number">1</span>) | (((~t &amp; -~t) - <span class="number">1</span>) &gt;&gt; (__builtin_ctz(v) + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> w;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Iterate all set bits in a &#x27;bitset&#x27; instance</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        bitset&lt;10&gt; bs;</span><br><span class="line">        bs[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        bs[<span class="number">9</span>] = <span class="literal">true</span>;</span><br><span class="line">        bs[<span class="number">5</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = bs._Find_first(); i &lt; bs.<span class="built_in">size</span>(); i = bs._Find_next(i))</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1D BIT</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BIT</span> &#123;</span><br><span class="line">    vector&lt;T&gt; t1, t2;</span><br><span class="line">    <span class="type">int</span> N;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i &amp; (-i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// index starts from 1</span></span><br><span class="line">    <span class="built_in">BIT</span>(<span class="type">int</span> n) : <span class="built_in">N</span>(n+<span class="number">1</span>) &#123;</span><br><span class="line">        t1.<span class="built_in">resize</span>(N);</span><br><span class="line">        t2.<span class="built_in">resize</span>(N);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T <span class="title">sum</span><span class="params">(vector&lt;T&gt; &amp;t, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">T <span class="title">a</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">while</span> (n) &#123;</span><br><span class="line">            a += t[n];</span><br><span class="line">            n -= <span class="built_in">lowbit</span>(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T <span class="title">rsum</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(t1,n)*n-<span class="built_in">sum</span>(t2,n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T <span class="title">rsum</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rsum</span>(r)-<span class="built_in">rsum</span>(l<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">upd</span><span class="params">(vector&lt;T&gt; &amp;t, <span class="type">int</span> n, T val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (n &lt; N) &#123;</span><br><span class="line">            t[n] += val;</span><br><span class="line">            n += <span class="built_in">lowbit</span>(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rupd</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, T val)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">upd</span>(t1,l,val);</span><br><span class="line">        <span class="built_in">upd</span>(t1,r+<span class="number">1</span>,-val);</span><br><span class="line">        <span class="built_in">upd</span>(t2,l,val*(l<span class="number">-1</span>));</span><br><span class="line">        <span class="built_in">upd</span>(t2,r+<span class="number">1</span>,-val*r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2D BIT</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BIT_2D</span> &#123;</span><br><span class="line">    vector&lt;vector&lt;T&gt; &gt; t;</span><br><span class="line">    <span class="function">T <span class="title">lowbit</span><span class="params">(T i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i &amp; (-i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> N, M;</span><br><span class="line">    <span class="comment">// index starts from 1</span></span><br><span class="line">    <span class="built_in">BIT_2D</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="built_in">BIT_2D</span>(<span class="type">int</span> n, <span class="type">int</span> m) : <span class="built_in">N</span>(n), <span class="built_in">M</span>(m) &#123;</span><br><span class="line">        t.<span class="built_in">resize</span>(N+<span class="number">1</span>, <span class="built_in">vector</span>&lt;T&gt;(M+<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// add &#x27;val&#x27; to t[x][y]</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">upd</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, T val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = x; i &lt;= N; i += <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = y; j &lt;= M; j += <span class="built_in">lowbit</span>(j)) &#123;</span><br><span class="line">                t[i][j] += val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// rangesum from [1][1] to [x][y]</span></span><br><span class="line">    <span class="function">T <span class="title">sum</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="function">T <span class="title">ans</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = x; i &gt; <span class="number">0</span>; i -= <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = y; j &gt; <span class="number">0</span>; j -= <span class="built_in">lowbit</span>(j)) &#123;</span><br><span class="line">                ans += t[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T <span class="title">rsum</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(x2,y2)-<span class="built_in">sum</span>(x2,y1<span class="number">-1</span>)-<span class="built_in">sum</span>(x1<span class="number">-1</span>,y2)+<span class="built_in">sum</span>(x1<span class="number">-1</span>,y1<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RMQ: Range Max/Min Query</span></span><br><span class="line"><span class="comment">// RSQ: Range Sum Query</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span> &#123;</span><br><span class="line">    <span class="comment">// max: INF = numeric_limits&lt;int&gt;::min();</span></span><br><span class="line">    <span class="comment">// min: INF = numeric_limits&lt;int&gt;::max();</span></span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> INF = numeric_limits&lt;<span class="type">int</span>&gt;::<span class="built_in">max</span>();</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; st, lz;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123; st[p] = A[l]; <span class="keyword">return</span>; &#125;</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">2</span>*p, l, (l+r)/<span class="number">2</span>, A);</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">2</span>*p+<span class="number">1</span>, (l+r)/<span class="number">2</span>+<span class="number">1</span>, r, A);</span><br><span class="line">        st[p] = <span class="built_in">min</span>(st[<span class="number">2</span>*p], st[<span class="number">2</span>*p+<span class="number">1</span>]); <span class="comment">// RMQ -&gt; min/max, RSQ -&gt; +</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">SegmentTree</span>(vector&lt;<span class="type">int</span>&gt; &amp;A) &#123;</span><br><span class="line">        n = (<span class="type">int</span>)A.<span class="built_in">size</span>();</span><br><span class="line">        st.<span class="built_in">resize</span>(n &lt;&lt; <span class="number">2</span>);</span><br><span class="line">        lz.<span class="built_in">resize</span>(n &lt;&lt; <span class="number">2</span>);</span><br><span class="line">        <span class="comment">// The p is id of the tree, which starts from root = 1</span></span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">0</span>, n - <span class="number">1</span>, A);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lz[p]) &#123;</span><br><span class="line">            st[p] = lz[p];</span><br><span class="line">            <span class="comment">// RMQ -&gt; add: = lz[p],         increment: += lz[p]</span></span><br><span class="line">            <span class="comment">// RSQ -&gt; add: = (r-l+1)*lz[p], increment: += (r-l+1)*lz[p]</span></span><br><span class="line">            <span class="keyword">if</span>(l!=r) lz[<span class="number">2</span>*p] = lz[<span class="number">2</span>*p+<span class="number">1</span>] = lz[p]; <span class="comment">// add: =, increment +=</span></span><br><span class="line">            lz[p] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">push</span>(p, l, r);</span><br><span class="line">        <span class="keyword">if</span> (r &lt; i <span class="keyword">or</span> l &gt; j) <span class="keyword">return</span> INF; <span class="comment">// RMQ -&gt; INF, RSQ -&gt; 0</span></span><br><span class="line">        <span class="keyword">if</span> (l &gt;= i <span class="keyword">and</span> r &lt;= j) <span class="keyword">return</span> st[p];</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">query</span>(<span class="number">2</span>*p, l, (l+r)/<span class="number">2</span>, i, j),</span><br><span class="line">                   <span class="built_in">query</span>(<span class="number">2</span>*p+<span class="number">1</span>, (l+r)/<span class="number">2</span>+<span class="number">1</span>, r, i, j));</span><br><span class="line">        <span class="comment">// RMQ -&gt; min/max, RSQ -&gt; +</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">push</span>(p, l, r);</span><br><span class="line">        <span class="keyword">if</span> (r &lt; i <span class="keyword">or</span> l &gt; j) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= i <span class="keyword">and</span> r &lt;= j) &#123; lz[p] = v; <span class="built_in">push</span>(p, l, r); <span class="keyword">return</span>; &#125;</span><br><span class="line">        <span class="built_in">update</span>(<span class="number">2</span>*p, l, (l+r)/<span class="number">2</span>, i, j, v);</span><br><span class="line">        <span class="built_in">update</span>(<span class="number">2</span>*p+<span class="number">1</span>, (l+r)/<span class="number">2</span>+<span class="number">1</span>, r, i, j, v);</span><br><span class="line">        st[p] = <span class="built_in">min</span>(st[<span class="number">2</span>*p], st[<span class="number">2</span>*p+<span class="number">1</span>]); <span class="comment">// RMQ -&gt; min/max, RSQ -&gt; +</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Usage:</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">int main() &#123;</span></span><br><span class="line"><span class="comment">    vector&lt;int&gt; p = &#123;6,1,1,5,6,1,9&#125;;</span></span><br><span class="line"><span class="comment">    SegmentTree st(p);</span></span><br><span class="line"><span class="comment">    // Range-update from p[1] to p[3] to 120</span></span><br><span class="line"><span class="comment">    st.update(1, 0, st.n - 1, 1, 3, 120);</span></span><br><span class="line"><span class="comment">    // 注意 当区间赋值为0时有问题 用其他值代替0</span></span><br><span class="line"><span class="comment">    // Query the minimal value from p[0] to p[4]</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; st.query(1, 0, st.n - 1, 0, 4) &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// An implementation of Fast Fourier Transformation</span></span><br><span class="line"><span class="keyword">namespace</span> FFT &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">int</span> LOG_MAX_LENGTH = <span class="number">27</span>;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">int</span> MODULUS = <span class="number">2013265921</span>;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">int</span> PRIMITIVE_ROOT = <span class="number">137</span>;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">int</span> PRIMITIVE_ROOT_INVERSE = <span class="number">749463956</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">addMultiply</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>)((x + y * <span class="built_in">static_cast</span>&lt;ll&gt;(z)) % MODULUS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">transform</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, vector&lt;<span class="type">int</span>&gt; &amp;tA,</span></span></span><br><span class="line"><span class="params"><span class="function">                   <span class="type">int</span> logN, <span class="type">int</span> primitiveRoot)</span> </span>&#123;</span><br><span class="line">        tA.<span class="built_in">resize</span>(<span class="number">1</span> &lt;&lt; logN);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; (<span class="type">int</span>) a.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            <span class="type">unsigned</span> <span class="type">int</span> k = j &lt;&lt; (<span class="number">32</span> - logN); <span class="comment">// MUST be unsigned</span></span><br><span class="line">            k = ((k &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>) | ((k &amp; <span class="number">0x55555555</span>) &lt;&lt; <span class="number">1</span>);</span><br><span class="line">            k = ((k &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>) | ((k &amp; <span class="number">0x33333333</span>) &lt;&lt; <span class="number">2</span>);</span><br><span class="line">            k = ((k &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0f0f0f0f</span>) | ((k &amp; <span class="number">0x0f0f0f0f</span>) &lt;&lt; <span class="number">4</span>);</span><br><span class="line">            k = ((k &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0x00ff00ff</span>) | ((k &amp; <span class="number">0x00ff00ff</span>) &lt;&lt; <span class="number">8</span>);</span><br><span class="line">            tA[(k &gt;&gt; <span class="number">16</span>) | (k &lt;&lt; <span class="number">16</span>)] = a[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> root[LOG_MAX_LENGTH];</span><br><span class="line">        root[LOG_MAX_LENGTH - <span class="number">1</span>] = primitiveRoot;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = LOG_MAX_LENGTH - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            root[i - <span class="number">1</span>] = <span class="built_in">addMultiply</span>(<span class="number">0</span>, root[i], root[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; logN; i++) &#123;</span><br><span class="line">            <span class="type">int</span> twiddle = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; (<span class="number">1</span> &lt;&lt; i); j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = j; k &lt; (<span class="type">int</span>) tA.<span class="built_in">size</span>(); k += <span class="number">2</span> &lt;&lt; i) &#123;</span><br><span class="line">                    <span class="type">int</span> x = tA[k];</span><br><span class="line">                    <span class="type">int</span> y = tA[k + (<span class="number">1</span> &lt;&lt; i)];</span><br><span class="line">                    tA[k] = <span class="built_in">addMultiply</span>(x, twiddle, y);</span><br><span class="line">                    tA[k + (<span class="number">1</span> &lt;&lt; i)] =</span><br><span class="line">                            <span class="built_in">addMultiply</span>(x, MODULUS - twiddle, y);</span><br><span class="line">                &#125;</span><br><span class="line">                twiddle = <span class="built_in">addMultiply</span>(<span class="number">0</span>, root[i], twiddle);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">multiply</span> <span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; a,</span></span></span><br><span class="line"><span class="params"><span class="function">                   <span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; b,</span></span></span><br><span class="line"><span class="params"><span class="function">                   vector&lt;<span class="type">int</span>&gt;&amp; res)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> minN = <span class="built_in">int</span>(a.<span class="built_in">size</span>() - <span class="number">1</span> + b.<span class="built_in">size</span>());</span><br><span class="line">        <span class="type">int</span> logN = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((<span class="number">1</span> &lt;&lt; logN) &lt; minN) &#123;</span><br><span class="line">            logN++;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; tA, tB, nC;</span><br><span class="line">        <span class="built_in">transform</span>(a, tA, logN, PRIMITIVE_ROOT);</span><br><span class="line">        <span class="built_in">transform</span>(b, tB, logN, PRIMITIVE_ROOT);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; (<span class="type">int</span>)tA.<span class="built_in">size</span>(); j++)</span><br><span class="line">            tA[j] = <span class="built_in">addMultiply</span>(<span class="number">0</span>, tA[j], tB[j]);</span><br><span class="line">        <span class="built_in">transform</span>(tA, nC, logN, PRIMITIVE_ROOT_INVERSE);</span><br><span class="line">        res.<span class="built_in">resize</span>(minN);</span><br><span class="line">        <span class="type">int</span> nInverse = MODULUS - ((MODULUS - <span class="number">1</span>) &gt;&gt; logN);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; minN; j++)</span><br><span class="line">            res[j] = <span class="built_in">addMultiply</span>(<span class="number">0</span>, nInverse, nC[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Usage:</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n, m;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">A</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">B</span><span class="params">(m)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : A) cin &gt;&gt; i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : B) cin &gt;&gt; i;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">        <span class="built_in">multiply</span>(A, B, C);</span><br><span class="line">        <span class="type">bool</span> first_item = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;i : C) &#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//#define BumpAllocator</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> BumpAllocator</span></span><br><span class="line"><span class="type">static</span> <span class="type">char</span> buf[<span class="number">450</span> &lt;&lt; <span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">size_t</span> i = <span class="keyword">sizeof</span> buf;</span><br><span class="line">    <span class="built_in">assert</span>(s &lt; i);</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">void</span>*)&amp;buf[i -= s];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span>*)</span> </span>&#123;&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// get string_view from a substring</span></span><br><span class="line"><span class="function">string_view <span class="title">subStringView</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  string_view s, </span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="type">size_t</span> p, </span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="type">size_t</span> n = string_view::npos)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> s.<span class="built_in">substr</span>(p, n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// usage:</span></span><br><span class="line"><span class="comment">// string s = &quot;abcd&quot;; int i = 0, j = 2;</span></span><br><span class="line"><span class="comment">// string_view sv = subStringView(s, i, j-i+1);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * An implementation to use Zeller&#x27;s congruence calculate the day of the week for any Julian or Gregorian calendar date</span></span><br><span class="line"><span class="comment"> * if the date is given. The function will not check if the given date is valid.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">string <span class="title">zellerCongruence</span><span class="params">(<span class="type">int</span> year, <span class="type">int</span> month, <span class="type">int</span> day)</span> </span>&#123;</span><br><span class="line">    string result;</span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (year &lt;= <span class="number">1581</span> || (year == <span class="number">1582</span> &amp;&amp; month &lt;= <span class="number">9</span>) || (year == <span class="number">1582</span> &amp;&amp; month == <span class="number">10</span> &amp;&amp; month &lt;= <span class="number">4</span>))</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (month == <span class="number">1</span> || month == <span class="number">2</span>) &#123;</span><br><span class="line">        --year;</span><br><span class="line">        month += <span class="number">12</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> c = year / <span class="number">100</span>;</span><br><span class="line">    <span class="type">int</span> y = year - c * <span class="number">100</span>;</span><br><span class="line">    <span class="type">int</span> week = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">        week = c / <span class="number">4</span> - <span class="number">2</span> * c + y + y / <span class="number">4</span> + <span class="number">13</span> * (month + <span class="number">1</span>) / <span class="number">5</span> + day - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (week &lt; <span class="number">0</span>)</span><br><span class="line">            week += <span class="number">7</span>;</span><br><span class="line">        week %= <span class="number">7</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        week = y + y / <span class="number">4</span> + c / <span class="number">4</span> - <span class="number">2</span> * c + <span class="number">13</span> * (month + <span class="number">1</span>) / <span class="number">5</span> + day + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (week &lt; <span class="number">0</span>)</span><br><span class="line">            week += <span class="number">7</span>;</span><br><span class="line">        week %= <span class="number">7</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (week) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="comment">// printf(&quot;Monday\n&quot;);</span></span><br><span class="line">            result = <span class="string">&quot;Monday&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="comment">// printf(&quot;Tuesday\n&quot;);</span></span><br><span class="line">            result = <span class="string">&quot;Tuesday&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="comment">// printf(&quot;Wednesday\n&quot;);</span></span><br><span class="line">            result = <span class="string">&quot;Wednesday&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="comment">// printf(&quot;Thursday\n&quot;);</span></span><br><span class="line">            result = <span class="string">&quot;Thursday&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="comment">// printf(&quot;Friday\n&quot;);</span></span><br><span class="line">            result = <span class="string">&quot;Friday&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            <span class="comment">// printf(&quot;Saturday\n&quot;);</span></span><br><span class="line">            result = <span class="string">&quot;Saturday&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="comment">// printf(&quot;Sunday\n&quot;);</span></span><br><span class="line">            result = <span class="string">&quot;Sunday&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">zellerCongruenceTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(<span class="built_in">ZellerCongruence</span>(<span class="number">2019</span>, <span class="number">8</span>, <span class="number">16</span>) == <span class="string">&quot;Friday&quot;</span>);</span><br><span class="line">    <span class="built_in">assert</span>(<span class="built_in">ZellerCongruence</span>(<span class="number">2019</span>, <span class="number">8</span>, <span class="number">17</span>) == <span class="string">&quot;Saturday&quot;</span>);</span><br><span class="line">    <span class="built_in">assert</span>(<span class="built_in">ZellerCongruence</span>(<span class="number">2019</span>, <span class="number">8</span>, <span class="number">15</span>) == <span class="string">&quot;Thursday&quot;</span>);</span><br><span class="line">    <span class="built_in">assert</span>(<span class="built_in">ZellerCongruence</span>(<span class="number">2019</span>, <span class="number">8</span>, <span class="number">14</span>) != <span class="string">&quot;Thursday&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Maxflow</span></span><br><span class="line"><span class="comment">// Dinic: O(V^2*E)</span></span><br><span class="line"><span class="comment">// Edmonds Karp: O(V*E^2)</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Maxflow</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> ll INF = <span class="number">4e18</span>;</span><br><span class="line">    <span class="keyword">using</span> edge = tuple&lt;<span class="type">int</span>, ll, ll&gt;;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;edge&gt; el;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; adj;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; d, last;</span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt; p;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;                       <span class="comment">// find augmenting path</span></span><br><span class="line">        d.<span class="built_in">assign</span>(n, <span class="number">-1</span>); d[s] = <span class="number">0</span>;</span><br><span class="line">        <span class="function">queue&lt;<span class="type">int</span>&gt; <span class="title">q</span><span class="params">(&#123;s&#125;)</span></span>;</span><br><span class="line">        p.<span class="built_in">assign</span>(n, &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;);                       <span class="comment">// record bfs sp tree</span></span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (u == t) <span class="keyword">break</span>;                         <span class="comment">// stop as sink t reached</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;idx : adj[u]) &#123;                  <span class="comment">// explore neighbors of u</span></span><br><span class="line">                <span class="keyword">auto</span> &amp;[v, cap, flow] = el[idx];          <span class="comment">// stored in el[idx]</span></span><br><span class="line">                <span class="keyword">if</span> ((cap-flow &gt; <span class="number">0</span>) &amp;&amp; (d[v] == <span class="number">-1</span>))      <span class="comment">// positive residual edge</span></span><br><span class="line">                    d[v] = d[u]+<span class="number">1</span>, q.<span class="built_in">push</span>(v), p[v] = &#123;u, idx&#125;; <span class="comment">// 3 lines in one!</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d[t] != <span class="number">-1</span>;                           <span class="comment">// has an augmenting path</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ll <span class="title">send_one_flow</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t, ll f = INF)</span> </span>&#123;   <span class="comment">// send one flow from s-&gt;t</span></span><br><span class="line">        <span class="keyword">if</span> (s == t) <span class="keyword">return</span> f;                        <span class="comment">// bottleneck edge f found</span></span><br><span class="line">        <span class="keyword">auto</span> &amp;[u, idx] = p[t];</span><br><span class="line">        <span class="keyword">auto</span> &amp;cap = <span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(el[idx]), &amp;flow = <span class="built_in">get</span>&lt;<span class="number">2</span>&gt;(el[idx]);</span><br><span class="line">        ll pushed = <span class="built_in">send_one_flow</span>(s, u, <span class="built_in">min</span>(f, cap-flow));</span><br><span class="line">        flow += pushed;</span><br><span class="line">        <span class="keyword">auto</span> &amp;rflow = <span class="built_in">get</span>&lt;<span class="number">2</span>&gt;(el[idx ^ <span class="number">1</span>]);             <span class="comment">// back edge</span></span><br><span class="line">        rflow -= pushed;                             <span class="comment">// back flow</span></span><br><span class="line">        <span class="keyword">return</span> pushed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ll <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, ll f = INF)</span> </span>&#123;             <span class="comment">// traverse from s-&gt;t</span></span><br><span class="line">        <span class="keyword">if</span> ((u == t) || (f == <span class="number">0</span>)) <span class="keyword">return</span> f;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = last[u]; i &lt; (<span class="type">int</span>)adj[u].<span class="built_in">size</span>(); ++i) &#123; <span class="comment">// from last edge</span></span><br><span class="line">            <span class="keyword">auto</span> &amp;[v, cap, flow] = el[adj[u][i]];</span><br><span class="line">            <span class="keyword">if</span> (d[v] != d[u]+<span class="number">1</span>) <span class="keyword">continue</span>;              <span class="comment">// not part of layer graph</span></span><br><span class="line">            <span class="keyword">if</span> (ll pushed = <span class="built_in">dfs</span>(v, t, <span class="built_in">min</span>(f, cap - flow))) &#123;</span><br><span class="line">                flow += pushed;</span><br><span class="line">                <span class="keyword">auto</span> &amp;rflow = <span class="built_in">get</span>&lt;<span class="number">2</span>&gt;(el[adj[u][i] ^ <span class="number">1</span>]);     <span class="comment">// back edge</span></span><br><span class="line">                rflow -= pushed;</span><br><span class="line">                <span class="keyword">return</span> pushed;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Maxflow</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="built_in">Maxflow</span>(<span class="type">int</span> number_of_nodes) : <span class="built_in">n</span>(number_of_nodes) &#123;</span><br><span class="line">        adj.<span class="built_in">resize</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// if you are adding a bidirectional edge u&lt;-&gt;v with weight w into your</span></span><br><span class="line">    <span class="comment">// flow graph, set directed = false (default value is directed = true)</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, ll w, <span class="type">bool</span> directed = <span class="literal">true</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == v) <span class="keyword">return</span>;                          <span class="comment">// safeguard: no self loop</span></span><br><span class="line">        el.<span class="built_in">emplace_back</span>(v, w, <span class="number">0</span>);                    <span class="comment">// u-&gt;v, cap w, flow 0</span></span><br><span class="line">        adj[u].<span class="built_in">push_back</span>(el.<span class="built_in">size</span>() - <span class="number">1</span>);                <span class="comment">// remember this index</span></span><br><span class="line">        el.<span class="built_in">emplace_back</span>(u, directed ? <span class="number">0</span> : w, <span class="number">0</span>);     <span class="comment">// back edge</span></span><br><span class="line">        adj[v].<span class="built_in">push_back</span>(el.<span class="built_in">size</span>() - <span class="number">1</span>);                <span class="comment">// remember this index</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">edmonds_karp</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        ll mf = <span class="number">0</span>;                                   <span class="comment">// mf stands for max_flow</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">bfs</span>(s, t)) &#123;                          <span class="comment">// an O(V*E^2) algorithm</span></span><br><span class="line">            ll f = <span class="built_in">send_one_flow</span>(s, t);              <span class="comment">// find and send 1 flow f</span></span><br><span class="line">            <span class="keyword">if</span> (f == <span class="number">0</span>) <span class="keyword">break</span>;                       <span class="comment">// if f == 0 stop</span></span><br><span class="line">            mf += f;                                 <span class="comment">// if f &gt; 0, add to mf</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">dinic</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        ll mf = <span class="number">0</span>;                                   <span class="comment">// mf stands for max_flow</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">bfs</span>(s, t)) &#123;                          <span class="comment">// an O(V^2*E) algorithm</span></span><br><span class="line">            last.<span class="built_in">assign</span>(n, <span class="number">0</span>);                         <span class="comment">// important speedup</span></span><br><span class="line">            <span class="keyword">while</span> (ll f = <span class="built_in">dfs</span>(s, t))                   <span class="comment">// exhaust blocking flow</span></span><br><span class="line">                mf += f;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mf;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如何将无权二分图最大匹配转换为最大流问题? 复杂度O(E*sqrt(V))</span></span><br><span class="line"><span class="comment">// Example: https://www.luogu.com.cn/problem/B3605</span></span><br><span class="line"><span class="comment">// 假设左侧有n个点 右侧有m个点</span></span><br><span class="line"><span class="comment">// 1. 将左侧点重新编号1到n</span></span><br><span class="line"><span class="comment">// 2. 将右侧点重新编号n+1到n+m</span></span><br><span class="line"><span class="comment">// 3. 构造虚假源点0和虚假汇点n+m+1</span></span><br><span class="line"><span class="comment">// 4. 源点到点1到n连一条容量为1的边</span></span><br><span class="line"><span class="comment">// 5. 点n+1到n+m连一条容量为1的边到汇点</span></span><br><span class="line"><span class="comment">// 6. 原来的每条从左往右的边容量也为1</span></span><br><span class="line"><span class="comment">// 7. 跑Dinic求最大流 即为最大匹配数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Min Cost Max Flow, takes O(n^2m^2)</span></span><br><span class="line"><span class="keyword">namespace</span> MCMF &#123;</span><br><span class="line">    <span class="keyword">using</span> edge = tuple&lt;<span class="type">int</span>, ll, ll, ll&gt;;</span><br><span class="line">    <span class="keyword">constexpr</span> ll INF = <span class="number">1e18</span>;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    ll totalCost;</span><br><span class="line">    vector&lt;edge&gt; EL;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; AL;</span><br><span class="line">    vector&lt;ll&gt; d;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; last;</span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; vis;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        n = <span class="number">0</span>;</span><br><span class="line">        totalCost = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">decltype</span>(EL)().<span class="built_in">swap</span>(EL);</span><br><span class="line">        <span class="keyword">decltype</span>(AL)().<span class="built_in">swap</span>(AL);</span><br><span class="line">        <span class="keyword">decltype</span>(d)().<span class="built_in">swap</span>(d);</span><br><span class="line">        <span class="keyword">decltype</span>(last)().<span class="built_in">swap</span>(last);</span><br><span class="line">        <span class="keyword">decltype</span>(vis)().<span class="built_in">swap</span>(vis);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n_)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">reset</span>();</span><br><span class="line">        n = n_;</span><br><span class="line">        d.<span class="built_in">resize</span>(n);</span><br><span class="line">        vis.<span class="built_in">resize</span>(n);</span><br><span class="line">        AL.<span class="built_in">resize</span>(n);</span><br><span class="line">        last.<span class="built_in">resize</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SPFA to find if there is an augmenting path</span></span><br><span class="line">    <span class="comment">// in residual graph</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">fill</span>(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>(), INF);</span><br><span class="line">        d[s] = <span class="number">0</span>;</span><br><span class="line">        vis[s] = <span class="literal">true</span>;</span><br><span class="line">        queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(s);</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            vis[u] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;idx : AL[u]) &#123;</span><br><span class="line">                <span class="keyword">auto</span> &amp;[v, cap, flow, cost] = EL[idx];</span><br><span class="line">                <span class="keyword">if</span> (cap &gt; flow &amp;&amp; d[v] &gt; d[u] + cost) &#123;</span><br><span class="line">                    d[v] = d[u] + cost;</span><br><span class="line">                    <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">                        q.<span class="built_in">push</span>(v);</span><br><span class="line">                        vis[v] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d[t] != INF;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ll <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> t, ll f = INF)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == t || f == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> f;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> &amp;i = last[u]; i &lt; (<span class="type">int</span>) AL[u].<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">auto</span> &amp;[v, cap, flow, cost] = EL[AL[u][i]];</span><br><span class="line">            <span class="keyword">if</span> (!vis[v] &amp;&amp; d[v] == d[u] + cost) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ll pushed = <span class="built_in">dfs</span>(v, t, <span class="built_in">min</span>(f, cap - flow))) &#123;</span><br><span class="line">                    totalCost += pushed * cost;</span><br><span class="line">                    flow += pushed;</span><br><span class="line">                    <span class="keyword">auto</span> &amp;[rv, rcap, rflow, rcost]</span><br><span class="line">                    = EL[AL[u][i] ^ <span class="number">1</span>];    <span class="comment">// back edge</span></span><br><span class="line">                    rflow -= pushed;</span><br><span class="line">                    vis[u] = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">return</span> pushed;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, ll w, ll c,</span></span></span><br><span class="line"><span class="params"><span class="function">                 <span class="type">bool</span> directed = <span class="literal">true</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == v) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        EL.<span class="built_in">emplace_back</span>(v, w, <span class="number">0</span>, c);</span><br><span class="line">        AL[u].<span class="built_in">emplace_back</span>((<span class="type">int</span>) EL.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">        EL.<span class="built_in">emplace_back</span>(u, directed ? <span class="number">0</span> : w, <span class="number">0</span>, -c);</span><br><span class="line">        AL[v].<span class="built_in">emplace_back</span>((<span class="type">int</span>) EL.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">pair&lt;ll, ll&gt; <span class="title">mcmf</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        ll mf = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">spfa</span>(s, t)) &#123;</span><br><span class="line">            <span class="built_in">fill</span>(last.<span class="built_in">begin</span>(), last.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">while</span> (ll f = <span class="built_in">dfs</span>(s, t)) &#123;</span><br><span class="line">                mf += f;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;mf, totalCost&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Usage: for a directed graph</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n, m, s, t;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;</span><br><span class="line">        MCMF::<span class="built_in">init</span>(n);</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        ll capacity, cost;</span><br><span class="line">        <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">            cin &gt;&gt; u &gt;&gt; v &gt;&gt; capacity &gt;&gt; cost;</span><br><span class="line">            MCMF::<span class="built_in">addEdge</span>(u, v, capacity, cost);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> ans = MCMF::<span class="built_in">mcmf</span>(s, t);</span><br><span class="line">        cout &lt;&lt; ans.first &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        cout &lt;&lt; ans.second &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果一个图是完全图 如何求出它的带权二分图最大匹配?</span></span><br><span class="line"><span class="comment">// 可以规约为最小费用最大流问题</span></span><br><span class="line"><span class="comment">// 1. 构造虚假源点s并连上所有左边的点 容量1费用0</span></span><br><span class="line"><span class="comment">// 2. 构造虚假汇点t并被所有右边的点连上 容量1费用0</span></span><br><span class="line"><span class="comment">// 3. 所有左边的点连右边的点的容量为1 费用为权重</span></span><br><span class="line"><span class="comment">// 4. 跑mcmf 最小费用即为原最大匹配数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// How to check if and only if an edge E is on the shortest 求边是否在u到v的最短路上</span></span><br><span class="line"><span class="comment">// path from u to v in an undirected graph:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 1. Get dis1.at(i) = the shortest path from u to i by Dij (or the shortest path from i to u by Dij )</span></span><br><span class="line"><span class="comment">// 2. Get dis2.at(i) = the shortest path from v to i by Dij (or the shortest path from i to v by Dij )</span></span><br><span class="line"><span class="comment">// 3. For each edge E:(a, b) -&gt; w,</span></span><br><span class="line"><span class="comment">// dis1.at(a) + w + dis2.at(b) = shortest path from u to v</span></span><br><span class="line"><span class="comment">// OR</span></span><br><span class="line"><span class="comment">// dis2.at(a) + w + dis1.at(b) = shortest path from u to v</span></span><br><span class="line"><span class="comment">// &lt;=&gt; the E:(a, b) -&gt; w is on the shortest path from u to v</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 格雷码生成</span></span><br><span class="line"><span class="comment">// 1. k位格雷码从k个0开始</span></span><br><span class="line"><span class="comment">// 2. 翻转最低位得到下一个格雷码 比如000-&gt;001</span></span><br><span class="line"><span class="comment">// 3. 把最右边的1的左边翻位得到下一个格雷码 比如010-&gt;110</span></span><br><span class="line"><span class="comment">// 4. 重复2 3步 直到生成2^k-1个格雷码为止</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 求第n个格雷码</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">g</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n ^ (n &gt;&gt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据格雷码求其排名 从0开始</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rev_g</span><span class="params">(<span class="type">int</span> g)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; g; g &gt;&gt;= <span class="number">1</span>) n ^= g;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Kruskal重构树</span></span><br><span class="line"><span class="comment">// https://leetcode.com/problems/checking-existence-of-edge-length-limited-paths-ii/</span></span><br><span class="line"><span class="keyword">namespace</span> KruskalReconstructionTree &#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; AL; <span class="comment">// 重构树</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; weight; <span class="comment">// 重构树点权</span></span><br><span class="line">    <span class="keyword">namespace</span> DSU &#123; <span class="comment">// 没有启发式合并</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; father;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(father);</span><br><span class="line">            father.<span class="built_in">resize</span>(n+<span class="number">5</span>);</span><br><span class="line">            <span class="built_in">iota</span>(father.<span class="built_in">begin</span>(),father.<span class="built_in">end</span>(),<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (x != father[x]) &#123;</span><br><span class="line">                father[x] = <span class="built_in">find</span>(father[x]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> father[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">            x = <span class="built_in">find</span>(x);</span><br><span class="line">            y = <span class="built_in">find</span>(y);</span><br><span class="line">            <span class="keyword">if</span> (x == y) <span class="keyword">return</span>;</span><br><span class="line">            father[y] = x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">isSameGroup</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">namespace</span> LCA &#123;</span><br><span class="line">        <span class="keyword">constexpr</span> <span class="type">int</span> MAXN = <span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line">        bitset&lt;MAXN&gt; vis;</span><br><span class="line">        <span class="type">int</span> dfn,l,n;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; dfsIn,dfsOut;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; fa;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">pre</span><span class="params">(<span class="type">int</span> numberOfNodes)</span> </span>&#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(dfsIn);</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(dfsOut);</span><br><span class="line">            <span class="keyword">decltype</span>(fa)().<span class="built_in">swap</span>(fa);</span><br><span class="line">            n = numberOfNodes;</span><br><span class="line">            dfn = <span class="number">0</span>;</span><br><span class="line">            l = <span class="built_in">ceil</span>(<span class="built_in">log2</span>(n));</span><br><span class="line">            dfsIn.<span class="built_in">resize</span>(n);</span><br><span class="line">            dfsOut.<span class="built_in">resize</span>(n);</span><br><span class="line">            fa.<span class="built_in">resize</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(l+<span class="number">1</span>));</span><br><span class="line">            vis.<span class="built_in">reset</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">isAncestorOf</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> dfsIn[u] &lt;= dfsIn[v] &amp;&amp; dfsOut[u] &gt;= dfsOut[v];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> father)</span> </span>&#123;</span><br><span class="line">            vis[u] = <span class="literal">true</span>;</span><br><span class="line">            dfsIn[u] = ++dfn;</span><br><span class="line">            fa[u][<span class="number">0</span>] = father;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= l; ++i) &#123;</span><br><span class="line">                fa[u][i] = fa[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;v : AL[u]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v != father) <span class="built_in">dfs</span>(v,u);</span><br><span class="line">            &#125;</span><br><span class="line">            dfsOut[u] = ++dfn;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isAncestorOf</span>(u,v)) <span class="keyword">return</span> u;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isAncestorOf</span>(v,u)) <span class="keyword">return</span> v;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = l; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">isAncestorOf</span>(fa[u][i],v)) &#123;</span><br><span class="line">                    u = fa[u][i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> root)</span> </span>&#123;</span><br><span class="line">            <span class="built_in">dfs</span>(root,root);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> u,v,w;</span><br><span class="line">        <span class="built_in">Edge</span>() = <span class="keyword">default</span>;</span><br><span class="line">        <span class="built_in">Edge</span>(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w) : <span class="built_in">u</span>(u),<span class="built_in">v</span>(v),<span class="built_in">w</span>(w)&#123;&#125;</span><br><span class="line">        <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Edge &amp;e) <span class="type">const</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> w &lt; e.w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">construct</span><span class="params">(<span class="type">int</span> n, vector&lt;Edge&gt; edgeList)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当求两点间所有简单路径上最小值的最大值 按边权从小到大排序</span></span><br><span class="line">        <span class="comment">// 当求两点间所有简单路径上最大值的最小值 按边权从大到小排序</span></span><br><span class="line">        <span class="built_in">sort</span>(edgeList.<span class="built_in">begin</span>(),edgeList.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> m = (<span class="type">int</span>)edgeList.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> m = (<span class="type">int</span>)edgeList.<span class="built_in">size</span>();</span><br><span class="line">        weight.<span class="built_in">resize</span>(n+m+<span class="number">1</span>);</span><br><span class="line">        AL.<span class="built_in">resize</span>(n+m+<span class="number">1</span>);</span><br><span class="line">        DSU::<span class="built_in">init</span>(n+m+<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> u,v,w,rootOfU,rootOfV;</span><br><span class="line">        <span class="type">int</span> id = n;</span><br><span class="line">        <span class="comment">// 构建Kruskal重构树</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;i : edgeList) &#123;</span><br><span class="line">            u = i[<span class="number">0</span>];</span><br><span class="line">            v = i[<span class="number">1</span>];</span><br><span class="line">            w = i[<span class="number">2</span>];</span><br><span class="line">            rootOfU = DSU::<span class="built_in">find</span>(u);</span><br><span class="line">            rootOfV = DSU::<span class="built_in">find</span>(v);</span><br><span class="line">            <span class="keyword">if</span> (rootOfU != rootOfV) &#123;</span><br><span class="line">                weight[id] = w;</span><br><span class="line">                <span class="comment">// 将两个集合的根作为新节点的左右子并合并</span></span><br><span class="line">                DSU::<span class="built_in">merge</span>(id, rootOfU);</span><br><span class="line">                DSU::<span class="built_in">merge</span>(id, rootOfV);</span><br><span class="line">                AL[id].<span class="built_in">emplace_back</span>(rootOfU);</span><br><span class="line">                AL[rootOfU].<span class="built_in">emplace_back</span>(id);</span><br><span class="line">                AL[id].<span class="built_in">emplace_back</span>(rootOfV);</span><br><span class="line">                AL[rootOfV].<span class="built_in">emplace_back</span>(id);</span><br><span class="line">                ++id;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        LCA::<span class="built_in">pre</span>(id);</span><br><span class="line">        <span class="comment">// 对所有未访问的节点进行dfs 避免森林的情况</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; id; ++i) &#123;</span><br><span class="line">            <span class="comment">// 从集合的根上进行dfs</span></span><br><span class="line">            <span class="keyword">if</span> (!LCA::vis[i]) LCA::<span class="built_in">init</span>(DSU::<span class="built_in">find</span>(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 求两点间所有简单路径上最小值的最大值 或 两点间所有简单路径上最大值的最小值</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 两点不连通 返回-1</span></span><br><span class="line">        <span class="keyword">if</span> (DSU::<span class="built_in">find</span>(u) != DSU::<span class="built_in">find</span>(v)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> weight[LCA::<span class="built_in">lca</span>(u,v)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// An implementation of Suffix Array with Induced-Sort</span></span><br><span class="line"><span class="comment">// Can construct SA in O(n)</span></span><br><span class="line"><span class="keyword">namespace</span> SA &#123;</span><br><span class="line">    <span class="comment">// Constant booleans</span></span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">bool</span> L_TYPE = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">bool</span> S_TYPE = !L_TYPE;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sais</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> n = (<span class="type">int</span>) s.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> maxValue = *<span class="built_in">max_element</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>()) + <span class="number">1</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">SA</span><span class="params">(n + <span class="number">1</span>, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">bucket</span><span class="params">(maxValue)</span>, <span class="title">lbucket</span><span class="params">(maxValue)</span>, <span class="title">sbucket</span><span class="params">(maxValue)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x : s) ++bucket[x];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; maxValue; ++i) &#123;</span><br><span class="line">            bucket[i] += bucket[i - <span class="number">1</span>];</span><br><span class="line">            lbucket[i] = bucket[i - <span class="number">1</span>];</span><br><span class="line">            sbucket[i] = bucket[i] - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Confirm the type and the position of &#x27;*&#x27;</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">type</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        type[n] = S_TYPE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            type[i] = (s[i] &lt; s[i + <span class="number">1</span>] ? S_TYPE : (s[i] &gt; s[i + <span class="number">1</span>] ? L_TYPE : type[i + <span class="number">1</span>]));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Define helper lambda functions</span></span><br><span class="line">        <span class="keyword">auto</span> is_lms_char = [&amp;](<span class="type">int</span> i) &#123;</span><br><span class="line">            <span class="keyword">return</span> i &gt; <span class="number">0</span> &amp;&amp; type[i] == S_TYPE &amp;&amp; type[i - <span class="number">1</span>] == L_TYPE;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">auto</span> equal_substring = [&amp;](<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[x] != s[y]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                ++x;</span><br><span class="line">                ++y;</span><br><span class="line">            &#125; <span class="keyword">while</span> (!<span class="built_in">is_lms_char</span>(x) &amp;&amp; !<span class="built_in">is_lms_char</span>(y));</span><br><span class="line">            <span class="keyword">return</span> s[x] == s[y];</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">auto</span> induced_sort = [&amp;]() &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (SA[i] &gt; <span class="number">0</span> &amp;&amp; type[SA[i] - <span class="number">1</span>] == L_TYPE) &#123;</span><br><span class="line">                    SA[lbucket[s[SA[i] - <span class="number">1</span>]]++] = SA[i] - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; maxValue; ++i) &#123;</span><br><span class="line">                sbucket[i] = bucket[i] - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (SA[i] &gt; <span class="number">0</span> &amp;&amp; type[SA[i] - <span class="number">1</span>] == S_TYPE) &#123;</span><br><span class="line">                    SA[sbucket[s[SA[i] - <span class="number">1</span>]]--] = SA[i] - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; pos;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (type[i] == S_TYPE &amp;&amp; type[i - <span class="number">1</span>] == L_TYPE) &#123;</span><br><span class="line">                pos.<span class="built_in">emplace_back</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x : pos) SA[sbucket[s[x]]--] = x;</span><br><span class="line">        <span class="built_in">induced_sort</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">name</span><span class="params">(n + <span class="number">1</span>, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> lx = <span class="number">-1</span>, cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;x : SA) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">is_lms_char</span>(x)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (lx &gt;= <span class="number">0</span> &amp;&amp; !<span class="built_in">equal_substring</span>(lx, x)) &#123;</span><br><span class="line">                    ++cnt;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (lx &gt;= <span class="number">0</span> &amp;&amp; cnt == name[lx]) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                name[x] = cnt;</span><br><span class="line">                lx = x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; s1;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;x : name) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x != <span class="number">-1</span>) &#123;</span><br><span class="line">                s1.<span class="built_in">emplace_back</span>(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; sa1;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="type">int</span> n1 = s1.<span class="built_in">size</span>();</span><br><span class="line">            sa1.<span class="built_in">resize</span>(n1);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n1; ++i) sa1[s1[i]] = i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sa1 = <span class="built_in">sais</span>(s1);</span><br><span class="line">        &#125;</span><br><span class="line">        lbucket[<span class="number">0</span>] = sbucket[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; maxValue; ++i) &#123;</span><br><span class="line">            lbucket[i] = bucket[i - <span class="number">1</span>];</span><br><span class="line">            sbucket[i] = bucket[i] - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">fill</span>(SA.<span class="built_in">begin</span>(), SA.<span class="built_in">end</span>(), <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = (<span class="type">int</span>) sa1.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            SA[sbucket[s[pos[sa1[i]]]]--] = pos[sa1[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">induced_sort</span>();</span><br><span class="line">        <span class="keyword">return</span> SA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; sa;</span><br><span class="line">    <span class="comment">// Construct the suffix array for &#x27;str&#x27;</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">const</span> string &amp;str)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">s</span><span class="params">(str.begin(), str.end())</span></span>;</span><br><span class="line">        s.<span class="built_in">emplace_back</span>(<span class="number">0</span>);</span><br><span class="line">        sa = <span class="built_in">sais</span>(s);</span><br><span class="line">        sa = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(sa.<span class="built_in">begin</span>() + <span class="number">1</span>, sa.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Find all occurrences of &#x27;text&#x27; in &#x27;pattern&#x27;</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">saFind</span><span class="params">(<span class="type">const</span> string &amp;pattern, <span class="type">const</span> string &amp;text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> r = <span class="built_in">equal_range</span>(sa.<span class="built_in">begin</span>(), sa.<span class="built_in">end</span>(), <span class="number">-1</span>, [&amp;](<span class="type">int</span> i, <span class="type">int</span> j) &#123;</span><br><span class="line">            <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(i, j);</span><br><span class="line">                a = <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> a * text.<span class="built_in">compare</span>(i, pattern.<span class="built_in">size</span>(), pattern) &lt; <span class="number">0</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="function">vector <span class="title">occ</span><span class="params">(r.first, r.second)</span></span>;</span><br><span class="line">        <span class="built_in">sort</span>(occ.<span class="built_in">begin</span>(), occ.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;i : occ) cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Prufer &#123;</span><br><span class="line">    <span class="comment">// 对树求prufer序列 节点从1开始</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">prufer_code</span><span class="params">(<span class="type">const</span> vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; AL)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = (<span class="type">int</span>)AL.<span class="built_in">size</span>();</span><br><span class="line">        priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;&gt;&gt; leaves;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">degree</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">removed</span><span class="params">(n+<span class="number">1</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            degree[i] = (<span class="type">int</span>)AL[i].<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">if</span> (degree[i] == <span class="number">1</span>) &#123;</span><br><span class="line">                leaves.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">while</span> (!leaves.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> u = leaves.<span class="built_in">top</span>();</span><br><span class="line">            leaves.<span class="built_in">pop</span>();</span><br><span class="line">            removed[u] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;v : AL[u]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!removed[v]) &#123;</span><br><span class="line">                    ans.<span class="built_in">emplace_back</span>(v);</span><br><span class="line">                    --degree[v];</span><br><span class="line">                    <span class="keyword">if</span> (degree[v] == <span class="number">1</span>) &#123;</span><br><span class="line">                        leaves.<span class="built_in">push</span>(v);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 根据Prufer序列重建树 节点从1开始</span></span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; <span class="built_in">prufer_decode</span>(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; prufer_code) &#123;</span><br><span class="line">        vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; edgeList;</span><br><span class="line">        <span class="type">int</span> n = (<span class="type">int</span>)prufer_code.<span class="built_in">size</span>() + <span class="number">1</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">degree</span><span class="params">(n, <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : prufer_code) &#123;</span><br><span class="line">            ++degree[i];</span><br><span class="line">        &#125;</span><br><span class="line">        priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;&gt;&gt; leaves;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (degree[i] == <span class="number">1</span>) &#123;</span><br><span class="line">                leaves.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;v : prufer_code) &#123;</span><br><span class="line">            <span class="type">int</span> u = leaves.<span class="built_in">top</span>();</span><br><span class="line">            leaves.<span class="built_in">pop</span>();</span><br><span class="line">            edgeList.<span class="built_in">emplace_back</span>(u, v);</span><br><span class="line">            --degree[v];</span><br><span class="line">            <span class="keyword">if</span> (degree[v] == <span class="number">1</span>) &#123;</span><br><span class="line">                leaves.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> edgeList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// coordinate compression (离散化)</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">coordinateCompression</span><span class="params">(vector&lt;<span class="type">int</span>&gt; a)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; b = a;</span><br><span class="line">    <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());</span><br><span class="line">    a.<span class="built_in">erase</span>(<span class="built_in">unique</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>()), a.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">int</span> n = (<span class="type">int</span>)b.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        b[i] = <span class="built_in">lower_bound</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>(),b[i]) - a.<span class="built_in">begin</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过前缀异或和求子序列异或和 假设索引从1开始</span></span><br><span class="line"><span class="comment">// pre[0] = 0</span></span><br><span class="line"><span class="comment">// pre[i] = A[1] (i = 1) </span></span><br><span class="line"><span class="comment">// pre[i] = pre[i-1]^A[i] (i &gt;= 2)</span></span><br><span class="line"><span class="comment">// Then:</span></span><br><span class="line"><span class="comment">// If 2&lt;=l&lt;=r&lt;=n, then</span></span><br><span class="line"><span class="comment">// pre[l-1]^pre[r] = (A[1]^A[2]^...^A[l-1])^(A[1]^A[2]^...^A[l-1]^A[l]^...^A[r])</span></span><br><span class="line"><span class="comment">// = A[l]^...^A[r]</span></span><br><span class="line"><span class="keyword">namespace</span> RangeXorSum &#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; pre;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rangeXorSum</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> pre[r];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre[l<span class="number">-1</span>]^pre[r];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;arr)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = (<span class="type">int</span>)arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">swap</span>(pre);</span><br><span class="line">        pre.<span class="built_in">resize</span>(n+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            pre[i] = pre[i<span class="number">-1</span>]^arr[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高精度计算</span></span><br><span class="line"><span class="keyword">namespace</span> BigNum &#123;</span><br><span class="line">    <span class="function">string <span class="title">add</span><span class="params">(<span class="type">const</span> string&amp; a, <span class="type">const</span> string&amp; b)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = (<span class="type">int</span>)<span class="built_in">max</span>(a.<span class="built_in">size</span>(), b.<span class="built_in">size</span>()) + <span class="number">1</span>;</span><br><span class="line">        <span class="function">string <span class="title">ans</span><span class="params">(n, <span class="string">&#x27;0&#x27;</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> i = (<span class="type">int</span>)a.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> j = (<span class="type">int</span>)b.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            x = (i &gt;= <span class="number">0</span>) ? (a[i] - <span class="string">&#x27;0&#x27;</span>) : <span class="number">0</span>;</span><br><span class="line">            y = (j &gt;= <span class="number">0</span>) ? (b[j] - <span class="string">&#x27;0&#x27;</span>) : <span class="number">0</span>;</span><br><span class="line">            ans[k] += x + y;</span><br><span class="line">            <span class="keyword">if</span> (ans[k] - <span class="string">&#x27;0&#x27;</span> &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">                ++ans[k+<span class="number">1</span>];</span><br><span class="line">                ans[k] -= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            --i; --j; ++k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ans.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; ans.<span class="built_in">back</span>() == <span class="string">&#x27;0&#x27;</span>) ans.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(),ans.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Network Flow in O(V^2*sqrt(E))</span></span><br><span class="line"><span class="comment">// https://github.com/kth-competitive-programming/kactl/blob/main/kactl.pdf</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">PushRelabel</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> dest, back;</span><br><span class="line">        ll f, c;</span><br><span class="line">    &#125;;</span><br><span class="line">    vector&lt;vector&lt;Edge&gt;&gt; g;</span><br><span class="line">    vector&lt;ll&gt; ec;</span><br><span class="line">    vector&lt;Edge *&gt; cur;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; hs;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; H;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">PushRelabel</span><span class="params">(<span class="type">int</span> n)</span> : g(n), ec(n), cur(n), hs(n&lt;&lt;<span class="number">1</span>), H(n) &#123;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t, ll cap, ll rcap = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == t) <span class="keyword">return</span>;</span><br><span class="line">        g[s].<span class="built_in">push_back</span>(&#123;t, (<span class="type">int</span>) g[t].<span class="built_in">size</span>(), <span class="number">0</span>, cap&#125;);</span><br><span class="line">        g[t].<span class="built_in">push_back</span>(&#123;s, (<span class="type">int</span>) g[s].<span class="built_in">size</span>() - <span class="number">1</span>, <span class="number">0</span>, rcap&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addFlow</span><span class="params">(Edge &amp;e, ll f)</span> </span>&#123;</span><br><span class="line">        Edge &amp;back = g[e.dest][e.back];</span><br><span class="line">        <span class="keyword">if</span> (!ec[e.dest] &amp;&amp; f) hs[H[e.dest]].<span class="built_in">push_back</span>(e.dest);</span><br><span class="line">        e.f += f;</span><br><span class="line">        e.c -= f;</span><br><span class="line">        ec[e.dest] += f;</span><br><span class="line">        back.f -= f;</span><br><span class="line">        back.c += f;</span><br><span class="line">        ec[back.dest] -= f;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ll <span class="title">calc</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> v = (<span class="type">int</span>) g.<span class="built_in">size</span>();</span><br><span class="line">        H[s] = v;</span><br><span class="line">        ec[t] = <span class="number">1</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">co</span><span class="params">(v &lt;&lt; <span class="number">1</span>)</span></span>;</span><br><span class="line">        co[<span class="number">0</span>] = v - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; v; ++i) cur[i] = g[i].<span class="built_in">data</span>();</span><br><span class="line">        <span class="keyword">for</span> (Edge &amp;e: g[s]) <span class="built_in">addFlow</span>(e, e.c);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> hi = <span class="number">0</span>;;) &#123;</span><br><span class="line">            <span class="keyword">while</span> (hs[hi].<span class="built_in">empty</span>()) <span class="keyword">if</span> (!hi--) <span class="keyword">return</span> -ec[s];</span><br><span class="line">            <span class="type">int</span> u = hs[hi].<span class="built_in">back</span>();</span><br><span class="line">            hs[hi].<span class="built_in">pop_back</span>();</span><br><span class="line">            <span class="keyword">while</span> (ec[u] &gt; <span class="number">0</span>)  <span class="comment">// discharge u</span></span><br><span class="line">                <span class="keyword">if</span> (cur[u] == g[u].<span class="built_in">data</span>() + (<span class="type">int</span>) g[u].<span class="built_in">size</span>()) &#123;</span><br><span class="line">                    H[u] = <span class="number">1e9</span>;</span><br><span class="line">                    <span class="keyword">for</span> (Edge &amp;e: g[u])</span><br><span class="line">                        <span class="keyword">if</span> (e.c &amp;&amp; H[u] &gt; H[e.dest] + <span class="number">1</span>)</span><br><span class="line">                            H[u] = H[e.dest] + <span class="number">1</span>, cur[u] = &amp;e;</span><br><span class="line">                    <span class="keyword">if</span> (++co[H[u]], !--co[hi] &amp;&amp; hi &lt; v)</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; v; ++i)</span><br><span class="line">                            <span class="keyword">if</span> (hi &lt; H[i] &amp;&amp; H[i] &lt; v)</span><br><span class="line">                                --co[H[i]], H[i] = v + <span class="number">1</span>;</span><br><span class="line">                    hi = H[u];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur[u]-&gt;c &amp;&amp; H[u] == H[cur[u]-&gt;dest] + <span class="number">1</span>)</span><br><span class="line">                    <span class="built_in">addFlow</span>(*cur[u], <span class="built_in">min</span>(ec[u], cur[u]-&gt;c));</span><br><span class="line">                <span class="keyword">else</span> ++cur[u];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">leftOfMinCut</span><span class="params">(<span class="type">int</span> a)</span> </span>&#123; <span class="keyword">return</span> H[a] &gt;= (<span class="type">int</span>) g.<span class="built_in">size</span>(); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Rolling hash 滚动哈希</span></span><br><span class="line"><span class="keyword">namespace</span> RH &#123;</span><br><span class="line">    <span class="keyword">constexpr</span> ll MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">    <span class="keyword">constexpr</span> ll P = <span class="number">31</span>;</span><br><span class="line">    unordered_set&lt;ll&gt; vis;</span><br><span class="line">    vector&lt;ll&gt; Pow;</span><br><span class="line">    vector&lt;ll&gt; Pow_inv;</span><br><span class="line">    vector&lt;ll&gt; H;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="function">ll <span class="title">multmod</span><span class="params">(ll a, ll b, ll m)</span> </span>&#123;</span><br><span class="line">        a = (a % m + m) % m;</span><br><span class="line">        b = (b % m + m) % m;</span><br><span class="line">        <span class="keyword">return</span> ((a * b - (ll) ((<span class="type">long</span> <span class="type">double</span>) a / m * b) * m) % m + m) % m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">powmod</span><span class="params">(ll a, ll b, ll m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        ll r;</span><br><span class="line">        <span class="keyword">for</span> (r = <span class="number">1</span>, a %= m; b; a = <span class="built_in">multmod</span>(a, a, m), b &gt;&gt;= <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> (b % <span class="number">2</span>) r = <span class="built_in">multmod</span>(r, a, m);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pre</span><span class="params">(<span class="type">const</span> string&amp; s)</span> </span>&#123;</span><br><span class="line">        n = (<span class="type">int</span>)s.<span class="built_in">size</span>();</span><br><span class="line">        Pow.<span class="built_in">resize</span>(n);</span><br><span class="line">        Pow_inv.<span class="built_in">resize</span>(n);</span><br><span class="line">        Pow[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        Pow_inv[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            Pow[i] = (Pow[i<span class="number">-1</span>] * P) % MOD;</span><br><span class="line">            Pow_inv[i] = <span class="built_in">powmod</span>(Pow[i], MOD - <span class="number">2</span>, MOD);</span><br><span class="line">        &#125;</span><br><span class="line">        H.<span class="built_in">resize</span>(n);</span><br><span class="line">        ll h = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            h = (h + (s[i] - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>) * Pow[i]) % MOD;</span><br><span class="line">            H[i] = h;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">getHash</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> H[r];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">multmod</span>(H[r] - H[l<span class="number">-1</span>] + MOD, Pow_inv[l], MOD);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Trie树模版</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> LETTERS = <span class="number">26</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    Node* children[LETTERS];</span><br><span class="line">    <span class="type">bool</span> isEnd; <span class="comment">// 表示是否存在以该节点作为结尾的单词 或者用个counter表示树中该单词出现的次数</span></span><br><span class="line">    <span class="built_in">Node</span>() &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; LETTERS; ++i) &#123;</span><br><span class="line">            children[i] = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        isEnd = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line">    Node* root;</span><br><span class="line">    <span class="built_in">Trie</span>() &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="built_in">Node</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        Node* node = root;</span><br><span class="line">        <span class="type">int</span> n = (<span class="type">int</span>)word.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!node-&gt;children[word[i] - <span class="string">&#x27;a&#x27;</span>]) &#123;</span><br><span class="line">                node-&gt;children[word[i] - <span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> <span class="built_in">Node</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            node = node-&gt;children[word[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        node-&gt;isEnd = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">search</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        Node* node = root;</span><br><span class="line">        <span class="type">int</span> n = (<span class="type">int</span>)word.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!node-&gt;children[word[i] - <span class="string">&#x27;a&#x27;</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node-&gt;children[word[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node-&gt;isEnd;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">startsWith</span><span class="params">(string prefix)</span> </span>&#123;</span><br><span class="line">        Node* node = root;</span><br><span class="line">        <span class="type">int</span> n = (<span class="type">int</span>)prefix.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!node-&gt;children[prefix[i] - <span class="string">&#x27;a&#x27;</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node-&gt;children[prefix[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 01 bfs (bfs with only two different weights)</span></span><br><span class="line"><span class="keyword">namespace</span> ZeroOneBFS &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> s, <span class="type">const</span> vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">d</span><span class="params">(n, INF)</span></span>;</span><br><span class="line">        d[s] = <span class="number">0</span>;</span><br><span class="line">        deque&lt;<span class="type">int</span>&gt; dq;</span><br><span class="line">        dq.<span class="built_in">push_front</span>(s);</span><br><span class="line">        <span class="keyword">while</span> (!dq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> v = dq.<span class="built_in">front</span>();</span><br><span class="line">            dq.<span class="built_in">pop_front</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; edge : adj[v]) &#123;</span><br><span class="line">                <span class="type">int</span> u = edge.first;</span><br><span class="line">                <span class="type">int</span> w = edge.second;</span><br><span class="line">                <span class="keyword">if</span> (d[v] + w &lt; d[u]) &#123;</span><br><span class="line">                    d[u] = d[v] + w;</span><br><span class="line">                    <span class="keyword">if</span> (w == <span class="number">1</span>) <span class="comment">// larger weights on the back</span></span><br><span class="line">                        dq.<span class="built_in">push_back</span>(u);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        dq.<span class="built_in">push_front</span>(u);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> ZeroOneKnapSack &#123;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">int</span> N = <span class="number">500</span>;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">int</span> W_SUM = <span class="number">1200</span>;</span><br><span class="line">    <span class="comment">// 0-1 knapsack</span></span><br><span class="line">    <span class="type">int</span> memo[N+<span class="number">5</span>][W_SUM+<span class="number">5</span>];</span><br><span class="line">    <span class="type">int</span> W[N+<span class="number">5</span>];</span><br><span class="line">    <span class="type">int</span> V[N+<span class="number">5</span>];</span><br><span class="line">    <span class="comment">// dp(i, j) = Max value we can have under the current weight restrictions</span></span><br><span class="line">    <span class="comment">// consider all items from 0 to i-1</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> remaining_weight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == N) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (remaining_weight == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (memo[index][remaining_weight] != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> memo[index][remaining_weight];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> result = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (W[index] &gt; remaining_weight) &#123;</span><br><span class="line">            result = <span class="built_in">dp</span>(index + <span class="number">1</span>, remaining_weight);   <span class="comment">// skip</span></span><br><span class="line">            memo[index][remaining_weight] = result;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        result = <span class="built_in">max</span>(<span class="built_in">dp</span>(index + <span class="number">1</span>, remaining_weight), V[index] + <span class="built_in">dp</span>(index + <span class="number">1</span>, remaining_weight - W[index])); <span class="comment">// compare &#x27;take it&#x27; and &#x27;skip&#x27;</span></span><br><span class="line">        memo[index][remaining_weight] = result;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//freopen(&quot;in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">//freopen(&quot;out&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// For unweight graphs, use BFS+vis array to find the shortest path between two nodes, dont use DFS+vis array which only works on weight graphs</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Coding-Template&quot;&gt;&lt;a href=&quot;#Coding-Template&quot; class=&quot;headerlink&quot; title=&quot;Coding Template&quot;&gt;&lt;/a&gt;Coding Template&lt;/h3&gt;&lt;p&gt;This is the full v</summary>
      
    
    
    
    
    <category term="Notes" scheme="https://h-shen.github.io/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://h-shen.github.io/note_05/"/>
    <id>https://h-shen.github.io/note_05/</id>
    <published>2023-11-11T05:42:58.000Z</published>
    <updated>2023-11-12T00:27:54.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Docker-CLI"><a href="#Docker-CLI" class="headerlink" title="Docker CLI"></a>Docker CLI</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker <span class="comment"># 手动开启docker</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker <span class="comment"># 开机自启docker</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br><span class="line">docker info <span class="comment"># 显示docker系统信息</span></span><br><span class="line">docker --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>帮助文档 <a href="https://docs.docker.com/reference/">https://docs.docker.com/reference/</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 镜像命令</span></span><br><span class="line">docker images</span><br><span class="line">docker images --format <span class="string">&quot;table &#123;&#123;.Repository&#125;&#125;\t&#123;&#123;.Tag&#125;&#125;\t&#123;&#123;.ID&#125;&#125;\t&#123;&#123;.CreatedAt&#125;&#125;\t&#123;&#123;.Size&#125;&#125;&quot;</span> <span class="comment"># 显示创建时间</span></span><br><span class="line">docker search --filter is-official=<span class="literal">true</span> --filter stars=3 busybox <span class="comment"># 搜索官方至少为3星busybox仓库</span></span><br><span class="line">docker pull XXXX <span class="comment"># 默认从docker hub拉包</span></span><br><span class="line">docker pull mysql:8.0 <span class="comment"># 指定版本下载</span></span><br><span class="line">docker rmi -f IMAGE <span class="comment"># 根据ID删除镜像</span></span><br><span class="line">docker rmi -f IMAGE_ID1 IMAGE_ID2 IMAGE_ID3 <span class="comment"># 删除多个镜像</span></span><br><span class="line">docker rmi -f $(docker images -a -q)</span><br></pre></td></tr></table></figure><h4 id="容器就是镜像的实例化"><a href="#容器就是镜像的实例化" class="headerlink" title="容器就是镜像的实例化"></a>容器就是镜像的实例化</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos:latest  <span class="comment"># 拉镜像</span></span><br><span class="line">docker run [可选参数] image <span class="comment"># 启动镜像</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line">--name=<span class="string">&quot;container_name&quot;</span>  <span class="comment"># 给容器命名</span></span><br><span class="line">-d, --detach <span class="comment"># 后台运行容器</span></span><br><span class="line">-it<span class="comment"># 使用交互方式运行</span></span><br><span class="line">-p  <span class="comment"># 指定容器端口</span></span><br><span class="line">-p 主机端口:容器端口</span><br><span class="line">-p 容器端口</span><br><span class="line">容器端口</span><br><span class="line">-p IP:主机端口:容器端口</span><br><span class="line">-P  <span class="comment"># 随机指定端口</span></span><br><span class="line">--<span class="built_in">rm</span> <span class="comment"># 退出后自动删除容器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run -i -t centos /bin/bash <span class="comment"># 启动并进入容器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># exit 退出并停止容器</span></span><br><span class="line"><span class="comment"># ctrl p q 退出并不停止容器</span></span><br><span class="line"></span><br><span class="line">docker ps -a <span class="comment"># 查看所有容器</span></span><br><span class="line">docker ps <span class="comment"># 查看当前运行中的容器</span></span><br><span class="line">docker ps -n 3 <span class="comment"># 查看最近的三个容器</span></span><br><span class="line">docker ps -q <span class="comment"># show container id only</span></span><br><span class="line">docker <span class="built_in">rm</span> XXX <span class="comment"># 删除容器 无法删除运行中的容器</span></span><br><span class="line">docker <span class="built_in">rm</span> -f XXX <span class="comment"># 强制删除容器</span></span><br></pre></td></tr></table></figure><h3 id="启动和停止容器"><a href="#启动和停止容器" class="headerlink" title="启动和停止容器"></a>启动和停止容器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器<span class="built_in">id</span></span><br><span class="line">docker restart 容器<span class="built_in">id</span></span><br><span class="line">docker stop 容器<span class="built_in">id</span></span><br><span class="line">docker <span class="built_in">kill</span> 容器<span class="built_in">id</span></span><br></pre></td></tr></table></figure><h3 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker run -d IMAGE_ID 必须要有前台进程 不然会听停止</span></span><br><span class="line"></span><br><span class="line">docker logs container_id <span class="comment"># 查看容器日志</span></span><br><span class="line">docker run -d cents /bin/bash -c <span class="string">&quot;while true;do echo kuangshen;sleep 1;done&quot;</span></span><br><span class="line">docker logs -t -f container_id <span class="comment"># 从头开始查看日志</span></span><br><span class="line">docker top container_id <span class="comment"># 查看容器中的进程信息</span></span><br><span class="line">docker inspect container_id <span class="comment"># 查看容器元信息</span></span><br></pre></td></tr></table></figure><h3 id="进入当前运行的容器"><a href="#进入当前运行的容器" class="headerlink" title="进入当前运行的容器"></a>进入当前运行的容器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -i -t 容器<span class="built_in">id</span> bashshell <span class="comment"># 进入当前容器并新开一个shell</span></span><br><span class="line">docker <span class="built_in">exec</span> -i -t 容器<span class="built_in">id</span> shell命令 <span class="comment"># 进入容器 执行shell命令 退出容器</span></span><br><span class="line">docker attach 容器<span class="built_in">id</span> <span class="comment"># 直接进入当前容器</span></span><br></pre></td></tr></table></figure><h3 id="从容器拷贝文件到主机上或反之"><a href="#从容器拷贝文件到主机上或反之" class="headerlink" title="从容器拷贝文件到主机上或反之"></a>从容器拷贝文件到主机上或反之</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> 容器<span class="built_in">id</span>:容器内文件路径 目的主机文件路径</span><br><span class="line">docker <span class="built_in">cp</span> 目的主机文件路径 容器<span class="built_in">id</span>:容器内文件路径</span><br></pre></td></tr></table></figure><h3 id="例子-配置nginx"><a href="#例子-配置nginx" class="headerlink" title="例子 配置nginx"></a>例子 配置nginx</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker search nginx --filter is-official=<span class="literal">true</span></span><br><span class="line">docker pull nginx:latest</span><br><span class="line">docker run --name <span class="string">&quot;My_Nginx&quot;</span> -d -p 12718:80 nginx</span><br><span class="line">curl localhost:12718 <span class="comment"># 测试是否运行</span></span><br><span class="line">docker <span class="built_in">exec</span> -it NGINX_CONTAINER_ID /bin/bash <span class="comment"># 进入容器</span></span><br><span class="line">docker stop NGINX_CONTAINER_ID <span class="comment"># 停止容器</span></span><br></pre></td></tr></table></figure><h3 id="例子-配置tomcat"><a href="#例子-配置tomcat" class="headerlink" title="例子 配置tomcat"></a>例子 配置tomcat</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker pull tomcat</span><br><span class="line">docker run -d -p 12310:8080 --name tomcat01 tomcat</span><br><span class="line">docker <span class="built_in">exec</span> -i -t tomcat01 /bin/bash</span><br><span class="line"><span class="comment"># 因为tomcat镜像默认最小 所有不必要的功能被阉割 只保证最小运行 所以需要通过下面命令还原</span></span><br><span class="line">docker <span class="built_in">exec</span> -i -t tomcat01 /bin/bash</span><br><span class="line"><span class="built_in">cp</span> -vr webapps.dist/* webapps/</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h3 id="使用portainer管理docker"><a href="#使用portainer管理docker" class="headerlink" title="使用portainer管理docker"></a>使用portainer管理docker</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker volume create portainer_data</span><br><span class="line">docker run -d -p 8000:8000 -p 9443:9443 --name portainer \</span><br><span class="line">    --restart=always \</span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    -v portainer_data:/data \</span><br><span class="line">    cr.portainer.io/portainer/portainer-ce:2.9.3</span><br><span class="line"><span class="comment"># 访问测试 https://localhost:9443</span></span><br></pre></td></tr></table></figure><h3 id="Commit-提交容器形成新镜像"><a href="#Commit-提交容器形成新镜像" class="headerlink" title="Commit 提交容器形成新镜像"></a>Commit 提交容器形成新镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -m <span class="string">&quot;描述信息&quot;</span> -a <span class="string">&quot;作者名&quot;</span> 容器<span class="built_in">id</span> 目标镜像名:[TAG]</span><br></pre></td></tr></table></figure><h4 id="容器数据卷-数据持久化-比如mysql数据在本地"><a href="#容器数据卷-数据持久化-比如mysql数据在本地" class="headerlink" title="容器数据卷 (数据持久化 比如mysql数据在本地)"></a>容器数据卷 (数据持久化 比如mysql数据在本地)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -i -t -v 主机目录:容器内目录</span><br></pre></td></tr></table></figure><h3 id="配置mysql可持久化"><a href="#配置mysql可持久化" class="headerlink" title="配置mysql可持久化"></a>配置mysql可持久化</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br><span class="line"><span class="built_in">touch</span> ~/temp</span><br><span class="line">docker run -d -v ~/temp/conf:/etc/mysql/conf.d -v ~/temp/data:/var/lib/mysql -p 3310:3306 --name mysql01 -e MYSQL_ROOT_PASSWORD=123456 mysql:8.0</span><br></pre></td></tr></table></figure><h3 id="具名和匿名挂载"><a href="#具名和匿名挂载" class="headerlink" title="具名和匿名挂载"></a>具名和匿名挂载</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-v 容器内挂载</span><br><span class="line">docker volume <span class="built_in">ls</span> <span class="comment"># 查看所有挂载 包括具名和匿名的</span></span><br><span class="line">docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginx:latest <span class="comment"># 具名挂载</span></span><br><span class="line"><span class="comment"># docker -v /宿主机路径:容器内路径 指定路径挂载</span></span><br><span class="line">docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:ro nginx:latest <span class="comment"># read only (rw: read and write 一旦设置了容器权限 则容器对我们挂载出来的内容就限定了)</span></span><br></pre></td></tr></table></figure><h3 id="Dockerfile-用来构建docker镜像的构建文件"><a href="#Dockerfile-用来构建docker镜像的构建文件" class="headerlink" title="Dockerfile 用来构建docker镜像的构建文件"></a>Dockerfile 用来构建docker镜像的构建文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM centos:latest</span><br><span class="line">VOLUME [&quot;volmne1&quot;, &quot;volume2&quot;]</span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f DOCKER_FILE_LOCATION -t new_centos:3.1415 .</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多个mysql数据同步</span></span><br><span class="line"><span class="comment"># 启动3个容器</span></span><br><span class="line">docker run -i -t --name mycentos02 --volumes-from 8101fb5bda0c  972f5a221cad <span class="comment"># 运行镜像972f5a221cad并且挂载继承容器8101fb5bda0c</span></span><br><span class="line"><span class="comment"># volume的生命周期会从创建到没有容器使用它为止 如果持久化到本地 则永远不会被删除</span></span><br></pre></td></tr></table></figure><h3 id="Dockerfile-基础知识"><a href="#Dockerfile-基础知识" class="headerlink" title="Dockerfile 基础知识"></a>Dockerfile 基础知识</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FROM <span class="comment"># 基础镜像</span></span><br><span class="line">MAINTAINER <span class="comment"># 维护者信息</span></span><br><span class="line">RUN <span class="comment"># 镜像构建时候需要运行的命令</span></span><br><span class="line">ADD <span class="comment"># 往镜像中加东西</span></span><br><span class="line">WORKDIR <span class="comment"># 指定镜像工作目录</span></span><br><span class="line">VOLUME <span class="comment"># 定义挂载目录</span></span><br><span class="line">EXPOSE <span class="comment"># 指定对外端口</span></span><br><span class="line">CMD <span class="comment"># 指定容器启动时要执行的命令 只能用一次</span></span><br><span class="line">ENTRYPOINT <span class="comment"># 指定容器启动时要执行的命令 用来命令追加</span></span><br><span class="line">ONBUILD <span class="comment"># 当构建一个被继承Dockerfile时会触发</span></span><br><span class="line">COPY <span class="comment"># 类似ADD 把文件拷贝到镜像中</span></span><br><span class="line">ENV <span class="comment"># 设置环境变量</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">history</span> -H 0389acd48f36 <span class="comment"># 查看镜像构建历史</span></span><br><span class="line">IMAGE          CREATED             CREATED BY                                      SIZE      COMMENT</span><br><span class="line">0389acd48f36   About an hour ago   ENTRYPOINT [<span class="string">&quot;java&quot;</span> <span class="string">&quot;-jar&quot;</span> <span class="string">&quot;/demo-1.0.0.jar&quot;</span>]    0B        buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      About an hour ago   COPY target/demo-1.0.0.jar demo-1.0.0.jar <span class="comment"># …   32.2MB    buildkit.dockerfile.v0</span></span><br><span class="line">&lt;missing&gt;      About an hour ago   MAINTAINER Haohu                                0B        buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      2 weeks ago         /bin/sh -c <span class="built_in">set</span> -eux;   <span class="built_in">arch</span>=<span class="string">&quot;<span class="subst">$(dpkg --print-…   209MB</span></span></span><br><span class="line"><span class="subst"><span class="string">&lt;missing&gt;      2 weeks ago         /bin/sh -c #(nop)</span>  ENV JAVA_VERSION=8u322       0B</span></span><br><span class="line"><span class="string">&lt;missing&gt;      3 weeks ago         /bin/sh -c #(nop)  ENV LANG=C.UTF-8             0B</span></span><br><span class="line"><span class="string">&lt;missing&gt;      3 weeks ago         /bin/sh -c #(nop)  ENV PATH=/usr/local/openj…   0B</span></span><br><span class="line"><span class="string">&lt;missing&gt;      3 weeks ago         /bin/sh -c &#123; echo &#x27;#/bin/sh&#x27;; echo &#x27;echo &quot;</span><span class="variable">$J</span>…   27B</span><br><span class="line">&lt;missing&gt;      3 weeks ago         /bin/sh -c <span class="comment">#(nop)  ENV JAVA_HOME=/usr/local/…   0B</span></span><br><span class="line">&lt;missing&gt;      3 weeks ago         /bin/sh -c <span class="built_in">set</span> -eux;  apt-get update;  apt-g…   11.3MB</span><br><span class="line">&lt;missing&gt;      3 weeks ago         /bin/sh -c apt-get update &amp;&amp; apt-get install…   152MB</span><br><span class="line">&lt;missing&gt;      3 weeks ago         /bin/sh -c <span class="built_in">set</span> -ex;  <span class="keyword">if</span> ! <span class="built_in">command</span> -v gpg &gt; /…   18.9MB</span><br><span class="line">&lt;missing&gt;      3 weeks ago         /bin/sh -c <span class="built_in">set</span> -eux;  apt-get update;  apt-g…   10.7MB</span><br><span class="line">&lt;missing&gt;      3 weeks ago         /bin/sh -c <span class="comment">#(nop)  CMD [&quot;bash&quot;]                 0B</span></span><br><span class="line">&lt;missing&gt;      3 weeks ago         /bin/sh -c <span class="comment">#(nop) ADD file:9cca7f8e4abcd8309…   124MB</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用ghcr io上传镜像到个人github</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$CR_PAT</span>| docker login ghcr.io -u H-Shen --password-stdin</span><br><span class="line">docker tag 0389acd48f36 ghcr.io/h-shen/demo <span class="comment"># 改tag</span></span><br><span class="line">docker push ghcr.io/h-shen/demo <span class="comment"># 推包</span></span><br><span class="line">docker pull ghcr.io/h-shen/demo:latest <span class="comment"># 拉包</span></span><br></pre></td></tr></table></figure><h3 id="Docker-网络"><a href="#Docker-网络" class="headerlink" title="Docker 网络"></a>Docker 网络</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Docker For Mac没有docker0 网桥 不能实现host网络模式 </span></span><br><span class="line"><span class="comment"># linux宿主机能和容器ping通(veth-pair) mac不行因为底层虚拟机实现不支持</span></span><br><span class="line"><span class="comment"># 容器之间可以ping通</span></span><br></pre></td></tr></table></figure><h3 id="通过-–link-进行容器互联"><a href="#通过-–link-进行容器互联" class="headerlink" title="通过 –link 进行容器互联"></a>通过 –link 进行容器互联</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -P --name tomcat01 镜像<span class="built_in">id</span></span><br><span class="line">docker run -d -P --<span class="built_in">link</span> tomcat01 --name tomcat02 镜像<span class="built_in">id</span></span><br><span class="line">docker <span class="built_in">exec</span> -i -t tomcat02 ping tomcat01   <span class="comment"># 此时可以通过容器名ping</span></span><br><span class="line"><span class="comment"># 缺点是link是单向的</span></span><br><span class="line">docker <span class="built_in">exec</span> -i -t tomcat02 <span class="built_in">cat</span> /etc/hosts <span class="comment"># link本质:通过写hosts使得容器名可以ping通</span></span><br></pre></td></tr></table></figure><h3 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">docker network <span class="built_in">ls</span> <span class="comment"># 列出所有docker网络</span></span><br><span class="line"><span class="comment"># docker 网络模式</span></span><br><span class="line"><span class="comment"># 1. bridge 桥接 (默认)</span></span><br><span class="line"><span class="comment"># 2. none 不配置网络</span></span><br><span class="line"><span class="comment"># 3. host 和宿主机共享网络</span></span><br><span class="line"><span class="comment"># 4. container 容器内网络连通</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker run 默认 --net bridge</span></span><br><span class="line"><span class="comment"># docker run -d -P --name tomcat01 --net bridge tomcat:latest</span></span><br><span class="line">docker network create -d bridge --subnet 177.77.0.0/16 --gateway 177.77.0.1 myNet</span><br><span class="line"><span class="comment"># 177.77.0.0/16: 177.77.0.2---177.77.255.255</span></span><br><span class="line">docker run -t -d --name centos01 --net myNet centos:latest</span><br><span class="line">docker run -t -d --name centos02 --net myNet centos:latest</span><br><span class="line">docker run -t -d --name centos03 --net myNet centos:latest</span><br><span class="line">docker <span class="built_in">exec</span> -i -t centos01 ping -c 5 centos02</span><br><span class="line">docker <span class="built_in">exec</span> -i -t centos02 ping -c 5 centos01</span><br><span class="line">docker <span class="built_in">exec</span> -i -t centos03 ping -c 5 centos01</span><br><span class="line">docker <span class="built_in">exec</span> -i -t centos03 ping -c 5 www.google.com</span><br><span class="line"><span class="comment"># 此时可以通过容器名或容器id相互连通, 各容器也能和外网连通</span></span><br></pre></td></tr></table></figure><h3 id="网络连通"><a href="#网络连通" class="headerlink" title="网络连通"></a>网络连通</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打通网络</span></span><br><span class="line">docker run -t -d --name centos04 centos:latest</span><br><span class="line">docker network connect myNet centos04</span><br><span class="line">docker network inspect myNet</span><br><span class="line"><span class="comment">####</span></span><br><span class="line"><span class="string">&quot;7041a3f5db94c8adb960409ccf04d57d4d022d74220bcac8b96f63c88184d738&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;Name&quot;</span>: <span class="string">&quot;centos04&quot;</span>,</span><br><span class="line"><span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;b2f648756621a2e56d12113a2668e53875ace62af9c1697a75b8a307a0f222a2&quot;</span>,</span><br><span class="line"><span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:c0:a8:00:05&quot;</span>,</span><br><span class="line"><span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;177.77.0.5/16&quot;</span>,</span><br><span class="line"><span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">####</span></span><br><span class="line"><span class="comment"># 此时容器centos04被赋予新的ip地址 即一个容器 两个ip</span></span><br><span class="line">docker network disconnect -f myNet centos04 <span class="comment"># 取消打通</span></span><br></pre></td></tr></table></figure><h3 id="Redis-集群部署"><a href="#Redis-集群部署" class="headerlink" title="Redis 集群部署"></a>Redis 集群部署</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3个master 3个slave</span></span><br><span class="line"><span class="comment"># 新建一个redis专属网络</span></span><br><span class="line">docker network create -d bridge --subnet 177.77.0.0/16 redisNet</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -x</span><br><span class="line"><span class="comment"># 通过脚本设置集群</span></span><br><span class="line"><span class="keyword">for</span> (( i=<span class="number">1</span>; i&lt;=<span class="number">6</span>; i+=<span class="number">1</span>))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">mkdir</span> -p ~/temp/redis/node-<span class="variable">$&#123;i&#125;</span>/conf</span><br><span class="line"><span class="built_in">touch</span> ~/temp/redis/node-<span class="variable">$&#123;i&#125;</span>/conf/redis.conf</span><br><span class="line"><span class="built_in">cat</span> &gt; ~/temp/redis/node-<span class="variable">$&#123;i&#125;</span>/conf/redis.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">port 6379</span></span><br><span class="line"><span class="string">bind 0.0.0.0</span></span><br><span class="line"><span class="string">cluster-enabled yes</span></span><br><span class="line"><span class="string">cluster-config-file nodes.conf</span></span><br><span class="line"><span class="string">cluster-node-timeout 5000</span></span><br><span class="line"><span class="string">cluster-announce-ip 177.77.0.1$&#123;i&#125;</span></span><br><span class="line"><span class="string">cluster-announce-port 6379</span></span><br><span class="line"><span class="string">cluster-announce-bus-port 16379</span></span><br><span class="line"><span class="string">appendonly yes</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -x</span><br><span class="line"><span class="keyword">for</span> (( i=<span class="number">1</span>; i&lt;=<span class="number">6</span>; i+=<span class="number">1</span>))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">docker run -p 637<span class="variable">$&#123;i&#125;</span>:6379 -p 1637<span class="variable">$&#123;i&#125;</span>:16379 --name redis-<span class="variable">$&#123;i&#125;</span> -v ~/temp/redis/node-<span class="variable">$&#123;i&#125;</span>/data:/data \</span><br><span class="line">-v ~/temp/redis/node-<span class="variable">$&#123;i&#125;</span>/conf/redis.conf:/etc/redis/redis.conf -d --net redisNet --ip 177.77.0.1<span class="variable">$&#123;i&#125;</span> \</span><br><span class="line">redis:6.2.6-alpine redis-server /etc/redis/redis.conf</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入redis-1并创建集群</span></span><br><span class="line">docker <span class="built_in">exec</span> -i -t redis-1 /bin/sh</span><br><span class="line">redis-cli --cluster create 177.77.0.11:6379 177.77.0.12:6379 177.77.0.13:6379 177.77.0.14:6379 177.77.0.15:6379 177.77.0.16:6379 --cluster-replicas 1</span><br><span class="line">&gt;&gt;&gt; Performing <span class="built_in">hash</span> slots allocation on 6 nodes...</span><br><span class="line">Master[0] -&gt; Slots 0 - 5460</span><br><span class="line">Master[1] -&gt; Slots 5461 - 10922</span><br><span class="line">Master[2] -&gt; Slots 10923 - 16383</span><br><span class="line">Adding replica 177.77.0.15:6379 to 177.77.0.11:6379</span><br><span class="line">Adding replica 177.77.0.16:6379 to 177.77.0.12:6379</span><br><span class="line">Adding replica 177.77.0.14:6379 to 177.77.0.13:6379</span><br><span class="line">M: 1155974119ef1a7cda4c697b953542d1dec3ad6b 177.77.0.11:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">M: f8ffb5e62d997e9589c799a9dcf01c7ba5c5d3a5 177.77.0.12:6379</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">M: b30e853f4413eb1449789ed97ee6cc68ea1afda5 177.77.0.13:6379</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">S: ab81cd2697b36723151df909954c3f9a858eadc4 177.77.0.14:6379</span><br><span class="line">   replicates b30e853f4413eb1449789ed97ee6cc68ea1afda5</span><br><span class="line">S: 1250214f6150781c6285a2cbf34800a76a325b4b 177.77.0.15:6379</span><br><span class="line">   replicates 1155974119ef1a7cda4c697b953542d1dec3ad6b</span><br><span class="line">S: cf53516ef058b0eded33f5e673d1f3458f92d92d 177.77.0.16:6379</span><br><span class="line">   replicates f8ffb5e62d997e9589c799a9dcf01c7ba5c5d3a5</span><br><span class="line">Can I <span class="built_in">set</span> the above configuration? (<span class="built_in">type</span> <span class="string">&#x27;yes&#x27;</span> to accept): <span class="built_in">yes</span></span><br><span class="line">&gt;&gt;&gt; Nodes configuration updated</span><br><span class="line">&gt;&gt;&gt; Assign a different config epoch to each node</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to <span class="built_in">join</span> the cluster</span><br><span class="line">Waiting <span class="keyword">for</span> the cluster to <span class="built_in">join</span></span><br><span class="line">..</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 177.77.0.11:6379)</span><br><span class="line">M: 1155974119ef1a7cda4c697b953542d1dec3ad6b 177.77.0.11:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 1250214f6150781c6285a2cbf34800a76a325b4b 177.77.0.15:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 1155974119ef1a7cda4c697b953542d1dec3ad6b</span><br><span class="line">M: b30e853f4413eb1449789ed97ee6cc68ea1afda5 177.77.0.13:6379</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: ab81cd2697b36723151df909954c3f9a858eadc4 177.77.0.14:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates b30e853f4413eb1449789ed97ee6cc68ea1afda5</span><br><span class="line">M: f8ffb5e62d997e9589c799a9dcf01c7ba5c5d3a5 177.77.0.12:6379</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: cf53516ef058b0eded33f5e673d1f3458f92d92d 177.77.0.16:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates f8ffb5e62d997e9589c799a9dcf01c7ba5c5d3a5</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br><span class="line"></span><br><span class="line">redis-cli -c</span><br><span class="line">cluster nodes <span class="comment"># 查询集群</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用来定义和运行多个容器</span></span><br><span class="line"><span class="comment"># 定义docker compose三步骤</span></span><br><span class="line"><span class="comment"># 1. 定义Dockerfile</span></span><br><span class="line"><span class="comment"># 2. 定义docker-compose.yaml</span></span><br><span class="line"><span class="comment"># 3. docker-compose up 启动</span></span><br><span class="line"><span class="comment"># 作用: 批量容器编排</span></span><br></pre></td></tr></table></figure><p>Compose重要概念</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务services 即容器</span></span><br><span class="line"><span class="comment"># 项目project 一组关联的容器</span></span><br><span class="line">docker-compose build --no-cache <span class="comment"># 不使用缓存新建compose对象</span></span><br><span class="line">docker-compose up <span class="comment"># 启动容器</span></span><br><span class="line">docker-compose down <span class="comment"># 在docker-compose yaml文件夹下运行 让docker识别具体停止哪些服务</span></span><br></pre></td></tr></table></figure><p>Compose Yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;&quot;</span> <span class="comment"># docker-compose版本 可省略</span></span><br><span class="line"><span class="attr">services:</span> <span class="comment"># 服务</span></span><br><span class="line"><span class="string">服务1:</span> <span class="string">web</span></span><br><span class="line"><span class="string">服务2:</span> <span class="string">redis</span></span><br><span class="line"><span class="comment"># 服务配置</span></span><br><span class="line"><span class="attr">images:</span> </span><br><span class="line"><span class="attr">build:</span> </span><br><span class="line"><span class="attr">network:</span> </span><br><span class="line"><span class="attr">depends_on:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">服务3</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">服务4</span></span><br><span class="line"><span class="comment"># 先启动服务3 服务4 再启动服务2</span></span><br><span class="line"><span class="comment"># 其他配置 网络 卷挂载</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">configs:</span></span><br></pre></td></tr></table></figure><h3 id="删除所有缓存"><a href="#删除所有缓存" class="headerlink" title="删除所有缓存"></a>删除所有缓存</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker system prune -a</span><br></pre></td></tr></table></figure><h3 id="一些快速应用"><a href="#一些快速应用" class="headerlink" title="一些快速应用"></a>一些快速应用</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搭建mysql并映射到本地3310</span></span><br><span class="line">docker run -d -p 3310:3306 --name mysql01 -e MYSQL_ROOT_PASSWORD=123456 mysql:8.0</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Docker-CLI&quot;&gt;&lt;a href=&quot;#Docker-CLI&quot; class=&quot;headerlink&quot; title=&quot;Docker CLI&quot;&gt;&lt;/a&gt;Docker CLI&lt;/h4&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    
    <category term="Notes" scheme="https://h-shen.github.io/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://h-shen.github.io/note_04/"/>
    <id>https://h-shen.github.io/note_04/</id>
    <published>2023-11-11T05:41:25.000Z</published>
    <updated>2023-11-12T10:41:13.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Mybatis-Plus-Usage"><a href="#Mybatis-Plus-Usage" class="headerlink" title="Mybatis Plus Usage"></a>Mybatis Plus Usage</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># schema.sql</span><br><span class="line"><span class="keyword">drop</span> database if <span class="keyword">exists</span> mybatis_plus_demo;</span><br><span class="line"><span class="keyword">create</span> database mybatis_plus_demo;</span><br><span class="line">use mybatis_plus_demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line">(</span><br><span class="line">   id <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">   name <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">   age <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">   email <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">   <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># data.sql</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (id, name, age, email) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;Jone&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;test1@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;test2@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;test3@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;Sandy&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;test4@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;Billie&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;test5@baomidou.com&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># 真实开发中还需要的字段</span><br><span class="line"># version(乐观锁) is_deleted(逻辑删除) gmt_create gmt_modified</span><br></pre></td></tr></table></figure><ul><li><p>创建 springboot 项目</p></li><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--数据库依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Lombok--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok.ast<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis-plus--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>尽量不要同时导入 mybatis plus 和 mybatis</li></ul></li><li><p>连接数据库 在 application.properties 中</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据库连接配置</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">a1923aAx#33</span></span><br><span class="line"><span class="comment"># 针对mysql8</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis_plus_demo?useSSL\</span></span><br><span class="line"><span class="string">  =true&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=America/Edmonton</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure></li><li><p>Mysql8修改root密码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root -p password a1923aAx<span class="comment">#33</span></span><br></pre></td></tr></table></figure></li><li><p>创建POJO</p><ul><li>Lombok 对类加注解的用法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Setter 属性加set</span></span><br><span class="line"><span class="comment">// @Getter 属性加set</span></span><br><span class="line"><span class="comment">// @Log4j 为类提供日志对象</span></span><br><span class="line"><span class="comment">// @AllArgsConstructor 全参构造器 加了这个注解后类中不提供默认构造方法了</span></span><br><span class="line"><span class="comment">// @NoArgsConstructor 无参构造器</span></span><br><span class="line"><span class="comment">// @EqualsAndHashCode</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span> <span class="comment">// 自动对所有属性加get/set 以及hashCode canEqual equals toString</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @NonNull 注解在 属性 上，会自动产生一个关于此参数的非空检查，如果参数为空，则抛出一个空指针异常</span></span><br><span class="line"><span class="comment">// @Cleanup 这个注解用在 变量 前面，可以保证此变量代表的资源会被自动关闭，默认是调用资源的 close() 方法</span></span><br><span class="line"><span class="comment">// @ToString 这个注解用在 类 上，可以生成所有参数的 toString 方法</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 完整pojo</span></span><br><span class="line"><span class="keyword">package</span> com.example.mybatis_plus_demo.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mybatis_plus_demo.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.example.mybatis_plus_demo.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接继承mybatis plus的通用mapper 并将泛型特化到对应pojo</span></span><br><span class="line"><span class="meta">@Repository</span> <span class="comment">// 说明自己是DAO层</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="comment">// 大部分通用CRUD操作都已经完成</span></span><br><span class="line">    <span class="comment">// 不需要再配置 除非另有需求</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>主程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mybatis_plus_demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.mybatis_plus_demo.mapper&quot;)</span> <span class="comment">// 扫描对应的mapper文件夹</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusDemoApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MybatisPlusDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mybatis_plus_demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.mybatis_plus_demo.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.example.mybatis_plus_demo.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MybatisPlusDemoApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增加Mapper</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 查询全部用户 queryWrapper设为null</span></span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Log-Configuration"><a href="#Log-Configuration" class="headerlink" title="Log Configuration"></a>Log Configuration</h4><ul><li><p>application properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置日志</span></span><br><span class="line"><span class="attr">mybatis-plus.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="CRUD-Extension"><a href="#CRUD-Extension" class="headerlink" title="CRUD Extension"></a>CRUD Extension</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试插入</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    <span class="comment">// id 自动生成</span></span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;神&quot;</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;uion@126.com&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="主键生成策略"><a href="#主键生成策略" class="headerlink" title="主键生成策略"></a>主键生成策略</h4><ul><li><p>使用自增主键</p><ul><li><p>mysql 字段需要自增属性</p></li><li><p>pojo 主键属性改为如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line"><span class="keyword">private</span> Long id;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用雪花算法</p><ul><li>pojo 主键属性改为如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableId(type = IdType.ASSIGN_ID)</span></span><br><span class="line"><span class="keyword">private</span> String id;</span><br></pre></td></tr></table></figure></li></ul><h4 id="update语句"><a href="#update语句" class="headerlink" title="update语句"></a>update语句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试更新</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setId(<span class="number">1L</span>);</span><br><span class="line">    <span class="comment">// 动态sql 只修改age和name</span></span><br><span class="line">    user.setName(<span class="string">&quot;newName&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">100</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.updateById(user);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自动填充"><a href="#自动填充" class="headerlink" title="自动填充"></a>自动填充</h4><p>创建时间 修改时间 等字段全部自动加上去 gmt_create, gmt_modified</p><p>方式一 通过数据库 在表中新增 gmt_create, gmt_modified 字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter table user add gmt_create datetime default CURRENT_TIMESTAMP null;</span><br><span class="line"># 一旦任何字段更新 time modified也会更新</span><br><span class="line">alter table user add gmt_modified datetime default CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP null;</span><br></pre></td></tr></table></figure><p>同步pojo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Date    gmtCreate;  <span class="comment">// mybatisplus可以自动将驼峰转下划线</span></span><br><span class="line"><span class="keyword">private</span> Date    gmtModified;</span><br></pre></td></tr></table></figure><p>方式二 通过代码自动填充字段</p><p>在表中新增字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table user add gmt_create datetime null;</span><br><span class="line">alter table user add gmt_modified datetime null;</span><br></pre></td></tr></table></figure><p>同步pojo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime    gmtCreate;</span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime    gmtModified;</span><br></pre></td></tr></table></figure><p>实现元对象处理器接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mybatis_plus_demo.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span>  <span class="comment">// 将处理器加入到IOC程序中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="comment">// 插入时的填充策略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;start insertFill...&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.strictInsertFill(metaObject, <span class="string">&quot;gmtCreate&quot;</span>, LocalDateTime.class, LocalDateTime.now());</span><br><span class="line">        <span class="built_in">this</span>.strictInsertFill(metaObject, <span class="string">&quot;gmtModified&quot;</span>, LocalDateTime.class, LocalDateTime.now());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 更新时的填充策略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;start updateFill...&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.strictUpdateFill(metaObject, <span class="string">&quot;gmtModified&quot;</span>, LocalDateTime.class, LocalDateTime.now());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><p>出了问题再更新值测试 字段 version</p><ul><li>增加乐观锁字段</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table user add version int default 1 null comment &#x27;乐观锁&#x27;;</span><br></pre></td></tr></table></figure><ul><li><p>更新POJO</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Version</span>    <span class="comment">// 乐观锁</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure></li><li><p>新建一个注册类 把 mapperscan 移动到这里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mybatis_plus_demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.OptimisticLockerInnerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">// 自动管理事务</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.mybatis_plus_demo.mapper&quot;)</span> <span class="comment">// 确定mapper位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册乐观锁插件</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">OptimisticLockerInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试乐观锁</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">optimisticLockTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    user.setName(<span class="string">&quot;Nicknick&quot;</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;101809@ga.com&quot;</span>);</span><br><span class="line">    userMapper.updateById(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">optimisticLockFailedTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;Lee&quot;</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;123901@kk.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    user2.setName(<span class="string">&quot;Karl&quot;</span>);</span><br><span class="line">    userMapper.updateById(user2);</span><br><span class="line"></span><br><span class="line">    userMapper.updateById(user); <span class="comment">// 必须加锁 不然更新失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h4><p>认为总会出现问题 因此无论干什么之前都先上锁</p><h4 id="测试查询"><a href="#测试查询" class="headerlink" title="测试查询"></a>测试查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="comment">// 查询多个用户</span></span><br><span class="line">    List&lt;User&gt; users = userMapper.selectBatchIds(Arrays.asList(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">    <span class="comment">// 条件查询</span></span><br><span class="line">    HashMap&lt;String, Object&gt; conditions = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    conditions.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;神&quot;</span>);</span><br><span class="line">    List&lt;User&gt; users1 = userMapper.selectByMap(conditions);</span><br><span class="line">    users1.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><ul><li>Config 配置拦截器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册分页插件</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">paginationInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">    interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">    <span class="keyword">return</span> interceptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分页查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectTest2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 第一页 每页4个item (已经分好页)</span></span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">    userMapper.selectPage(page, <span class="literal">null</span>);</span><br><span class="line">    System.out.println(page.getPages());    <span class="comment">// 打印总页数</span></span><br><span class="line">    page.getRecords().forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试删除</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.deleteById(<span class="number">1407539764791554056L</span>);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 批量删除</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteBatchTest</span><span class="params">()</span> &#123;</span><br><span class="line">    userMapper.selectBatchIds(Arrays.asList(<span class="number">1407537316328820737L</span>, <span class="number">1407537434276823042L</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 按条件删除</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteByConditionTest</span><span class="params">()</span> &#123;</span><br><span class="line">    HashMap&lt;String, Object&gt; conditions = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    conditions.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;神&quot;</span>);</span><br><span class="line">    conditions.put(<span class="string">&quot;email&quot;</span>,<span class="string">&quot;uion@1216.com&quot;</span>);</span><br><span class="line">    userMapper.deleteByMap(conditions);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>逻辑删除</p><ul><li><p>在数据库中增加deleted字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table user</span><br><span class="line">  add deleted int default 0 null comment &#x27;逻辑删除&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>更新pojo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> Integer deleted;</span><br></pre></td></tr></table></figure></li><li><p>配置application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 逻辑删除</span></span><br><span class="line"><span class="attr">mybatis-plus.global-config.db-config.logic-delete-field</span>=<span class="string">deleted</span></span><br><span class="line"><span class="attr">mybatis-plus.global-config.db-config.logic-delete-value</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">mybatis-plus.global-config.db-config.logic-not-delete-value</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure></li><li><p>逻辑删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按逻辑删除</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logicalDeleteTest</span><span class="params">()</span> &#123;</span><br><span class="line">    userMapper.deleteById(<span class="number">1L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>条件构造器 Wrapper 及测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mybatis_plus_demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.Wrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.example.mybatis_plus_demo.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.example.mybatis_plus_demo.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WrapperTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wrapperTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 查询name不为空 且 邮箱不为空 年龄大于18 的参数</span></span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 加条件</span></span><br><span class="line">        wrapper.isNotNull(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">               .isNotNull(<span class="string">&quot;email&quot;</span>)</span><br><span class="line">               .gt(<span class="string">&quot;age&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        List&lt;User&gt;         users   = userMapper.selectList(wrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wrapperTest2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 查询name为神 gmt_create不为空</span></span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.isNotNull(<span class="string">&quot;gmt_create&quot;</span>)</span><br><span class="line">                .eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;神&quot;</span>);</span><br><span class="line">        <span class="comment">// 只取一个</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectOne(wrapper);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wrapperTest3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 查询年龄20倒30之间的用户</span></span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.between(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>, <span class="number">21</span>);</span><br><span class="line">        <span class="comment">// 打印结果个数</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> userMapper.selectCount(wrapper);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wrapperTest4</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// name里不包含i的</span></span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.notLike(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;i&quot;</span>)</span><br><span class="line">        .orderByAsc(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        List&lt;User&gt;         users   = userMapper.selectList(wrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wrapperTest5</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// subquery</span></span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// regex like</span></span><br><span class="line">        wrapper.inSql(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;select age from user where age &gt; 18&quot;</span>)</span><br><span class="line">                .inSql(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;select name from user where name rlike \&quot;^N\&quot;&quot;</span>);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过注解自定义sql</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="comment">// 自定义sql 此时乐观锁和逻辑删除需要自己添加</span></span><br><span class="line">    <span class="comment">// 数据库表名要写全</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from mybatis_plus_demo.user where id = #&#123;id&#125; and deleted = 0;&quot;)</span></span><br><span class="line">    User <span class="title function_">myGetUserById</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义sql测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">customSqlTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.myGetUserById(<span class="number">1L</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Mybatis-Plus-Usage&quot;&gt;&lt;a href=&quot;#Mybatis-Plus-Usage&quot; class=&quot;headerlink&quot; title=&quot;Mybatis Plus Usage&quot;&gt;&lt;/a&gt;Mybatis Plus Usage&lt;/h4&gt;&lt;figure c</summary>
      
    
    
    
    
    <category term="Notes" scheme="https://h-shen.github.io/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://h-shen.github.io/note_02/"/>
    <id>https://h-shen.github.io/note_02/</id>
    <published>2023-11-10T15:56:26.000Z</published>
    <updated>2023-11-12T10:40:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Redis-Notes"><a href="#Redis-Notes" class="headerlink" title="Redis Notes"></a>Redis Notes</h3><h4 id="安装完毕后设置后台启动"><a href="#安装完毕后设置后台启动" class="headerlink" title="安装完毕后设置后台启动"></a>安装完毕后设置后台启动</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /redis-6.2.4</span><br><span class="line"><span class="built_in">cp</span> -vr redis.conf /etc/redis.conf <span class="comment"># 备份配置文件</span></span><br><span class="line"><span class="comment"># 用vim编辑/etc/redis.conf讲daemonize改为yes</span></span><br><span class="line">redis-server /etc/redis.conf <span class="comment"># 激活配置文件 后台启动</span></span><br><span class="line">redis-cli <span class="comment"># 客户端连接redis</span></span><br><span class="line">redis-cli -p 12345 <span class="comment"># 指定端口连接redis</span></span><br></pre></td></tr></table></figure><h4 id="Redis-CLI"><a href="#Redis-CLI" class="headerlink" title="Redis CLI"></a>Redis CLI</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ping <span class="comment"># check connection status</span></span><br><span class="line">shutdown <span class="comment"># close redis or you can use kill -9 pid</span></span><br><span class="line"><span class="keyword">select</span> 3 <span class="comment"># to choose No.3 database</span></span><br><span class="line">keys * <span class="comment"># list all keys</span></span><br><span class="line"><span class="built_in">set</span> k1 lucy <span class="comment"># create key &#x27;k1&#x27; with value &#x27;lucy&#x27;</span></span><br><span class="line">exists k1 <span class="comment"># check if k1 exists</span></span><br><span class="line"><span class="built_in">type</span> k1 <span class="comment"># check key&#x27;s type</span></span><br><span class="line">del k1 <span class="comment"># delete key</span></span><br><span class="line">expire k1 10 <span class="comment"># give key an exp time</span></span><br><span class="line">ttl k1 <span class="comment"># check how many times before expiration, -2 means already expired, -1 means never expire</span></span><br><span class="line">dbsize <span class="comment"># check how many keys are in this db</span></span><br><span class="line">flushdb <span class="comment"># clear current db</span></span><br><span class="line">flushall <span class="comment"># clear all db</span></span><br><span class="line">get k1 <span class="comment"># get the value of k1</span></span><br><span class="line">dbsize <span class="comment"># 查看数据库大小</span></span><br></pre></td></tr></table></figure><h3 id="MongoDB-Notes"><a href="#MongoDB-Notes" class="headerlink" title="MongoDB Notes"></a>MongoDB Notes</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/mydb/db</span><br><span class="line"><span class="built_in">touch</span> ~/mydb/db.log</span><br><span class="line"><span class="comment"># mydb文件夹一定要预先存在</span></span><br><span class="line">mongod --dbpath ~/mydb --logpath ~/mydb/db.log --logappend --port 18080 <span class="comment"># 确定数据库位置及访问端口</span></span><br><span class="line">mongosh --host 127.0.0.1:18080</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -i -t --name mongodb01 -p 17017:27017 -d -e MONGO_INITDB_ROOT_USERNAME=mongoadmin -e MONGO_INITDB_ROOT_PASSWORD=secret mongo:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># run local mongosh to connect</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="存储单位"><a href="#存储单位" class="headerlink" title="存储单位"></a>存储单位</h4><ul><li>数据库</li><li>集合 类似数组 用于存放文档</li><li>文档</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># inside mongosh</span></span><br><span class="line">show databases;</span><br><span class="line">use <span class="built_in">test</span>;</span><br><span class="line"><span class="comment"># 数据库 集合 文档都不需要手动创建 如果不存在则会自动创建</span></span><br><span class="line">db; <span class="comment"># 显示当前使用的数据库</span></span><br><span class="line">show collections; <span class="comment"># 显示当前数据库中有几个集合</span></span><br></pre></td></tr></table></figure><ul><li>数据库CRUD</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># INSERT</span></span><br><span class="line">use sample_mflix</span><br><span class="line">db.movies.insertOne(</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">&quot;The Favourite&quot;</span>,</span><br><span class="line">    genres: [ <span class="string">&quot;Drama&quot;</span>, <span class="string">&quot;History&quot;</span> ],</span><br><span class="line">    runtime: 121,</span><br><span class="line">    rated: <span class="string">&quot;R&quot;</span>,</span><br><span class="line">    year: 2018,</span><br><span class="line">    directors: [ <span class="string">&quot;Yorgos Lanthimos&quot;</span> ],</span><br><span class="line">    cast: [ <span class="string">&quot;Olivia Colman&quot;</span>, <span class="string">&quot;Emma Stone&quot;</span>, <span class="string">&quot;Rachel Weisz&quot;</span> ],</span><br><span class="line">    <span class="built_in">type</span>: <span class="string">&quot;movie&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">db.movies.insertMany([</span><br><span class="line">   &#123;</span><br><span class="line">      title: <span class="string">&quot;Jurassic World: Fallen Kingdom&quot;</span>,</span><br><span class="line">      genres: [ <span class="string">&quot;Action&quot;</span>, <span class="string">&quot;Sci-Fi&quot;</span> ],</span><br><span class="line">      runtime: 130,</span><br><span class="line">      rated: <span class="string">&quot;PG-13&quot;</span>,</span><br><span class="line">      year: 2018,</span><br><span class="line">      directors: [ <span class="string">&quot;J. A. Bayona&quot;</span> ],</span><br><span class="line">      cast: [ <span class="string">&quot;Chris Pratt&quot;</span>, <span class="string">&quot;Bryce Dallas Howard&quot;</span>, <span class="string">&quot;Rafe Spall&quot;</span> ],</span><br><span class="line">      <span class="built_in">type</span>: <span class="string">&quot;movie&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">&quot;Tag&quot;</span>,</span><br><span class="line">      genres: [ <span class="string">&quot;Comedy&quot;</span>, <span class="string">&quot;Action&quot;</span> ],</span><br><span class="line">      runtime: 105,</span><br><span class="line">      rated: <span class="string">&quot;R&quot;</span>,</span><br><span class="line">      year: 2018,</span><br><span class="line">      directors: [ <span class="string">&quot;Jeff Tomsic&quot;</span> ],</span><br><span class="line">      cast: [ <span class="string">&quot;Annabelle Wallis&quot;</span>, <span class="string">&quot;Jeremy Renner&quot;</span>, <span class="string">&quot;Jon Hamm&quot;</span> ],</span><br><span class="line">      <span class="built_in">type</span>: <span class="string">&quot;movie&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># QUERY</span></span><br><span class="line">db.movies.find() <span class="comment"># query all</span></span><br><span class="line">db.movies.find( &#123; year: 2018 &#125;) <span class="comment"># query by condition</span></span><br></pre></td></tr></table></figure><h3 id="MinIO-Notes"><a href="#MinIO-Notes" class="headerlink" title="MinIO Notes"></a>MinIO Notes</h3><ul><li><p>MinIO 基础概念</p><ul><li>object</li><li>bucket</li><li>drive</li></ul></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/minio/data</span><br><span class="line"></span><br><span class="line">docker run \</span><br><span class="line">  -p 9000:9000 \</span><br><span class="line">  -p 9001:9001 \</span><br><span class="line">  --name minio1 \</span><br><span class="line">  -v ~/minio/data:/data \</span><br><span class="line">  -e <span class="string">&quot;MINIO_ROOT_USER=AKIAIOSFODNN7EXAMPLE&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;MINIO_ROOT_PASSWORD=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY&quot;</span> \</span><br><span class="line">  quay.io/minio/minio server /data --console-address <span class="string">&quot;:9001&quot;</span> <span class="comment"># 设置9001为静态端口</span></span><br></pre></td></tr></table></figure><ul><li>开启ec模式 将minio在8块盘上启动</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..8&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   <span class="built_in">rm</span> -r ~/minio/data<span class="variable">$i</span></span><br><span class="line">  <span class="built_in">mkdir</span> -p ~/minio/data<span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">docker run \</span><br><span class="line">  -p 9000:9000 \</span><br><span class="line">  -p 9001:9001 \</span><br><span class="line">  --name minio1 \</span><br><span class="line">  -v ~/minio/data1:/data1 \</span><br><span class="line">  -v ~/minio/data2:/data2 \</span><br><span class="line">  -v ~/minio/data3:/data3 \</span><br><span class="line">  -v ~/minio/data4:/data4 \</span><br><span class="line">  -v ~/minio/data5:/data5 \</span><br><span class="line">  -v ~/minio/data6:/data6 \</span><br><span class="line">  -v ~/minio/data7:/data7 \</span><br><span class="line">  -v ~/minio/data8:/data8 \</span><br><span class="line">  -e <span class="string">&quot;MINIO_ROOT_USER=AKIAIOSFODNN7EXAMPLE&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;MINIO_ROOT_PASSWORD=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY&quot;</span> \</span><br><span class="line">  quay.io/minio/minio server /data&#123;1...8&#125; --console-address <span class="string">&quot;:9001&quot;</span></span><br></pre></td></tr></table></figure><ul><li>minIO客户端mc</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有host</span></span><br><span class="line">mc config host <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 增加host</span></span><br><span class="line">mc config host add minio-server-01 http://127.0.0.1:9000 admin password</span><br><span class="line"><span class="comment"># 删除host</span></span><br><span class="line">mc config host remove minio-server-01</span><br></pre></td></tr></table></figure><ul><li>具体操作某个host</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mc <span class="built_in">ls</span> minio-server-01</span><br><span class="line">mc <span class="built_in">cp</span> minio-server-01/test/cpp_note/README.md ~</span><br><span class="line">mc <span class="built_in">cp</span> -r minio-server-01/test/cpp_note ~ <span class="comment"># 文件夹下载</span></span><br><span class="line">mc <span class="built_in">cp</span> -r cpp_note2 minio-server-01/test ~ <span class="comment"># 文件夹上传</span></span><br><span class="line">mc <span class="built_in">cat</span> minio-server-01/test/cpp_note/README.md</span><br><span class="line">mc <span class="built_in">rm</span> -r --force minio-server-01/test/myCpp</span><br></pre></td></tr></table></figure><ul><li>mc操作bucket</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mc rb --force minio-server-01/test</span><br><span class="line">mc mb minio-server-01/newbucket</span><br></pre></td></tr></table></figure><ul><li>mc admin</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mc admin user list minio-server-01</span><br><span class="line">mc admin user add minio-server-01 myaccount password</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Redis-Notes&quot;&gt;&lt;a href=&quot;#Redis-Notes&quot; class=&quot;headerlink&quot; title=&quot;Redis Notes&quot;&gt;&lt;/a&gt;Redis Notes&lt;/h3&gt;&lt;h4 id=&quot;安装完毕后设置后台启动&quot;&gt;&lt;a href=&quot;#安装完毕后设</summary>
      
    
    
    
    
    <category term="Notes" scheme="https://h-shen.github.io/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://h-shen.github.io/note_01/"/>
    <id>https://h-shen.github.io/note_01/</id>
    <published>2023-11-10T15:36:09.000Z</published>
    <updated>2023-11-12T10:39:16.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Usage-of-New-Features-in-C-17-20"><a href="#Usage-of-New-Features-in-C-17-20" class="headerlink" title="Usage of New Features in C++17&#x2F;20"></a>Usage of New Features in C++17&#x2F;20</h4><h5 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional<T></h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">optional&lt;<span class="type">int</span>&gt; <span class="title">getSquare</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    optional&lt;<span class="type">int</span>&gt; result;   <span class="comment">// the status is invalid after initialization</span></span><br><span class="line">    <span class="keyword">if</span> (n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="comment">//The status becomes valid after the assignment</span></span><br><span class="line">        result = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(<span class="built_in">sqrt</span>(n * <span class="number">1.0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(!<span class="built_in">getSquare</span>(<span class="number">-1</span>).<span class="built_in">has_value</span>());</span><br><span class="line">    <span class="built_in">assert</span>(<span class="built_in">getSquare</span>(<span class="number">0</span>).<span class="built_in">has_value</span>());</span><br><span class="line">    cout &lt;&lt; <span class="built_in">getSquare</span>(<span class="number">0</span>).<span class="built_in">value</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="comment">// return 999 if it is invalid</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">getSquare</span>(<span class="number">-1</span>).<span class="built_in">value_or</span>(<span class="number">999</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function">optional&lt;string&gt; <span class="title">s</span><span class="params">(<span class="string">&quot;abcd&quot;</span>)</span></span>;</span><br><span class="line">    <span class="built_in">assert</span>(s);</span><br><span class="line">    <span class="built_in">assert</span>(*s == <span class="string">&quot;abcd&quot;</span>);</span><br><span class="line">    s.<span class="built_in">reset</span>();</span><br><span class="line">    <span class="built_in">assert</span>(!s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Create an optional object using a factory method</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> op1 = <span class="built_in">make_optional</span>&lt;<span class="type">int</span>&gt;();    <span class="comment">// default constructor</span></span><br><span class="line"><span class="keyword">auto</span> op2 = <span class="built_in">make_optional</span>&lt;string&gt;();</span><br><span class="line"></span><br><span class="line"><span class="built_in">assert</span>(op1 &amp;&amp; op2);           <span class="comment">// make_optional is always valid</span></span><br><span class="line"><span class="built_in">assert</span>(op1 == <span class="number">0</span>);             <span class="comment">// default 0</span></span><br><span class="line"><span class="built_in">assert</span>(op2-&gt;<span class="built_in">empty</span>());         <span class="comment">// default empty string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// make_optional call argument constructor</span></span><br><span class="line"><span class="keyword">auto</span> op3 = <span class="built_in">make_optional</span>&lt;string&gt;(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line"><span class="keyword">auto</span> op4 = make_optional&lt;vector&lt;<span class="type">int</span>&gt;&gt;(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">assert</span>(op3-&gt;<span class="built_in">size</span>() == <span class="number">2</span>);</span><br><span class="line"><span class="built_in">assert</span>(op4-&gt;<span class="built_in">at</span>(<span class="number">0</span>) == <span class="number">1</span>);</span><br></pre></td></tr></table></figure><ul><li>When the internal type of an optional<T> object is bool, it should be judged twice. First, determine whether the state of the container is valid, and then, if the container is valid, determine the value.</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">optional&lt;<span class="type">bool</span>&gt; op &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (op) &#123;               </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;misuse&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (op &amp;&amp; op.<span class="built_in">value</span>()) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot; right &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="variant-替代-union"><a href="#variant-替代-union" class="headerlink" title="variant&lt;多个互不相同的类型&gt; 替代 union"></a>variant&lt;多个互不相同的类型&gt; 替代 union</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">variant&lt;<span class="type">int</span>, <span class="type">float</span>, <span class="type">double</span>&gt; v;       <span class="comment">// 可以容纳三种不同的整数</span></span><br><span class="line"></span><br><span class="line">v = <span class="number">42</span>;                 <span class="comment">// 直接赋值为int</span></span><br><span class="line"><span class="built_in">assert</span>(v.<span class="built_in">index</span>() == <span class="number">0</span>);         <span class="comment">// 索引号是0</span></span><br><span class="line"></span><br><span class="line">v = <span class="number">3.14f</span>;                 <span class="comment">// 直接赋值为float</span></span><br><span class="line"><span class="built_in">assert</span>(v.<span class="built_in">index</span>() == <span class="number">1</span>);         <span class="comment">// 索引号是1</span></span><br><span class="line"></span><br><span class="line">v = <span class="number">2.718</span>;                 <span class="comment">// 直接赋值为double</span></span><br><span class="line"><span class="built_in">assert</span>(v.<span class="built_in">index</span>() == <span class="number">2</span>);         <span class="comment">// 索引号是2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v = <span class="number">42</span>;               <span class="comment">// 赋值为int</span></span><br><span class="line"><span class="built_in">assert</span>(<span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(v) == <span class="number">42</span>);       <span class="comment">// 取第0号的值，即int</span></span><br><span class="line"></span><br><span class="line">v = <span class="number">2.718</span>;               <span class="comment">// 赋值为double</span></span><br><span class="line"><span class="keyword">auto</span> x = <span class="built_in">get</span>&lt;<span class="type">double</span>&gt;(v);       <span class="comment">// 取double的值，即第2号</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(v);             <span class="comment">// 当前是double，所以出错，抛出std::bad_variant_access异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用get_if代替get 传地址 返回一个对应类型的指针 如果不存在则返回nullptr</span></span><br><span class="line"><span class="type">int</span>* p1 = <span class="built_in">get_if</span>&lt;<span class="type">int</span>&gt;(&amp;v);</span><br><span class="line"><span class="built_in">assert</span>(p1 == <span class="literal">nullptr</span>);</span><br><span class="line"><span class="type">double</span>* p2 = <span class="built_in">get_if</span>&lt;<span class="type">double</span>&gt;(&amp;v);</span><br><span class="line"><span class="built_in">assert</span>(*p2 == <span class="number">2.718</span>);</span><br></pre></td></tr></table></figure><ul><li>使用visit和visitor函数访问variant容器当前有效值 不需要知道具体类型 visitor函数必须是一个支持泛型的lambda函数</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">std::variant&lt;<span class="type">int</span>, <span class="type">double</span>&gt; v;</span><br><span class="line">v = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">auto</span> visitor = [](<span class="type">const</span> <span class="keyword">auto</span>&amp; v) &#123;</span><br><span class="line">    cout &lt;&lt; v+v &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">auto</span> changer = [](<span class="keyword">auto</span>&amp; val) &#123;</span><br><span class="line">  val += val;</span><br><span class="line">&#125;;</span><br><span class="line">std::<span class="built_in">visit</span>(visitor, v);</span><br><span class="line">std::<span class="built_in">visit</span>(changer, v);</span><br><span class="line"><span class="built_in">assert</span>(<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(v) == <span class="number">24</span>);</span><br></pre></td></tr></table></figure><ul><li>variant的作用: 在不使用“继承”“虚函数”的情况下实现面向对象编程里的“多态”特性</li></ul><h4 id="模板元编程"><a href="#模板元编程" class="headerlink" title="模板元编程"></a>模板元编程</h4><ul><li>核心思想是“类型运算”，操作的数据是编译时可见的“类型”</li></ul><h4 id="泛型编程"><a href="#泛型编程" class="headerlink" title="泛型编程"></a>泛型编程</h4><ul><li>核心思想是“一切皆为类型”，或者说是“参数化类型”“类型擦除”，使用模板而不是继承的方式来复用代码</li></ul><h4 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h4><ul><li>数学意义上、无副作用的函数，核心思想是“一切皆可调用”，通过一系列连续或者嵌套的函数调用实现对数据的处理</li></ul><h4 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h4><ul><li><p>m_ 前缀修饰成员变量</p></li><li><p>g_ 前缀修饰全局变量</p></li><li><p>C 和 C++ 主要采用的命名方式是 snaking naming convention</p><ul><li>变量、函数名和<strong>名字空间</strong>用 snake_case，全局变量加“g_”前缀；</li><li>自定义类名用 CamelCase，成员函数用 snake_case，成员变量加“m_”前缀；</li><li>宏和常量应当全大写，单词之间用下划线连接；</li><li>尽量不要用下划线作为变量的前缀或者后缀（比如 _local、name_），很难识别</li></ul></li></ul><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// author  : chrono</span></span><br><span class="line"><span class="comment">// date    : 2020-xx-xx</span></span><br><span class="line"><span class="comment">// purpose : get the inner counter value of generic T</span></span><br><span class="line"><span class="comment">// notice  : T must have xxx member</span></span><br><span class="line"><span class="comment">// notice  : return value maybe -1, means xxx, you should xxx</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_value</span><span class="params">(<span class="type">const</span> T&amp; v)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>文件头注释</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Copyright (c) 2020 by Chrono</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// file  : xxx.cpp</span></span><br><span class="line"><span class="comment">// since : 2020-xx-xx</span></span><br><span class="line"><span class="comment">// desc  : ...</span></span><br></pre></td></tr></table></figure><ul><li><p>可以用cpplint静态检查cpp代码风格</p></li><li><p>尽量使用include guard 少用 #pragma once</p></li><li><p>只输出预处理后的源码</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -std=c++<span class="number">14</span> -Wall -O2 -E a.cpp -o a.cc  </span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[] = &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;a.txt&quot;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>#define 宏全局替换</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ngx_tolower(c)      ((c &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;Z&#x27;</span>) ? (c | 0x20) : c)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ngx_toupper(c)      ((c &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;z&#x27;</span>) ? (c &amp; ~0x20) : c)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ngx_memzero(buf, n)       (void) memset(buf, 0, n)</span></span><br></pre></td></tr></table></figure><ul><li>#define 宏定义命名空间</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BEGIN_NAMESPACE(x)  namespace x &#123;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> END_NAMESPACE(x)    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">BEGIN_NAMESPACE</span>(my_own)</span><br><span class="line"></span><br><span class="line"><span class="comment">// functions and classes here</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">END_NAMESPACE</span>(my_own)</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus                      <span class="comment">// 定义了这个宏就是在用C++编译</span></span></span><br><span class="line">    <span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;                        <span class="comment">// 函数按照C的方式去处理 </span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">a_c_function</span><span class="params">(<span class="type">int</span> a)</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus                      <span class="comment">// 检查是否是C++编译</span></span></span><br><span class="line">    &#125;                                   <span class="comment">// extern &quot;C&quot; 结束</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &gt;= 201402                <span class="comment">// 检查C++标准的版本号</span></span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c++14 or later&quot;</span> &lt;&lt; endl;    <span class="comment">// 201402就是C++14</span></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> __cplusplus &gt;= 201103              <span class="comment">// 检查C++标准的版本号</span></span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c++11 or before&quot;</span> &lt;&lt; endl;   <span class="comment">// 201103是C++11</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span>   <span class="comment">// __cplusplus &lt; 201103          // 199711是C++98</span></span></span><br><span class="line"><span class="meta">#   <span class="keyword">error</span> <span class="string">&quot;c++ is too old&quot;</span>               <span class="comment">// 太低则预处理报错</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>  <span class="comment">// __cplusplus &gt;= 201402         // 预处理语句结束</span></span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -E -dM - &lt; /dev/null <span class="comment"># gcc查询编译器自带宏</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cpp_decltype_auto        <span class="comment">//检查是否支持decltype(auto)</span></span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;decltype(auto) enable&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;decltype(auto) disable&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>  <span class="comment">//__cpp_decltype_auto</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __GNUC__ &lt;= 4</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;gcc is too old&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span>   <span class="comment">// __GNUC__ &gt; 4</span></span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;gcc is good enough&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>  <span class="comment">// __GNUC__ &lt;= 4</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__SSE4_2__) &amp;&amp; defined(__x86_64)</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;we can do more optimization&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>  <span class="comment">// defined(__SSE4_2__) &amp;&amp; defined(__x86_64)</span></span></span><br></pre></td></tr></table></figure><h5 id="使用-if-1-和-if-0-启用和禁用大段代码"><a href="#使用-if-1-和-if-0-启用和禁用大段代码" class="headerlink" title="使用#if 1 和#if 0 启用和禁用大段代码"></a>使用#if 1 和#if 0 启用和禁用大段代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> 0          <span class="comment">// 0即禁用下面的代码，1则是启用</span></span></span><br><span class="line">  ...          <span class="comment">// 任意的代码</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>         <span class="comment">// 预处理结束</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 1          <span class="comment">// 1启用代码，用来强调下面代码的必要性</span></span></span><br><span class="line">  ...          <span class="comment">// 任意的代码</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>         <span class="comment">// 预处理结束</span></span></span><br></pre></td></tr></table></figure><h5 id="C-17-has-include-检测文件是否存在"><a href="#C-17-has-include-检测文件是否存在" class="headerlink" title="C++17 __has_include 检测文件是否存在"></a>C++17 __has_include 检测文件是否存在</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> __has_include(<span class="string">&quot;example.h&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;example.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">error</span> <span class="string">&quot;cannot find example.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h4 id="函数模版显式全特化"><a href="#函数模版显式全特化" class="headerlink" title="函数模版显式全特化"></a>函数模版显式全特化</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span></span><br><span class="line"><span class="function">T1 <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="type">int32_t</span> <span class="built_in">f</span>&lt;<span class="type">int32_t</span>,<span class="type">int8_t</span>&gt;() &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编译属性"><a href="#编译属性" class="headerlink" title="编译属性"></a>编译属性</h4><ul><li>给变量、函数、类等“贴”上一个编译阶段的“标签”，方便编译器识别处理</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[[noreturn]]              <span class="comment">// 属性标签</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">bool</span> flag)</span>       <span class="comment">// 函数绝不会返回任何值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;XXX&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[[<span class="built_in">deprecated</span>(<span class="string">&quot;deadline:2020-12-31&quot;</span>)]]      <span class="comment">// 函数被废除</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">old_func</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">old_func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">pow</span><span class="params">(<span class="type">double</span> x, <span class="type">long</span> <span class="type">long</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">0</span>) [[likely]]   <span class="comment">// 告诉编译器这条分支执行成功的可能性大</span></span><br><span class="line">        <span class="keyword">return</span> x * <span class="built_in">pow</span>(x, n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (n) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      cout &lt;&lt; n &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      [[fallthrough]]   <span class="comment">// 告诉编译器这个case没有break 直接往下走</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      [[fallthrough]]</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">      cout &lt;&lt; n &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; n &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>常用官方属性</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[[noreturn]]</span><br><span class="line">[[<span class="built_in">deprecated</span>(<span class="string">&quot;&quot;</span>)]]</span><br><span class="line">[[deprecated]]</span><br><span class="line">[[fallthrough]]</span><br><span class="line">[[nodiscard]]</span><br><span class="line">[[<span class="built_in">nodiscard</span>(<span class="string">&quot;&quot;</span>)]]</span><br><span class="line">[[maybe_unused]]</span><br><span class="line">[[likely]]</span><br><span class="line">[[unlikely]]</span><br></pre></td></tr></table></figure></li><li><p>常用gnu属性</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[[gnu::constructor]] <span class="comment">// 函数会在 main() 函数之前执行，效果有点像是全局对象的构造函数</span></span><br><span class="line">[[gnu::destructor]] <span class="comment">// 函数会在 main() 函数结束之后执行，有点像是全局对象的析构函数</span></span><br><span class="line">[[gnu::always_inline]] <span class="comment">// 强制内联</span></span><br><span class="line">[[gnu::hot]] <span class="comment">// 热点函数，要求编译器更积极地优化</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[[gnu::<span class="built_in">constructor</span>(<span class="number">105</span>)]]</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">[[gnu::<span class="built_in">constructor</span>(<span class="number">106</span>)]]</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;2\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[[gnu::<span class="built_in">destructor</span>(<span class="number">106</span>)]]</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">defer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;3\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">[[gnu::<span class="built_in">destructor</span>(<span class="number">107</span>)]]</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">defer2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;4\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 2 ... 4 3</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 运行期断言带错误消息的惯用法 如果assert内的condition为false 则会调用abort()</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">assert</span>(i &gt; <span class="number">0</span> &amp;&amp; <span class="string">&quot;i must be greater than zero&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>使用编译器指令 <strong>attribute</strong> 可以将属性用在C中</li><li>如果编译的时候定义宏NDEBUG 则运行期断言assert会被禁用</li><li>不要在类内部定义一些嵌套类 应该定义一个新的名字空间，把内部类都“提”到外面，降低原来类的耦合度和复杂度</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoClass</span> <span class="keyword">final</span>    <span class="comment">// 禁止任何人继承我</span></span><br><span class="line">&#123; ... &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在必须使用继承的场合，建议你只使用 public 继承，避免使用 virtual、protected，因为它们会让父类与子类的关系变得难以捉摸</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Interface</span>        <span class="comment">// 接口类定义，没有final，可以被继承</span></span><br><span class="line">&#123; ... &#125;;           </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Implement</span> <span class="keyword">final</span> : <span class="comment">// 实现类，final禁止再被继承</span></span><br><span class="line">      <span class="keyword">public</span> Interface    <span class="comment">// 只用public继承</span></span><br><span class="line">&#123; ... &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoClass</span> <span class="keyword">final</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">DemoClass</span>() = <span class="keyword">default</span>;  <span class="comment">// 明确告诉编译器，使用默认实现</span></span><br><span class="line">   ~<span class="built_in">DemoClass</span>() = <span class="keyword">default</span>;  <span class="comment">// 明确告诉编译器，使用默认实现</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数调用其他构造函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoDelegating</span> <span class="keyword">final</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> a;                              <span class="comment">// 成员变量</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">DemoDelegating</span>(<span class="type">int</span> x) : <span class="built_in">a</span>(x)        <span class="comment">// 基本的构造函数</span></span><br><span class="line">    &#123;&#125;  </span><br><span class="line"></span><br><span class="line">    <span class="built_in">DemoDelegating</span>() :                 <span class="comment">// 无参数的构造函数</span></span><br><span class="line">        <span class="built_in">DemoDelegating</span>(<span class="number">0</span>)               <span class="comment">// 给出默认值，委托给第一个构造函数</span></span><br><span class="line">    &#123;&#125;  </span><br><span class="line"></span><br><span class="line">    <span class="built_in">DemoDelegating</span>(<span class="type">const</span> string&amp; s) : <span class="comment">// 字符串参数构造函数</span></span><br><span class="line">        <span class="built_in">DemoDelegating</span>(<span class="built_in">stoi</span>(s))        <span class="comment">// 转换成整数，再委托给第一个构造函数</span></span><br><span class="line">    &#123;&#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接在声明类成员的时候初始化</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoInit</span> <span class="keyword">final</span>                  <span class="comment">// 有很多成员变量的类</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span>                 a = <span class="number">0</span>;        <span class="comment">// 整数成员，赋值初始化</span></span><br><span class="line">    std::string              s = <span class="string">&quot;hello&quot;</span>;  <span class="comment">// 字符串成员，赋值初始化</span></span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt;         v&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;   <span class="comment">// 容器成员，使用花括号的初始化列表</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">DemoInit</span>() = <span class="keyword">default</span>;             <span class="comment">// 默认构造函数</span></span><br><span class="line">    ~<span class="built_in">DemoInit</span>() = <span class="keyword">default</span>;             <span class="comment">// 默认析构函数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">DemoInit</span>(<span class="type">int</span> x) : <span class="built_in">a</span>(x) &#123;&#125;         <span class="comment">// 可以单独初始化成员，其他用默认值</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>传统的类编写方式是.h .cpp将接口和实现分离 但现代C++多采用hpp方式将接口和实现合并 <strong>因为单独的头文件没法使用类模版</strong></p></li><li><p>重写接口时 应显式写override</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InterfaceA</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InterfaceAImpl</span> <span class="keyword">final</span> : <span class="keyword">public</span> Interface &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="number">1</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;          <span class="comment">// 整型变量</span></span><br><span class="line"><span class="keyword">decltype</span>(x)     x1;      <span class="comment">// 推导为int，x1是int</span></span><br><span class="line"><span class="keyword">decltype</span>(x)&amp;    x2 = x;    <span class="comment">// 推导为int，x2是int&amp;，引用必须赋值</span></span><br><span class="line"><span class="keyword">decltype</span>(x)*    x3;      <span class="comment">// 推导为int，x3是int*</span></span><br><span class="line"><span class="keyword">decltype</span>(&amp;x)    x4;      <span class="comment">// 推导为int*，x4是int*</span></span><br><span class="line"><span class="keyword">decltype</span>(&amp;x)*   x5;      <span class="comment">// 推导为int*，x5是int**</span></span><br><span class="line"><span class="keyword">decltype</span>(x2)    x6 = x2;  <span class="comment">// 推导为int&amp;，x6是int&amp;，引用必须赋值</span></span><br></pre></td></tr></table></figure></li><li><p>使用decltype获取函数的指针类型</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func3</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span>, <span class="type">int</span>, <span class="type">double</span>)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func4</span><span class="params">(<span class="type">void</span> (*func_ptr)(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>, <span class="type">double</span>))</span> </span>&#123;</span><br><span class="line">    <span class="built_in">func_ptr</span>(<span class="number">12</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1.0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func5</span><span class="params">(<span class="keyword">decltype</span>(&amp;func3) ptr)</span> </span>&#123;    <span class="comment">// 用decltype直接获取func3的类型指针</span></span><br><span class="line">    <span class="built_in">ptr</span>(<span class="number">12</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>尽量避免static成员变量使用auto</p></li><li><pre><code class="cpp">// str会被推导为std::stringauto str = &quot;abcd&quot;s;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* const定义的变量属于只读变量 不属于常量 它的值可以通过指针修改</span><br><span class="line"></span><br><span class="line">  ```cpp</span><br><span class="line">  </span><br><span class="line">  // 需要加上volatile修饰，运行时才能看到效果   如果是在C中 则不需要volatile</span><br><span class="line">  const volatile int MAX_LEN  = 1024;</span><br><span class="line">  auto ptr = (int*)(&amp;MAX_LEN);</span><br><span class="line">  *ptr = 2048;</span><br><span class="line">  cout &lt;&lt; MAX_LEN &lt;&lt; endl;      // 输出2048</span><br></pre></td></tr></table></figure></code></pre></li><li><p>const &amp; 被称为万能引用</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const 放在声明的最左边，表示指向常量的指针</span></span><br><span class="line">string name = <span class="string">&quot;uncharted&quot;</span>;</span><br><span class="line"><span class="type">const</span> string* ps1 = &amp;name; <span class="comment">// 指向常量</span></span><br><span class="line">*ps1 = <span class="string">&quot;spiderman&quot;</span>;        <span class="comment">// 错误，不允许修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const 放在*右边 表示指针式常量 不能再指向其他对象</span></span><br><span class="line">string* <span class="type">const</span> ps2 = &amp;name;  <span class="comment">// 指向变量，但指针本身不能被修改</span></span><br><span class="line">*ps2 = <span class="string">&quot;spiderman&quot;</span>;        <span class="comment">// 正确，允许修改</span></span><br></pre></td></tr></table></figure><ul><li>unique_ptr 对资源只有一份ownership</li><li>shared_ptr 对资源可以有多个ownership 原理是引用计数</li><li>weak_ptr 用来修复shared ptr导致的循环引用问题</li><li>尽量使用工厂函数初始化智能指针 避免空指针</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">ptr1</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">10</span>))</span></span>;      <span class="comment">// int智能指针</span></span><br><span class="line"><span class="built_in">assert</span>(*ptr1 == <span class="number">10</span>);                     <span class="comment">// 可以使用*取内容</span></span><br><span class="line"><span class="built_in">assert</span>(ptr1 != <span class="literal">nullptr</span>);                <span class="comment">// 可以判断是否为空指针</span></span><br><span class="line"></span><br><span class="line"><span class="function">unique_ptr&lt;string&gt; <span class="title">ptr2</span><span class="params">(<span class="keyword">new</span> string(<span class="string">&quot;hello&quot;</span>))</span></span>;  <span class="comment">// string智能指针</span></span><br><span class="line"><span class="built_in">assert</span>(*ptr2 == <span class="string">&quot;hello&quot;</span>);                <span class="comment">// 可以使用*取内容</span></span><br><span class="line"><span class="built_in">assert</span>(ptr2-&gt;<span class="built_in">size</span>() == <span class="number">5</span>);               <span class="comment">// 可以使用-&gt;调用成员函数</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">auto</span> ptr3 = <span class="built_in">make_unique</span>&lt;<span class="type">int</span>&gt;(<span class="number">42</span>);               <span class="comment">// 工厂函数创建智能指针</span></span><br><span class="line"><span class="built_in">assert</span>(ptr3 &amp;&amp; *ptr3 == <span class="number">42</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> ptr4 = <span class="built_in">make_unique</span>&lt;string&gt;(<span class="string">&quot;god of war&quot;</span>);  <span class="comment">// 工厂函数创建智能指针</span></span><br><span class="line"><span class="built_in">assert</span>(!ptr4-&gt;<span class="built_in">empty</span>());</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引发循环引用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> <span class="keyword">final</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> this_type     = Node;</span><br><span class="line">    <span class="keyword">using</span> shared_type   = std::shared_ptr&lt;this_type&gt;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    shared_type     next;      <span class="comment">// 使用智能指针来指向下一个节点</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> n1 = <span class="built_in">make_shared</span>&lt;Node&gt;();   <span class="comment">// 工厂函数创建智能指针</span></span><br><span class="line"><span class="keyword">auto</span> n2 = <span class="built_in">make_shared</span>&lt;Node&gt;();   <span class="comment">// 工厂函数创建智能指针</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">assert</span>(n1.<span class="built_in">use_count</span>() == <span class="number">1</span>);    <span class="comment">// 引用计数为1</span></span><br><span class="line"><span class="built_in">assert</span>(n2.<span class="built_in">use_count</span>() == <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">n1-&gt;next = n2;                 <span class="comment">// 两个节点互指，形成了循环引用</span></span><br><span class="line">n2-&gt;next = n1;</span><br><span class="line"></span><br><span class="line"><span class="built_in">assert</span>(n1.<span class="built_in">use_count</span>() == <span class="number">2</span>);    <span class="comment">// 引用计数为2</span></span><br><span class="line"><span class="built_in">assert</span>(n2.<span class="built_in">use_count</span>() == <span class="number">2</span>);    <span class="comment">// 无法减到0，无法销毁，导致内存泄漏</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用weak ptr修改上例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> <span class="keyword">final</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> this_type     = Node;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意这里，别名改用weak_ptr</span></span><br><span class="line">    <span class="keyword">using</span> shared_type   = std::weak_ptr&lt;this_type&gt;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    shared_type     next;    <span class="comment">// 因为用了别名，所以代码不需要改动</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> n1 = <span class="built_in">make_shared</span>&lt;Node&gt;();  <span class="comment">// 工厂函数创建智能指针</span></span><br><span class="line"><span class="keyword">auto</span> n2 = <span class="built_in">make_shared</span>&lt;Node&gt;();  <span class="comment">// 工厂函数创建智能指针</span></span><br><span class="line"></span><br><span class="line">n1-&gt;next = n2;             <span class="comment">// 两个节点互指，形成了循环引用</span></span><br><span class="line">n2-&gt;next = n1;</span><br><span class="line"></span><br><span class="line"><span class="built_in">assert</span>(n1.<span class="built_in">use_count</span>() == <span class="number">1</span>);    <span class="comment">// 因为使用了weak_ptr，引用计数为1</span></span><br><span class="line"><span class="built_in">assert</span>(n2.<span class="built_in">use_count</span>() == <span class="number">1</span>);   <span class="comment">// 打破循环引用，不会导致内存泄漏</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!n1-&gt;next.<span class="built_in">expired</span>()) &#123;     <span class="comment">// 检查指针是否有效</span></span><br><span class="line">    <span class="keyword">auto</span> ptr = n1-&gt;next.<span class="built_in">lock</span>();  <span class="comment">// lock()获取shared_ptr</span></span><br><span class="line">    <span class="built_in">assert</span>(ptr == n2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>异常的好处<ul><li>处理流程是完全独立的</li><li>绝对不能被忽略的，必须被处理</li><li>可以用在错误码无法使用的场合</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自己封装一个runtime error异常</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">final</span> : <span class="keyword">public</span> std::runtime_error &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> this_type = MyException;</span><br><span class="line">    <span class="keyword">using</span> base_type = std::runtime_error;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyException</span>() = <span class="keyword">default</span>;</span><br><span class="line">    ~<span class="built_in">MyException</span>() <span class="keyword">override</span> = <span class="keyword">default</span>;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MyException</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* message)</span> : base_type(message) &#123;</span>&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> code = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>在抛出异常的时候，我建议你最好不要直接用 throw 关键字，而是要封装成一个函数，这和不要直接用 new、delete 关键字而是使用智能指针是类似的道理——通过引入一个“中间层”来获得更多的可读性、安全性和灵活性。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">raise</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* msg)</span>      <span class="comment">// 函数封装throw，没有返回值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">my_exception</span>(msg);     <span class="comment">// 抛出异常，也可以有更多的逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>function-try块</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">some_function</span><span class="params">(<span class="type">int</span> n = <span class="number">2</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">try</span>                          <span class="comment">// 函数名之后直接写try块</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ++n;</span><br><span class="line">    <span class="keyword">throw</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span>(...)                   <span class="comment">// catch块与函数体同级并列</span></span><br><span class="line">&#123;</span><br><span class="line">    ++n;</span><br><span class="line">    <span class="built_in">assert</span>(n == <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>noexcept 告诉编译器：这个函数不会抛出异常 实际上是告诉编译器不要做优化 如果遇到异常 直接调用 std::terminate 终止运行。为了优化性能 避免异常产生出现的栈展开 重要的ctor dtor应该尽量声明为 noexcept</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func_noexcept</span><span class="params">()</span> <span class="keyword">noexcept</span>            <span class="comment">// 声明绝不会抛出异常</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;noexcept&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>递归lambda</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">std::function&lt;<span class="type">int</span>(<span class="type">int</span>)&gt; func;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    func = [&amp;](<span class="type">int</span> n)&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n*<span class="built_in">func</span>(n<span class="number">-1</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">func</span>(<span class="number">10</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>[&#x3D;]表示lambda按值捕获所有外部变量，表达式内部是值的拷贝，并且不能修改 需要修改则要增加 mutable 注意此时修改的是变量的拷贝</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">auto</span> f1 = [=]()&#123;</span><br><span class="line">    cout &lt;&lt; n &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">auto</span> f2 = [=]()<span class="keyword">mutable</span>&#123;</span><br><span class="line">    n += <span class="number">12</span>;</span><br><span class="line">    cout &lt;&lt; n &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">f1</span>();</span><br><span class="line"><span class="built_in">f2</span>();</span><br><span class="line">cout &lt;&lt; n &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在类内使用lambda [*this]表示拷贝当前对象 [this]表示引用当前对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">final</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> m_val = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    std::function&lt;<span class="type">void</span>()&gt; print_val = [*<span class="keyword">this</span>]()<span class="keyword">mutable</span> &#123;</span><br><span class="line">        m_val = <span class="number">15</span>;</span><br><span class="line">        cout &lt;&lt; m_val &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    std::function&lt;<span class="type">int</span>()&gt; getVal = [*<span class="keyword">this</span>]()&#123;</span><br><span class="line">        <span class="keyword">return</span> m_val;</span><br><span class="line">    &#125;;</span><br><span class="line">    std::function&lt;<span class="type">void</span>(<span class="type">const</span> <span class="type">int</span>&amp;)&gt; setVal = [<span class="keyword">this</span>](<span class="type">const</span> <span class="type">int</span>&amp; val) &#123;</span><br><span class="line">        m_val = val;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>std::string 本质是模板类 basic_string 的特化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> string = std::basic_string&lt;<span class="type">char</span>&gt;;</span><br><span class="line"></span><br><span class="line">*   字符串和容器完全是两个不同的概念</span><br><span class="line"></span><br><span class="line">```cpp</span><br><span class="line"><span class="keyword">auto</span> str = <span class="string">&quot;abcd&quot;</span>s; <span class="comment">// 明确地表示它是 string 字符串类型</span></span><br><span class="line"><span class="keyword">auto</span> str = <span class="string">R&quot;(nier:automata)&quot;</span>;    <span class="comment">// 原始字符串：nier:automata 不转义</span></span><br></pre></td></tr></table></figure></li><li><p>自定义一个stringview类</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStringView</span> <span class="keyword">final</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* ptr = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="type">size_t</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyStringView</span>() = <span class="keyword">default</span>;</span><br><span class="line">    ~<span class="built_in">MyStringView</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="built_in">MyStringView</span>(<span class="type">const</span> string&amp;s) <span class="keyword">noexcept</span></span><br><span class="line">    : <span class="built_in">ptr</span>(s.<span class="built_in">data</span>()), <span class="built_in">len</span>(s.<span class="built_in">length</span>())</span><br><span class="line">    &#123;&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">const</span> <span class="type">char</span>* <span class="title">data</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ptr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>regex_match 完全匹配一个字符串</li><li>regex_search 在字符串里查找一个正则匹配</li><li>regex_replace 正则查找再做替换</li><li>写正则的时候，记得最好要用原始字符串</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">auto</span> str = <span class="string">&quot;god of war&quot;</span>s;             <span class="comment">// 待匹配的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> reg  = </span><br><span class="line">  <span class="built_in">make_regex</span>(<span class="string">R&quot;((\w+)\s(\w+))&quot;</span>);    <span class="comment">// 原始字符串定义正则表达式</span></span><br><span class="line"><span class="keyword">auto</span> what = <span class="built_in">make_match</span>();          <span class="comment">// 准备获取匹配的结果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> found = <span class="built_in">regex_search</span>(          <span class="comment">// 正则查找，和匹配类似</span></span><br><span class="line">                str, what, reg);</span><br><span class="line"></span><br><span class="line"><span class="built_in">assert</span>(found);                        <span class="comment">// 断言找到匹配</span></span><br><span class="line"><span class="built_in">assert</span>(!what.<span class="built_in">empty</span>());                <span class="comment">// 断言有匹配结果</span></span><br><span class="line"><span class="built_in">assert</span>(what[<span class="number">1</span>] == <span class="string">&quot;god&quot;</span>);              <span class="comment">// 看第一个子表达式</span></span><br><span class="line"><span class="built_in">assert</span>(what[<span class="number">2</span>] == <span class="string">&quot;of&quot;</span>);              <span class="comment">// 看第二个子表达式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> new_str = <span class="built_in">regex_replace</span>(      <span class="comment">// 正则替换，返回新字符串</span></span><br><span class="line">    str,                           <span class="comment">// 原字符串不改动</span></span><br><span class="line">    <span class="built_in">make_regex</span>(<span class="string">R&quot;(\w+$)&quot;</span>),         <span class="comment">// 就地生成正则表达式对象</span></span><br><span class="line">    <span class="string">&quot;peace&quot;</span>                        <span class="comment">// 需要指定替换的文字</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; new_str &lt;&lt; endl;          <span class="comment">// 输出god of peace</span></span><br></pre></td></tr></table></figure><ul><li>测试函数运行消耗的时钟周期</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;x86intrin.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">[[gnu::noinline]]</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="number">3</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> start = __rdtsc();</span><br><span class="line">    <span class="built_in">f</span>();</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> end = __rdtsc();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;f() spent %llu CPU cycles.\n&quot;</span>, end - start);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>stl容器里存储的是元素的拷贝、副本，而不是引用</p></li><li><p>for_each</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> print = [](<span class="type">const</span> <span class="keyword">auto</span>&amp; x)  <span class="comment">// lambda表达式输出元素</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; x &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::<span class="built_in">sort</span>(<span class="built_in">begin</span>(v), <span class="built_in">end</span>(v));         <span class="comment">// 快速排序</span></span><br><span class="line">for_each(<span class="built_in">cbegin</span>(v), <span class="built_in">cend</span>(v), print); <span class="comment">// for_each算法</span></span><br></pre></td></tr></table></figure><ul><li>partial sort取topK排了序 nth element取topK排了序</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// top3</span></span><br><span class="line">std::<span class="built_in">partial_sort</span>(</span><br><span class="line">    <span class="built_in">begin</span>(v), <span class="built_in">next</span>(<span class="built_in">begin</span>(v), <span class="number">3</span>), <span class="built_in">end</span>(v));  <span class="comment">// 取前3名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// best3</span></span><br><span class="line">std::<span class="built_in">nth_element</span>(</span><br><span class="line">    <span class="built_in">begin</span>(v), <span class="built_in">next</span>(<span class="built_in">begin</span>(v), <span class="number">3</span>), <span class="built_in">end</span>(v));  <span class="comment">// 最好的3个</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Median</span></span><br><span class="line"><span class="keyword">auto</span> mid_iter =                            <span class="comment">// 中位数的位置</span></span><br><span class="line">    <span class="built_in">next</span>(<span class="built_in">begin</span>(v), v.<span class="built_in">size</span>()/<span class="number">2</span>);</span><br><span class="line">std::<span class="built_in">nth_element</span>( <span class="built_in">begin</span>(v), mid_iter, <span class="built_in">end</span>(v));<span class="comment">// 排序得到中位数</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;median is &quot;</span> &lt;&lt; *mid_iter &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// partition</span></span><br><span class="line"><span class="keyword">auto</span> pos = std::<span class="built_in">partition</span>(                <span class="comment">// 找出所有大于9的数</span></span><br><span class="line">    <span class="built_in">begin</span>(v), <span class="built_in">end</span>(v),</span><br><span class="line">    [](<span class="type">const</span> <span class="keyword">auto</span>&amp; x)                    <span class="comment">// 定义一个lambda表达式</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x &gt; <span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">); </span><br><span class="line">for_each(<span class="built_in">begin</span>(v), pos, print);         <span class="comment">// 输出分组后的数据  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// min/max</span></span><br><span class="line"><span class="keyword">auto</span> value = std::<span class="built_in">minmax_element</span>(        <span class="comment">//找出第一名和倒数第一</span></span><br><span class="line">    <span class="built_in">cbegin</span>(v), <span class="built_in">cend</span>(v)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>利用std::once_flag和std::call_once, 保证函数在多个线程中只运行一次</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> std::once_flag flag;        <span class="comment">// 全局的初始化标志</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> f = []()                <span class="comment">// 在线程里运行的lambda表达式</span></span><br><span class="line">&#123;   </span><br><span class="line">    std::<span class="built_in">call_once</span>(flag,      <span class="comment">// 仅一次调用，注意要传flag</span></span><br><span class="line">        []()&#123;                <span class="comment">// 匿名lambda，初始化函数，只会执行一次</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;only once&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;                  <span class="comment">// 匿名lambda结束</span></span><br><span class="line">    );                     <span class="comment">// 在线程里运行的lambda表达式结束</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">thread <span class="title">t1</span><span class="params">(f)</span></span>;            <span class="comment">// 启动两个线程，运行函数f</span></span><br><span class="line"><span class="function">thread <span class="title">t2</span><span class="params">(f)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>使用 thread_local 标记的变量在每个线程里都会有一个独立的副本</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">thread_local</span> <span class="type">int</span> n = <span class="number">0</span>;        <span class="comment">// 线程局部存储变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> f = [&amp;](<span class="type">int</span> x)           <span class="comment">// 在线程里运行的lambda表达式，捕获引用</span></span><br><span class="line">&#123;   </span><br><span class="line">    n += x;                   <span class="comment">// 使用线程局部变量，互不影响</span></span><br><span class="line">    cout &lt;&lt; n;                <span class="comment">// 输出，验证结果</span></span><br><span class="line">&#125;;  </span><br><span class="line"></span><br><span class="line"><span class="function">thread <span class="title">t1</span><span class="params">(f, <span class="number">10</span>)</span></span>;           <span class="comment">// 启动两个线程，运行函数f</span></span><br><span class="line"><span class="function">thread <span class="title">t2</span><span class="params">(f, <span class="number">20</span>)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>atomic变量禁用了拷贝构造函数，所以在初始化的时候不能用“&#x3D;”的赋值形式，只能用圆括号或者花括号</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">atomic_int  x &#123;<span class="number">0</span>&#125;;          <span class="comment">// 初始化，不能用=</span></span><br><span class="line">atomic_long y &#123;<span class="number">1000L</span>&#125;;      <span class="comment">// 初始化，只能用圆括号或者花括号</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">assert</span>(++x == <span class="number">1</span>);           <span class="comment">// 自增运算</span></span><br><span class="line"></span><br><span class="line">y += <span class="number">200</span>;                   <span class="comment">// 加法运算</span></span><br><span class="line"><span class="built_in">assert</span>(y &lt; <span class="number">2000</span>);           <span class="comment">// 比较运算</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">static</span> atomic_flag flag &#123;<span class="literal">false</span>&#125;;    <span class="comment">// 原子化的标志量</span></span><br><span class="line"><span class="type">static</span> atomic_int  n;               <span class="comment">// 原子化的int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> f = [&amp;]()              <span class="comment">// 在线程里运行的lambda表达式，捕获引用</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> value = flag.<span class="built_in">test_and_set</span>();  <span class="comment">// TAS检查原子标志量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;flag has been set.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;set flag by &quot;</span> &lt;&lt;</span><br><span class="line">            this_thread::<span class="built_in">get_id</span>() &lt;&lt; endl;  <span class="comment">// 输出线程id</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    n += <span class="number">100</span>;                    <span class="comment">// 原子变量加法运算</span></span><br><span class="line"></span><br><span class="line">    this_thread::<span class="built_in">sleep_for</span>(      <span class="comment">// 线程睡眠</span></span><br><span class="line">        n.<span class="built_in">load</span>() * <span class="number">10</span>ms);        <span class="comment">// 使用时间字面量</span></span><br><span class="line">    cout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">&#125;;                        <span class="comment">// 在线程里运行的lambda表达式结束</span></span><br><span class="line"></span><br><span class="line"><span class="function">thread <span class="title">t1</span><span class="params">(f)</span></span>;                <span class="comment">// 启动两个线程，运行函数f</span></span><br><span class="line"><span class="function">thread <span class="title">t2</span><span class="params">(f)</span></span>;</span><br><span class="line"></span><br><span class="line">t1.<span class="built_in">join</span>();                   <span class="comment">// 等待线程结束    </span></span><br><span class="line">t2.<span class="built_in">join</span>();</span><br></pre></td></tr></table></figure><ul><li>尽量使用std::async 启动一个线程去异步运行一个任务 但不绝对保证立即启动（也可以在第一个参数传递 std::launch::async，要求立即启动线程） 少显式用std::thread</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> task = [](<span class="keyword">auto</span> x)                  <span class="comment">// 在线程里运行的lambda表达式</span></span><br><span class="line">&#123;</span><br><span class="line">    this_thread::<span class="built_in">sleep_for</span>( x * <span class="number">1</span>ms);  <span class="comment">// 线程睡眠</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sleep for &quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> f = std::<span class="built_in">async</span>(task, <span class="number">10</span>);         <span class="comment">// 启动一个异步任务</span></span><br><span class="line">f.<span class="built_in">wait</span>();                              <span class="comment">// 等待任务完成</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">assert</span>(f.<span class="built_in">valid</span>());                    <span class="comment">// 确实已经完成了任务</span></span><br><span class="line">cout &lt;&lt; f.<span class="built_in">get</span>() &lt;&lt; endl;              <span class="comment">// 获取任务的执行结果</span></span><br></pre></td></tr></table></figure><ul><li><p>async() 会返回一个 future 变量，可以认为是代表了执行结果的 “期货”，如果任务有返回值，就可以用成员函数 get() 获取 <strong>不过要特别注意，get() 只能调一次，再次获取结果会发生错误，抛出异常 std::future_error</strong></p></li><li><p>如果你不显式获取 async() 的返回值（即 future 对象），它就会同步阻塞直至任务完成（由于临时对象的析构函数）</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所以，即使我们不关心返回值，也总要用 auto 来配合 async()，避免同步阻塞</span></span><br><span class="line"><span class="keyword">auto</span> f = std::<span class="built_in">async</span>(task, ...);</span><br></pre></td></tr></table></figure><ul><li>JSON解析库 JSON for Modern C++ (json.hpp, single header only)</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="type">json_t</span> = nlohmann::json;</span><br><span class="line"></span><br><span class="line"><span class="type">json_t</span> j;                                   <span class="comment">// JSON对象</span></span><br><span class="line"></span><br><span class="line">j[<span class="string">&quot;age&quot;</span>] = <span class="number">23</span>;                              <span class="comment">// &quot;age&quot;:23</span></span><br><span class="line">j[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;spiderman&quot;</span>;                    <span class="comment">// &quot;name&quot;:&quot;spiderman&quot;</span></span><br><span class="line">j[<span class="string">&quot;gear&quot;</span>][<span class="string">&quot;suits&quot;</span>] = <span class="string">&quot;2099&quot;</span>;                <span class="comment">// &quot;gear&quot;:&#123;&quot;suits&quot;:&quot;2099&quot;&#125;</span></span><br><span class="line">j[<span class="string">&quot;jobs&quot;</span>] = &#123;<span class="string">&quot;superhero&quot;</span>&#125;;                  <span class="comment">// &quot;jobs&quot;:[&quot;superhero&quot;]  </span></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;                   <span class="comment">// vector容器</span></span><br><span class="line">j[<span class="string">&quot;numbers&quot;</span>] = v;                          <span class="comment">// &quot;numbers&quot;:[1,2,3]</span></span><br><span class="line"></span><br><span class="line">map&lt;string, <span class="type">int</span>&gt; m =                       <span class="comment">// map容器</span></span><br><span class="line">    &#123;&#123;<span class="string">&quot;one&quot;</span>,<span class="number">1</span>&#125;, &#123;<span class="string">&quot;two&quot;</span>, <span class="number">2</span>&#125;&#125;;               <span class="comment">// 初始化列表 </span></span><br><span class="line">j[<span class="string">&quot;kv&quot;</span>] = m;                               <span class="comment">// &quot;kv&quot;:&#123;&quot;one&quot;:1,&quot;two&quot;:2&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; j.<span class="built_in">dump</span>() &lt;&lt; endl;         <span class="comment">// 序列化，无缩进</span></span><br><span class="line">cout &lt;&lt; j.<span class="built_in">dump</span>(<span class="number">2</span>) &lt;&lt; endl;        <span class="comment">// 序列化，有缩进，2个空格</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string str = <span class="string">R&quot;(&#123;                // JSON文本，原始字符串</span></span><br><span class="line"><span class="string">    &quot;name&quot;: &quot;peter&quot;,</span></span><br><span class="line"><span class="string">    &quot;age&quot; : 23,</span></span><br><span class="line"><span class="string">    &quot;married&quot; : true</span></span><br><span class="line"><span class="string">&#125;)&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> j = <span class="type">json_t</span>::<span class="built_in">parse</span>(str);    <span class="comment">// 从字符串反序列化</span></span><br><span class="line"><span class="built_in">assert</span>(j[<span class="string">&quot;age&quot;</span>] == <span class="number">23</span>);        <span class="comment">// 验证序列化是否正确</span></span><br><span class="line"><span class="built_in">assert</span>(j[<span class="string">&quot;name&quot;</span>] == <span class="string">&quot;peter&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> txt = <span class="string">&quot;bad:data&quot;</span>s;        <span class="comment">// 不是正确的JSON数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>                             <span class="comment">// try保护代码</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> j = <span class="type">json_t</span>::<span class="built_in">parse</span>(txt);<span class="comment">// 从字符串反序列化</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span>(std::exception&amp; e)        <span class="comment">// 捕获异常</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="网络库"><a href="#网络库" class="headerlink" title="网络库"></a>网络库</h3><ul><li>libcurl</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.20</span>)</span><br><span class="line"><span class="keyword">project</span>(boostTester)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">20</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_FLAGS <span class="string">&quot;-Wall -O2 -pthread&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/json.hpp&quot;</span>)</span><br><span class="line">    <span class="keyword">message</span>(STATUS <span class="string">&quot;json.hpp is missing, downloading...&quot;</span>)</span><br><span class="line">    <span class="keyword">file</span>(DOWNLOAD https://raw.githubusercontent.com/nlohmann/json/develop/single_include/nlohmann/json.hpp <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/json.hpp)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(CURL REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(CURL_FOUND)</span><br><span class="line">    <span class="keyword">include_directories</span>(<span class="variable">$&#123;CURL_INCLUDE_DIR&#125;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"><span class="keyword">add_executable</span>(curlTester main.cpp)</span><br><span class="line"><span class="keyword">if</span>(CURL_FOUND)</span><br><span class="line">    <span class="keyword">target_link_libraries</span>(curlTester <span class="variable">$&#123;CURL_LIBRARIES&#125;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// send GET request</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;curl/curl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;json.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="type">json_t</span> = nlohmann::json;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回掉写函数</span></span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">writeFunc</span><span class="params">(<span class="type">void</span>* ptr, <span class="type">size_t</span> size, <span class="type">size_t</span> nmemb, std::string* data)</span> </span>&#123;</span><br><span class="line">    <span class="type">size_t</span> totalb = size * nmemb;</span><br><span class="line">    data-&gt;<span class="built_in">append</span>((<span class="type">char</span>*)ptr, totalb);</span><br><span class="line">    <span class="keyword">return</span> totalb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> handler = <span class="built_in">curl_easy_init</span>();    <span class="comment">// 创建CURL句柄</span></span><br><span class="line">    <span class="built_in">assert</span>(handler);</span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(handler, CURLOPT_URL, <span class="string">&quot;http://localhost:8080/api/v1/admin/merchant/all&quot;</span>); <span class="comment">// 设置请求URI</span></span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(handler, CURLOPT_WRITEFUNCTION, writeFunc);</span><br><span class="line">    std::string resp;</span><br><span class="line">    <span class="built_in">curl_easy_setopt</span>(handler, CURLOPT_WRITEDATA, &amp;resp);</span><br><span class="line">    <span class="keyword">auto</span> res = <span class="built_in">curl_easy_perform</span>(handler); <span class="comment">// 发送数据</span></span><br><span class="line">    <span class="keyword">if</span> (res != CURLE_OK) &#123; <span class="comment">// 检查是否执行成功</span></span><br><span class="line">        cout &lt;&lt; <span class="built_in">curl_easy_strerror</span>(res) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> j = <span class="type">json_t</span>::<span class="built_in">parse</span>(resp);<span class="comment">// 从字符串反序列化</span></span><br><span class="line">        <span class="type">int</span> indent = <span class="number">4</span>;</span><br><span class="line">        cout &lt;&lt; j.<span class="built_in">dump</span>(indent);  <span class="comment">// pretty print</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span>(std::exception&amp; e)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">curl_easy_cleanup</span>(handler); <span class="comment">// 清理句柄相关的资源</span></span><br><span class="line">    <span class="built_in">curl_global_cleanup</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Python和C++相互通信: Pybind 11</p></li><li><p>设计原则 (SOLID)</p><ul><li><p>单一职责原则：一个类只负责一项工作，不允许有多个类同时负责一项工作。SRP (高内聚低耦合)</p></li><li><p>开闭原则：对扩展开放，对修改关闭。OCP (应用开闭原则的关键是做好封装，隐藏内部的具体实现细节，然后开放足够的接口，这样外部的客户代码就可以只通过接口去扩展功能，而不必侵入类的内部)</p></li><li><p>里氏替换原则：子类不应该替换父类。LSP (子类不能改变、违反父类定义的行为 C++里应少用继承 多用泛型)</p></li><li><p>接口隔离原则：把不同的接口分成不同的类，每个类只负责一个接口。ISP (尽量简化、归并给外界调用的接口)</p></li><li><p>依赖倒置原则：把抽象层的类和具体层的类分离开来，使得抽象层的类不依赖于具体层的类。DIP (上层要避免依赖下层的实现细节，下层要反过来依赖上层的抽象定义)</p></li><li><p>DRY原则 不造轮子</p></li><li><p>KISS原则</p></li></ul></li><li><p>C++中部分设计模式的实现</p><ul><li>单例模式<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接使用函数内部的 static 静态变量</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span>&amp; <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> T obj;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>观察者模式的别名有信号机制或发布订阅机制 (qt信号槽)</p></li><li><p>new 和 delete 操作的区域是 free store</p></li><li><p>malloc 和 free 操作的区域是 heap</p></li><li><p>在发生异常时对析构函数的调用，还有一个专门的术语，叫栈展开（stack unwinding)</p></li><li><p>通过往std命名空间特化hash的方式也可以实现custom hash</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> std &#123;</span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">hash</span>&lt;pair&lt;string, <span class="type">int</span>&gt;&gt; &#123;</span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> pair&lt;string, <span class="type">int</span>&gt; &amp;p)</span> <span class="type">const</span> <span class="keyword">noexcept</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hash</span>&lt;string&gt;()(p.first) ^ <span class="built_in">hash</span>&lt;<span class="type">int</span>&gt;()(p.second);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unordered_set&lt;pair&lt;string, <span class="type">int</span>&gt;&gt; unset;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Usage-of-New-Features-in-C-17-20&quot;&gt;&lt;a href=&quot;#Usage-of-New-Features-in-C-17-20&quot; class=&quot;headerlink&quot; title=&quot;Usage of New Features in C++</summary>
      
    
    
    
    
    <category term="Notes" scheme="https://h-shen.github.io/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://h-shen.github.io/notes/"/>
    <id>https://h-shen.github.io/notes/</id>
    <published>2023-11-10T15:35:35.000Z</published>
    <updated>2023-11-12T10:42:23.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Notes-Highlight-some-key-features-common-traps-in-programming"><a href="#Notes-Highlight-some-key-features-common-traps-in-programming" class="headerlink" title="Notes - Highlight some key features&#x2F;common traps in programming"></a>Notes - Highlight some key features&#x2F;common traps in programming</h3><p>Welcome to this section of my blog, a collection of code snippets for programming novices. In this fast-paced tech world, I believe learning should be straightforward and direct. This tag is specifically crafted for beginners, encompassing everything from Java to Golang, algorithms to data structures, and Docker to Linux basics. Each note is a carefully selected quick tip, designed to help you swiftly grasp key concepts and skills.</p><p>Notice some notes may contain Chinese since I am a Chinese&#x2F;English bilingual.</p><ul><li><p><a href="/note_01">C++</a></p></li><li><p><a href="/note_02">Redis&#x2F;MongoDB&#x2F;MinIO</a></p></li><li><p><a href="/note_04">Mybatis Plus</a></p></li><li><p><a href="/note_05">Docker</a></p></li><li><p><a href="/note_06">C++ Template for Competitive Programming</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Notes-Highlight-some-key-features-common-traps-in-programming&quot;&gt;&lt;a href=&quot;#Notes-Highlight-some-key-features-common-traps-in-programmi</summary>
      
    
    
    
    
    <category term="Notes" scheme="https://h-shen.github.io/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://h-shen.github.io/projects/"/>
    <id>https://h-shen.github.io/projects/</id>
    <published>2023-11-10T04:16:50.000Z</published>
    <updated>2023-11-12T10:43:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="My-Projects"><a href="#My-Projects" class="headerlink" title="My Projects"></a>My Projects</h3><p>Welcome to my <strong>Projects</strong> space, where I showcase a collection of <strong>SOLO</strong> projects I’ve independently developed since I was an undergrad. Each project here is a testament to my personal technical skills and innovative thinking. From conception to execution, every piece encapsulates my passion and dedication. In these records, you’ll not only see the final outcomes but also gain insights into the development process, challenges faced, and how I turned ideas into reality.</p><h4 id="K-Way-Merger"><a href="#K-Way-Merger" class="headerlink" title="K-Way Merger"></a><a href="https://github.com/H-Shen/K-Way-Merger">K-Way Merger</a></h4><p>This project is a toy implementation of a K-way Merger in Go, designed with functionality and efficiency in mind. The application operates in a multi-step process:</p><ul><li><p>It begins by accepting a list of input files along with a specified output file.</p></li><li><p>The core functionality involves sorting integers in each input file in ascending order, with the sorted data then being rewritten back to the respective input files.</p></li><li><p>Finally, the application seamlessly merges all integers from these input files. This merging process is efficiently handled using a binary heap algorithm, culminating in the combined result being written to the designated output file.</p></li></ul><p>This implementation not only demonstrates the practical application of sorting and merging algorithms but also showcases the power and flexibility of Go in handling data-intensive tasks.</p><h4 id="Atomic-Heart-Dot-Lock-Cracker"><a href="#Atomic-Heart-Dot-Lock-Cracker" class="headerlink" title="Atomic Heart Dot Lock Cracker"></a><a href="https://github.com/H-Shen/DotsLockCracker">Atomic Heart Dot Lock Cracker</a></h4><p>I’ve developed a Command Line application in C++ designed to assist players in swiftly unlocking dot locks in the game Atomic Heart. Users input two arrays reflecting the lock’s initial and target patterns. The app then calculates and outputs the most efficient sequence for unlocking, guiding users through the precise key presses on the PS5 controller. With small modifications, the user can make it support the game on different platforms.</p><h4 id="A-Toy-Implementation-of-Different-Caches-in-C"><a href="#A-Toy-Implementation-of-Different-Caches-in-C" class="headerlink" title="A Toy Implementation of Different Caches in C++"></a><a href="https://github.com/H-Shen/Caches">A Toy Implementation of Different Caches in C++</a></h4><p>This project presents the implementation of four cache replacement policies, each meticulously crafted using single-threaded programming in C++. The policies include:</p><ul><li><p>First-In-Last-Out (FILO): A unique approach where the most recently added items are the first to be evicted.</p></li><li><p>First-In-First-Out (FIFO): A classic strategy that removes items in the order they were added, ensuring a fair and sequential process.</p></li><li><p>Least Recently Used (LRU): This policy prioritizes user recency, discarding items that haven’t been accessed for the longest time.</p></li><li><p>Least Frequently Used (LFU): Focusing on usage frequency, this method eliminates items with the least number of accesses.</p></li></ul><p>Each policy is meticulously coded in C++, demonstrating not only the power of the language in handling complex algorithms but also providing a practical viewpoint into the efficiency and applicability of these policies in real-world scenarios.</p><h4 id="A-Toy-Implementation-of-Arbitrary-Precision-Fraction-in-Java"><a href="#A-Toy-Implementation-of-Arbitrary-Precision-Fraction-in-Java" class="headerlink" title="A Toy Implementation of Arbitrary-Precision Fraction in Java"></a><a href="https://github.com/H-Shen/Rational">A Toy Implementation of Arbitrary-Precision Fraction in Java</a></h4><p>The project includes the implementation of a Java Arbitrary-precision fraction, utilizing the class BigIntegers for numerator and denominator. Fraction is always kept in the lowest terms. Fraction is immutable and guaranteed not to have a null numerator or denominator. The denominator will always be positive (thus sign is carried by the numerator), and the denominator is not allowed to be zero.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;My-Projects&quot;&gt;&lt;a href=&quot;#My-Projects&quot; class=&quot;headerlink&quot; title=&quot;My Projects&quot;&gt;&lt;/a&gt;My Projects&lt;/h3&gt;&lt;p&gt;Welcome to my &lt;strong&gt;Projects&lt;/st</summary>
      
    
    
    
    
    <category term="Projects" scheme="https://h-shen.github.io/tags/Projects/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://h-shen.github.io/about/"/>
    <id>https://h-shen.github.io/about/</id>
    <published>2023-11-10T04:16:44.000Z</published>
    <updated>2023-11-13T09:20:12.487Z</updated>
    
    <content type="html"><![CDATA[<h3 id="About-Me"><a href="#About-Me" class="headerlink" title="About Me"></a>About Me</h3><p>I am a passionate enthusiast in backend, cloud-native, and distributed development. My journey in computer science began at the University of Calgary, where I completed my undergraduate studies. After a brief stint in C++ development, I am currently pursuing a Master of Engineering degree in Telecommunications &amp; Information Security at the University of Victoria, with a focus on Linux operations and security.</p><p>My keen interest in algorithms and data structures was highlighted when I secured a silver medal at the 2021 ICPC North American Rocky Mountain Regional. I am deeply fascinated by Unix’s design philosophy and have a profound understanding of software design patterns and architecture. I enjoy delving into the intricacies of code while maintaining a grasp of the broader aspects of software architecture.</p><p>Through this blog, I aim to document my learning journey and those easily forgettable yet crucial knowledge points. I believe in growing and exploring the ever-evolving world of technology through sharing and collaboration.</p><p>Reference:</p><ul><li><a href="/attaches/CV.pdf">My Resume</a></li><li><a href="/attaches/certificate.pdf">Certificate of ICPC Silver Medal</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;About-Me&quot;&gt;&lt;a href=&quot;#About-Me&quot; class=&quot;headerlink&quot; title=&quot;About Me&quot;&gt;&lt;/a&gt;About Me&lt;/h3&gt;&lt;p&gt;I am a passionate enthusiast in backend, cloud</summary>
      
    
    
    
    
    <category term="About" scheme="https://h-shen.github.io/tags/About/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://h-shen.github.io/blog_05/"/>
    <id>https://h-shen.github.io/blog_05/</id>
    <published>2023-11-10T04:16:41.000Z</published>
    <updated>2023-11-12T10:12:55.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Benchmark-the-Fastest-Way-of-I-O-in-C-for-Coding-Competition"><a href="#Benchmark-the-Fastest-Way-of-I-O-in-C-for-Coding-Competition" class="headerlink" title="Benchmark the Fastest Way of I&#x2F;O in C++ for Coding Competition"></a>Benchmark the Fastest Way of I&#x2F;O in C++ for Coding Competition</h3><h4 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h4><h5 id="0x00-Preface"><a href="#0x00-Preface" class="headerlink" title="0x00 Preface"></a>0x00 Preface</h5><h5 id="0x01-How-to-set-the-benchmark-of-different-ways-of-I-O"><a href="#0x01-How-to-set-the-benchmark-of-different-ways-of-I-O" class="headerlink" title="0x01 How to set the benchmark of different ways of I&#x2F;O?"></a>0x01 How to set the benchmark of different ways of I&#x2F;O?</h5><h5 id="0x02-How-to-wrap-the-faster-way-of-I-O"><a href="#0x02-How-to-wrap-the-faster-way-of-I-O" class="headerlink" title="0x02 How to wrap the faster way of I&#x2F;O?"></a>0x02 How to wrap the faster way of I&#x2F;O?</h5><h5 id="0x03-How-to-tweak-the-faster-way-of-I-O-to-handle-different-variadic-arguments"><a href="#0x03-How-to-tweak-the-faster-way-of-I-O-to-handle-different-variadic-arguments" class="headerlink" title="0x03 How to tweak the faster way of I&#x2F;O to handle different variadic arguments?"></a>0x03 How to tweak the faster way of I&#x2F;O to handle different variadic arguments?</h5><h5 id="0x04-What-you-should-know-if-you-want-to-use-the-wrapper-in-a-real-competition"><a href="#0x04-What-you-should-know-if-you-want-to-use-the-wrapper-in-a-real-competition" class="headerlink" title="0x04 What you should know if you want to use the wrapper in a real competition?"></a>0x04 What you should know if you want to use the wrapper in a real competition?</h5><h5 id="0x05-Reference"><a href="#0x05-Reference" class="headerlink" title="0x05 Reference"></a>0x05 Reference</h5><h4 id="0x00-Preface-1"><a href="#0x00-Preface-1" class="headerlink" title="0x00 Preface"></a>0x00 Preface</h4><p>When a coding competitor encounters a problem that requires a large size of input&#x2F;output and limited time, I&#x2F;O will become the bottleneck of the solution. Especially C++ programmers will find that <strong>cin&#x2F;cout</strong> will always be slower than <strong>scanf&#x2F;printf</strong>, thus in this article, I will share with you guys how I find the fastest way to read from standard input and write to standard output in C++ by setting up a benchmark and how I wrap the facility in a coding competition. Finally, I will share with you some tips you should notice if you really want to use the code for fast input&#x2F;output, and a disadvantage of it.</p><p>On the other hand, since in most competitions, problem graders are running on a Linux machine and the source code of C++ will be compiled in GCC, I decided to use the following environment to benchmark the code for faster I&#x2F;O:</p><ul><li>Fedora in csx.cs.ucalgary.ca by Secured Shell</li><li>Compile in g++ with -O2 using C++17 standard</li></ul><p>In this way, you can also verify or re-benchmark by yourself.</p><h4 id="0x01-How-to-set-the-benchmark-of-different-ways-of-I-O-1"><a href="#0x01-How-to-set-the-benchmark-of-different-ways-of-I-O-1" class="headerlink" title="0x01 How to set the benchmark of different ways of I&#x2F;O?"></a>0x01 How to set the benchmark of different ways of I&#x2F;O?</h4><p>In most cases, if a problem requires large size of input&#x2F;output and limited time in the coding competitions, we can assume that the data type for input&#x2F;output is <strong>integers</strong>, therefore, in order to benchmark, we need a generator that creates specified random integers to a specified external file, as below:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">static</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">create_data</span><span class="params">(<span class="type">const</span> <span class="type">size_t</span> &amp;data_size, <span class="type">const</span> std::string &amp;file_name)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Initialize a random number generator.</span></span><br><span class="line">    std::random_device dev;</span><br><span class="line">    <span class="function">std::mt19937 <span class="title">random_generator</span><span class="params">(dev())</span></span>;</span><br><span class="line">    <span class="function">std::uniform_int_distribution&lt;<span class="type">int</span>&gt; <span class="title">dist</span><span class="params">(std::numeric_limits&lt;<span class="type">int</span>&gt;::min(),</span></span></span><br><span class="line"><span class="params"><span class="function">                                            std::numeric_limits&lt;<span class="type">int</span>&gt;::max())</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Create an empty file</span></span><br><span class="line">    std::fstream file;</span><br><span class="line">    file.<span class="built_in">open</span>(file_name, std::ios::out);</span><br><span class="line">    <span class="keyword">if</span> (!file) &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;Failed to create the test file!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Write into a file</span></span><br><span class="line">    std::ofstream myFile;</span><br><span class="line">    myFile.<span class="built_in">open</span>(file_name);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i != data_size; ++i) &#123;</span><br><span class="line">        myFile &lt;&lt; <span class="built_in">dist</span>(random_generator) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    myFile.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>On the other hand, to benchmark different methods, I decide to generate 10000000 integers, start measuring the time <strong>before</strong> reading from standard input or writing to standard output and stop measuring the time once the job is done, as below:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    std::chrono::time_point&lt;std::chrono::steady_clock&gt; start, stop;</span><br><span class="line">    std::chrono::duration&lt;<span class="type">double</span>&gt; elapsed_in_seconds&#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    start = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">    <span class="comment">// Read/Write data here</span></span><br><span class="line">    stop = std::chrono::steady_clock::<span class="built_in">now</span>();</span><br><span class="line">    elapsed_in_seconds = stop-start;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Output the result to stdout</span></span><br><span class="line">    std::cerr &lt;&lt; <span class="string">&quot;result:  &quot;</span> &lt;&lt; elapsed_in_seconds.<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot; seconds&quot;</span>&lt;&lt; std::endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Cleaning the file for input</span></span><br><span class="line">    std::<span class="built_in">remove</span>(inputFile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Right now, I am going to share with you all methods for reading and writing:</p><ul><li><strong>cin&#x2F;cout</strong></li></ul><p>For most C++ beginners, <strong>cin&#x2F;cout</strong> is a nice and convenient way to read from stdin until <strong>EOF</strong> and write to stdout, as below:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> input;</span><br><span class="line">    <span class="keyword">while</span> (std::cin &gt;&gt; std::input) &#123;</span><br><span class="line">        std::cout &lt;&lt; input &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The buffer will be flushed after every <strong>endl</strong>, thus we can make it quicker by flushing the buffer only once after EOF, like this:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> input;</span><br><span class="line">    <span class="keyword">while</span> (std::cin &gt;&gt; std::input) &#123;</span><br><span class="line">        std::cout &lt;&lt; input &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>cin&#x2F;cout</strong> without synchronization</li></ul><p>One reason that cin&#x2F;cout is slower is that for compatibility cin&#x2F;cout is designed to sync with printf&#x2F;scanf at default, thus the order of input&#x2F;output is clear if you mix using two pairs of different ways to handle I&#x2F;O. Thus we can cancel such sync and only use cin&#x2F;cout or printf&#x2F;scanf in our solution. In this way, the time cost of I&#x2F;O will be significantly reduced. Meanwhile, we can also cancel the binding between cin and cout. And don’t forget to avoid using endl for flushing the buffer only once, like this:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> input;</span><br><span class="line">    <span class="comment">// Stop synchronization with C stdio</span></span><br><span class="line">    std::ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// Cancel binding</span></span><br><span class="line">    std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    std::cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">while</span> (std::cin &gt;&gt; std::input) &#123;</span><br><span class="line">        std::cout &lt;&lt; input &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>getchar&#x2F;putchar</strong></li></ul><p>If you parse the integer and output the integer by digits using <strong>getchar&#x2F;putchar</strong>, it will be faster than any methods above, meanwhile, we can use recursion in <strong>putchar</strong>, which is a little bit faster than using a stack to store each digit, as below:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Read and return false if EOF is encountered,</span></span><br><span class="line"><span class="comment">// otherwise return true</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span></span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;t)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == EOF) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        n |= ch == <span class="string">&#x27;-&#x27;</span>;     <span class="comment">// Handle negative numbers</span></span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">        t = t * <span class="number">10</span> + ch - <span class="number">48</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n) t = -t;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) x = -x, <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>) <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> input;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">read</span>(input)) &#123;</span><br><span class="line">        <span class="built_in">write</span>(output);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If we only need to parse an integer and store it to a reference instead of checking if there is an EOF, we can use the code below, which is actually more common in competitions:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;t)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c)) n |= c == <span class="string">&#x27;-&#x27;</span>, c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) t = t * <span class="number">10</span> + c - <span class="number">48</span>, c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span> (n) t = -t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Moreover, since coders are allowed to use only a single thread in the competition, we don’t need to consider situations such as multi-threads, or sharing variables, thus we can replace <strong>getchar</strong> and <strong>putchar</strong> with their thread-unsafe versions, <strong>getchar_unlocked</strong> and <strong>putchar_unlocked</strong>. Similarly, we can use <strong>fputs_unlocked</strong> to output C-style strings.</p><ul><li><strong>fread&#x2F;fwrite</strong></li></ul><p>We can even make it faster by reading all input into a buffer using <strong>fread</strong> and outputting the whole contents from the buffer once and for all with <strong>fwrite</strong>, since coders are given the size of data in many coding problems, they are able to estimate the size of buffers used for input&#x2F;output. We use two pointers to point at these two buffers respectively, when a digit is parsed for input&#x2F;output, pointers will advance for a step as below, notice don’t forget to flush the buffer:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> MAXSIZE = <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">char</span> input_buffer[MAXSIZE];</span><br><span class="line"><span class="type">static</span> <span class="type">char</span> *ptr1 = input_buffer + MAXSIZE;</span><br><span class="line"><span class="type">static</span> <span class="type">char</span> *ptr2 = input_buffer + MAXSIZE;</span><br><span class="line"><span class="type">static</span> <span class="type">char</span> output_buffer[MAXSIZE];</span><br><span class="line"><span class="type">static</span> <span class="type">char</span> *ptr = output_buffer;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">static</span></span></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">my_getchar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ptr1 == ptr2) &#123;</span><br><span class="line">        ptr1 = input_buffer;</span><br><span class="line">        ptr2 = input_buffer + <span class="built_in">fread</span>(input_buffer, <span class="number">1</span>, MAXSIZE, stdin);</span><br><span class="line">        <span class="keyword">if</span> (ptr1 == ptr2) &#123;</span><br><span class="line">            <span class="keyword">return</span> EOF;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *ptr1++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">static</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">my_putchar</span><span class="params">(<span class="type">const</span> <span class="type">char</span> &amp;ch)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ptr - output_buffer == MAXSIZE) &#123;</span><br><span class="line">        <span class="built_in">fwrite</span>(output_buffer, <span class="number">1</span>, MAXSIZE, stdout);</span><br><span class="line">        ptr = output_buffer;</span><br><span class="line">    &#125;</span><br><span class="line">    *ptr++ = ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;t)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> c = <span class="built_in">my_getchar</span>();</span><br><span class="line">    t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c)) n |= c == <span class="string">&#x27;-&#x27;</span>;, c = <span class="built_in">my_getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) t = t * <span class="number">10</span> + c - <span class="number">48</span>, c = <span class="built_in">my_getchar</span>();</span><br><span class="line">    <span class="keyword">if</span> (n) t = -t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span></span></span><br><span class="line"><span class="function"><span class="title">write</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) x = -x, <span class="built_in">my_putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>) <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">my_putchar</span>(x % <span class="number">10</span> + <span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Execute this function after using write() on all numbers for output.</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">flush</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fwrite</span>(output_buffer, <span class="number">1</span>, ptr - output_buffer, stdout);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">1000000</span>;</span><br><span class="line">    <span class="type">int</span> input;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(input);</span><br><span class="line">        <span class="built_in">write</span>(input);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">my_putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="built_in">flush</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>More faster method of I&#x2F;O?</li></ul><p>Is there an even faster method for input&#x2F;output in C++? Well, instead of writing into a buffer, we can always map stdin into memory directly, it will be a little faster than <strong>fread</strong>. The function <strong>mmap</strong> helps us do the job easily, but it also requires us to include additional header files, if you really want to use it, make sure it is legal in the competition. Here I wrap a thread-unsafe <strong>mmap&#x2F;fwrite</strong> into a namespace:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/extc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> FasterIO &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> MAXSIZE = <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> *input_buffer = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> *ptr0;</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> output_buffer[MAXSIZE];</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> *ptr = output_buffer;</span><br><span class="line">    <span class="type">int</span> total_size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">static</span></span></span><br><span class="line"><span class="function">    <span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">stat</span> sb; <span class="comment">// dont initialize it in order to save time</span></span><br><span class="line">        <span class="built_in">fstat</span>(<span class="built_in">fileno_unlocked</span>(stdin), &amp;sb);</span><br><span class="line">        total_size = sb.st_size;</span><br><span class="line">        input_buffer = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span> *&gt;(<span class="built_in">mmap</span>(<span class="literal">nullptr</span>, total_size,PROT_READ, MAP_PRIVATE,<span class="built_in">fileno_unlocked</span>(stdin),<span class="number">0</span>));</span><br><span class="line">        ptr0 = input_buffer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">static</span></span></span><br><span class="line"><span class="function">    <span class="type">char</span> <span class="title">getchar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ptr0 == input_buffer + total_size || *ptr0 == EOF) <span class="keyword">return</span> EOF;</span><br><span class="line">        <span class="keyword">return</span> *ptr0++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">        t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c)) n |= c == <span class="string">&#x27;-&#x27;</span>, c = <span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) t = t * <span class="number">10</span> + c - <span class="number">48</span>, c = <span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">if</span> (n) t = -t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">static</span></span></span><br><span class="line"><span class="function">    <span class="type">void</span> <span class="title">putchar</span><span class="params">(<span class="type">const</span> <span class="type">char</span> &amp;ch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ptr - output_buffer == MAXSIZE) &#123;</span><br><span class="line">            <span class="built_in">fwrite_unlocked</span>(output_buffer, <span class="number">1</span>, MAXSIZE, stdout);</span><br><span class="line">            ptr = output_buffer;</span><br><span class="line">        &#125;</span><br><span class="line">        *ptr++ = ch;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) x = -x, <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">9</span>) <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="number">48</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span></span></span><br><span class="line"><span class="function">    <span class="type">void</span> <span class="title">flush</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">fwrite_unlocked</span>(output_buffer, <span class="number">1</span>, ptr - output_buffer, stdout);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use freopen here if you want</span></span><br><span class="line">    <span class="comment">// Init before reading any data</span></span><br><span class="line">    FasterIO::<span class="built_in">init</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n, input;</span><br><span class="line">    FasterIO::<span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        FasterIO::<span class="built_in">read</span>(input);</span><br><span class="line">        FasterIO::<span class="built_in">write</span>(input);</span><br><span class="line">        FasterIO::<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Again, don&#x27;t forget to flush the buffer</span></span><br><span class="line">    FasterIO::<span class="built_in">flush</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>BENCHMARK</p><p>So what is the benchmark of different methods after all these tests? Well, here are two tables of results, I tested reading and writing 10000000 integers <strong>separately</strong> on the server of UofC by SSH:</p><p>For input, we have:</p><table><thead><tr><th>METHOD</th><th>TIME COST (seconds)</th></tr></thead><tbody><tr><td>mmap</td><td>0.333833</td></tr><tr><td>fread</td><td>0.493002</td></tr><tr><td>getchar unlocked</td><td>0.433707</td></tr><tr><td>getchar</td><td>0.619069</td></tr><tr><td>scanf</td><td>1.62939</td></tr><tr><td>cin without sync</td><td>1.7917</td></tr><tr><td>cin</td><td>5.04564</td></tr></tbody></table><p>Also, for output, we have:</p><table><thead><tr><th>METHOD</th><th>TIME COST (seconds)</th></tr></thead><tbody><tr><td>fwrite</td><td>0.735085</td></tr><tr><td>putchar unlocked</td><td>0.826488</td></tr><tr><td>putchar</td><td>0.815868</td></tr><tr><td>printf</td><td>1.41162</td></tr><tr><td>cout without sync</td><td>1.36623</td></tr><tr><td>cout</td><td>30.6118</td></tr></tbody></table><p>Now you see that different ways of I&#x2F;O may make a huge impact on the time cost of a routine in coding competitions. For unknown reasons, <strong>putchar unlocked</strong> is a little bit slower than <strong>putchar</strong>, but it will definitely be faster than <strong>printf</strong>.</p></li></ul><h4 id="0x02-How-to-wrap-the-faster-way-of-I-O-1"><a href="#0x02-How-to-wrap-the-faster-way-of-I-O-1" class="headerlink" title="0x02 How to wrap the faster way of I&#x2F;O?"></a>0x02 How to wrap the faster way of I&#x2F;O?</h4><p>Since <strong>mmap</strong> is only available in Linux machines and there are some problems out there that you cannot predict the size of input&#x2F;output, I decided to take <strong>getchar&#x2F;putchar</strong> methods and wrap it into a namespace, which has better readability. Now since we may read integers that have a wider range in real problems, so I also decided to wrap it with <strong>C++ templates</strong>, thus the user can also process data types such as <strong>long long</strong> with it, with the help of <strong>template argument deduction</strong> in C++17, you don’t need to explicitly indicate the type.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">    <span class="keyword">inline</span></span></span><br><span class="line"><span class="function">    <span class="type">bool</span> <span class="title">can_read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> ch = <span class="built_in">getchar_unlocked</span>();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch == EOF) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            n |= ch == <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">            ch = <span class="built_in">getchar_unlocked</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">            t = t * <span class="number">10</span> + ch - <span class="number">48</span>;</span><br><span class="line">            ch = <span class="built_in">getchar_unlocked</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n) t = -t;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span></span></span><br><span class="line"><span class="function">    <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = <span class="number">0</span>; <span class="type">int</span> c = <span class="built_in">getchar_unlocked</span>(); t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c)) n |= c == <span class="string">&#x27;-&#x27;</span>, c = <span class="built_in">getchar_unlocked</span>();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) t = t * <span class="number">10</span> + c - <span class="number">48</span>, c = <span class="built_in">getchar_unlocked</span>();</span><br><span class="line">        <span class="keyword">if</span> (n) t = -t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span></span></span><br><span class="line"><span class="function">    <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;t, Args &amp;... args)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">read</span>(t); <span class="built_in">read</span>(args...);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) x = -x, <span class="built_in">putchar_unlocked</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">9</span>) <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">putchar_unlocked</span>(x % <span class="number">10</span> + <span class="number">48</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">writeln</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">write</span>(x);</span><br><span class="line">        <span class="built_in">putchar_unlocked</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> val;</span><br><span class="line">    IO::<span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        IO::<span class="built_in">read</span>(val);</span><br><span class="line">        IO::<span class="built_in">writeln</span>(val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="0x03-How-to-tweak-the-faster-way-of-I-O-to-handle-different-variadic-arguments-1"><a href="#0x03-How-to-tweak-the-faster-way-of-I-O-to-handle-different-variadic-arguments-1" class="headerlink" title="0x03 How to tweak the faster way of I&#x2F;O to handle different variadic arguments?"></a>0x03 How to tweak the faster way of I&#x2F;O to handle different variadic arguments?</h4><p>Since C++11 we have <strong>Parameter pack</strong> that accepts zero or more template arguments, we can simply pack variadic arguments and process them using recursion, and now we can have the full demo code with the final version of a wrapper:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/extc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">    <span class="keyword">inline</span></span></span><br><span class="line"><span class="function">    <span class="type">bool</span> <span class="title">can_read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> ch = <span class="built_in">getchar_unlocked</span>();</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch == EOF) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            n |= ch == <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">            ch = <span class="built_in">getchar_unlocked</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">            t = t * <span class="number">10</span> + ch - <span class="number">48</span>;</span><br><span class="line">            ch = <span class="built_in">getchar_unlocked</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n) t = -t;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span></span><br><span class="line"><span class="function">    <span class="keyword">inline</span></span></span><br><span class="line"><span class="function">    <span class="type">bool</span> <span class="title">can_read</span><span class="params">(T&amp; t, Args&amp;... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">can_read</span>(t) &amp;&amp; <span class="built_in">can_read</span>(args...);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">    <span class="keyword">inline</span></span></span><br><span class="line"><span class="function">    <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> c = <span class="built_in">getchar_unlocked</span>();</span><br><span class="line">        t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c)) n |= c == <span class="string">&#x27;-&#x27;</span>, c = <span class="built_in">getchar_unlocked</span>();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) t = t * <span class="number">10</span> + c - <span class="number">48</span>, c = <span class="built_in">getchar_unlocked</span>();</span><br><span class="line">        <span class="keyword">if</span> (n) t = -t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span></span><br><span class="line"><span class="function">    <span class="keyword">inline</span></span></span><br><span class="line"><span class="function">    <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;t, Args &amp;... args)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">read</span>(t);</span><br><span class="line">        <span class="built_in">read</span>(args...);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">    <span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) x = -x, <span class="built_in">putchar_unlocked</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">9</span>) <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">putchar_unlocked</span>(x % <span class="number">10</span> + <span class="number">48</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">    <span class="keyword">inline</span> <span class="type">void</span> <span class="title">writeln</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">write</span>(x);</span><br><span class="line">        <span class="built_in">putchar_unlocked</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span></span><br><span class="line"><span class="function">    <span class="keyword">inline</span> <span class="type">void</span> <span class="title">writeln</span><span class="params">(T t, Args... args)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">writeln</span>(t); <span class="built_in">writeln</span>(args...);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll val;</span><br><span class="line">    <span class="keyword">while</span> (IO::<span class="built_in">can_read</span>(val)) IO::<span class="built_in">writeln</span>(val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can try <a href="https://open.kattis.com/problems/sumsets">this problem</a> with and without using the fast IO method, and here are my two different time costs. You can see in this case the fast IO method hugely helps you reduce the run-time, even though the algorithm is the same.</p><p><img src="/attaches/fast_io.png" alt="fast_io"></p><h4 id="0x04-What-you-should-know-if-you-want-to-use-the-wrapper-in-a-real-competition-1"><a href="#0x04-What-you-should-know-if-you-want-to-use-the-wrapper-in-a-real-competition-1" class="headerlink" title="0x04 What you should know if you want to use the wrapper in a real competition?"></a>0x04 What you should know if you want to use the wrapper in a real competition?</h4><p>Well, for problems that only require you to read or write wrappers, you could just use it in the competition. On the other hand, if the problem requires you to process strings, you should use <strong>scanf</strong> or <strong>cin</strong> without sync and <strong>std::string</strong>. If you have to handle numbers and strings at the same, don’t use the wrapper and <strong>cin&#x2F;cout</strong> without syncing together since the sync between <strong>cin&#x2F;cout</strong> and <strong>getchar&#x2F;putchar</strong> is cancelled.</p><h4 id="0x05-References"><a href="#0x05-References" class="headerlink" title="0x05 References"></a>0x05 References</h4><p><a href="https://github.com/H-Shen/Collection_of_my_coding_practice/blob/master/Miscellaneous/FastIO.cpp">Implementation of fast IO in C++</a></p><p><a href="https://github.com/H-Shen/Collection_of_my_coding_practice/blob/master/Miscellaneous/FastIOTest.sh">Shellscript to run the benchmark</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Benchmark-the-Fastest-Way-of-I-O-in-C-for-Coding-Competition&quot;&gt;&lt;a href=&quot;#Benchmark-the-Fastest-Way-of-I-O-in-C-for-Coding-Competition</summary>
      
    
    
    
    
    <category term="Blogs" scheme="https://h-shen.github.io/tags/Blogs/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://h-shen.github.io/blog_04/"/>
    <id>https://h-shen.github.io/blog_04/</id>
    <published>2023-11-10T04:16:36.000Z</published>
    <updated>2023-11-12T10:07:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Solution-of-Problem-6365-in-Luogu"><a href="#Solution-of-Problem-6365-in-Luogu" class="headerlink" title="Solution of Problem 6365 in Luogu"></a>Solution of Problem 6365 in Luogu</h2><h4 id="Problem-Link-in-Chinese"><a href="#Problem-Link-in-Chinese" class="headerlink" title="Problem Link (in Chinese):"></a>Problem Link (in Chinese):</h4><p><a href="https://www.luogu.com.cn/problem/P6365">Frequency of the Mode</a></p><h4 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h4><p>In the classroom of Intelligence Specialized Training students, to liven up the atmosphere and reinforce the knowledge of bitwise operations, the students started playing a game.</p><p>There are <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="7.625ex" height="2.267ex" role="img" focusable="false" viewBox="0 -864 3370.1 1002" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-4-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-4-TEX-N-2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path><path id="MJX-4-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-4-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-4-TEX-N-36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-4-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(877.8,0)"><use data-c="2264" xlink:href="#MJX-4-TEX-N-2264"></use></g><g data-mml-node="msup" transform="translate(1933.6,0)"><g data-mml-node="mn"><use data-c="31" xlink:href="#MJX-4-TEX-N-31"></use><use data-c="30" xlink:href="#MJX-4-TEX-N-30" transform="translate(500,0)"></use></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use data-c="36" xlink:href="#MJX-4-TEX-N-36"></use></g></g></g></g></g></svg></mjx-container> students in the class, and each student has two cards, a red card or a black card. Each card has a non-negative integer that does not exceed <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.25ex" height="2.005ex" role="img" focusable="false" viewBox="0 -864 1436.6 886" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-4-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-4-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-4-TEX-N-39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><use data-c="31" xlink:href="#MJX-4-TEX-N-31"></use><use data-c="30" xlink:href="#MJX-4-TEX-N-30" transform="translate(500,0)"></use></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use data-c="39" xlink:href="#MJX-4-TEX-N-39"></use></g></g></g></g></g></svg></mjx-container>. The red card number of the <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-4-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D456" xlink:href="#MJX-4-TEX-I-1D456"></use></g></g></g></svg></mjx-container>-th student is <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="1.937ex" height="1.355ex" role="img" focusable="false" viewBox="0 -441 856 598.8" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-4-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-4-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-4-TEX-I-1D44E"></use></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="1D456" xlink:href="#MJX-4-TEX-I-1D456"></use></g></g></g></g></g></svg></mjx-container>, and the black card number is <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="1.71ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 756 851.8" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-4-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-4-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D44F" xlink:href="#MJX-4-TEX-I-1D44F"></use></g><g data-mml-node="mi" transform="translate(462,-150) scale(0.707)"><use data-c="1D456" xlink:href="#MJX-4-TEX-I-1D456"></use></g></g></g></g></svg></mjx-container>.</p><p>Now, each student needs to play a card. Each student can either directly play the number on their red card or play the result of the bitwise XOR operation between their red and black card numbers. Finally, the teacher will collect all the numbers played by the students.</p><p>The number that appears the most among these numbers is the mode. With the best cooperative strategy for all students, we hope that the frequency of the mode is as high as possible. What is the number that appears the most?</p><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>The first line contains a positive integer <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-4-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-4-TEX-I-1D45B"></use></g></g></g></svg></mjx-container>.</p><p>The following <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-4-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-4-TEX-I-1D45B"></use></g></g></g></svg></mjx-container> lines, where the <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-4-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D456" xlink:href="#MJX-4-TEX-I-1D456"></use></g></g></g></svg></mjx-container>-th line contains non-negative integers <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="4.653ex" height="2.009ex" role="img" focusable="false" viewBox="0 -694 2056.6 888" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-4-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-4-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path><path id="MJX-4-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-4-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-4-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(562,-150) scale(0.707)"><use data-c="1D456" xlink:href="#MJX-4-TEX-I-1D456"></use></g></g><g data-mml-node="mo" transform="translate(856,0)"><use data-c="2C" xlink:href="#MJX-4-TEX-N-2C"></use></g><g data-mml-node="msub" transform="translate(1300.6,0)"><g data-mml-node="mi"><use data-c="1D44F" xlink:href="#MJX-4-TEX-I-1D44F"></use></g><g data-mml-node="mi" transform="translate(462,-150) scale(0.707)"><use data-c="1D456" xlink:href="#MJX-4-TEX-I-1D456"></use></g></g></g></g></svg></mjx-container>, representing the numbers on the red and black cards of the <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewBox="0 -661 345 672" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-4-TEX-I-1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D456" xlink:href="#MJX-4-TEX-I-1D456"></use></g></g></g></svg></mjx-container>-th student.</p><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>An integer, representing the answer. If there are multiple solutions, please output the smallest one.</p><h4 id="Sample-1"><a href="#Sample-1" class="headerlink" title="Sample #1"></a>Sample #1</h4><h5 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input #1"></a>Sample Input #1</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">21 9</span><br><span class="line">28 9</span><br><span class="line">28 3</span><br><span class="line">17 4</span><br></pre></td></tr></table></figure><h5 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output #1"></a>Sample Output #1</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">21</span><br></pre></td></tr></table></figure><h4 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h4><p>The mode can appear at most <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.554ex" role="img" focusable="false" viewBox="0 -665 500 687" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-4-TEX-N-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><use data-c="33" xlink:href="#MJX-4-TEX-N-33"></use></g></g></g></svg></mjx-container> times, and there are two ways to achieve this:</p><ul><li>The 1st student plays the red card directly, the 2nd student plays the XOR of red and black, the 3rd student plays any card, and the 4th student plays the XOR of red and black. In this way, students 1, 2, and 4 can all play <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 1000 666" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-4-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-4-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><use data-c="32" xlink:href="#MJX-4-TEX-N-32"></use><use data-c="31" xlink:href="#MJX-4-TEX-N-31" transform="translate(500,0)"></use></g></g></g></svg></mjx-container>.</li><li>The 1st student plays the XOR of red and black, the 2nd student plays the red card directly, the 3rd student plays the red card directly, and the 4th student plays any card. In this way, students 1, 2, and 3 can all play <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 1000 688" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-4-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-4-TEX-N-38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><use data-c="32" xlink:href="#MJX-4-TEX-N-32"></use><use data-c="38" xlink:href="#MJX-4-TEX-N-38" transform="translate(500,0)"></use></g></g></g></svg></mjx-container>.</li></ul><p>Therefore, both <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 1000 666" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-4-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-4-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><use data-c="32" xlink:href="#MJX-4-TEX-N-32"></use><use data-c="31" xlink:href="#MJX-4-TEX-N-31" transform="translate(500,0)"></use></g></g></g></svg></mjx-container> and <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 1000 688" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-3-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-3-TEX-N-38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><use data-c="32" xlink:href="#MJX-3-TEX-N-32"></use><use data-c="38" xlink:href="#MJX-3-TEX-N-38" transform="translate(500,0)"></use></g></g></g></svg></mjx-container> are the modes that appear the most, as they can appear up to <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.554ex" role="img" focusable="false" viewBox="0 -665 500 687" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-3-TEX-N-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><use data-c="33" xlink:href="#MJX-3-TEX-N-33"></use></g></g></g></svg></mjx-container> times, and there is no scheme where they appear <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.532ex" role="img" focusable="false" viewBox="0 -677 500 677" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-3-TEX-N-34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><use data-c="34" xlink:href="#MJX-3-TEX-N-34"></use></g></g></g></svg></mjx-container> times. However, since the smaller one should be output if there are multiple solutions, please output <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 1000 666" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-3-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-3-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><use data-c="32" xlink:href="#MJX-3-TEX-N-32"></use><use data-c="31" xlink:href="#MJX-3-TEX-N-31" transform="translate(500,0)"></use></g></g></g></svg></mjx-container>.</p><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><ul><li><p>Problem Analysis</p><p>To find the mode, we first need to count all possible card-playing scenarios for each student and calculate the frequency of each scenario. The smallest value among those with the highest frequency is what we are looking for. Since each student may play a red card or the XOR of two cards, we can handle this in two sub-cases:</p><ul><li><p>If the red card played by the student and the XOR of two cards are different, they need to be counted separately.</p></li><li><p>If the red card played by the student and the XOR of two cards are the same, it is counted only once.</p></li></ul><p>Therefore:</p><ul><li><p>To achieve fast access and update of frequencies during counting, a hash table is used for storage.<br>The implementation of the hash table can use <strong>std::unordered_map</strong> or <strong>__gnu_pbds::gp_hash_table</strong>, with the latter being used here.</p></li><li><p>To prevent the XOR value from exceeding the int range, long long is used.</p></li><li><p>To reduce the basic operation time complexity of the hash table to <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.844ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2141 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-3-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path><path id="MJX-3-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-3-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-3-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D442" xlink:href="#MJX-3-TEX-I-1D442"></use></g><g data-mml-node="mo" transform="translate(763,0)"><use data-c="28" xlink:href="#MJX-3-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1152,0)"><use data-c="1D45B" xlink:href="#MJX-3-TEX-I-1D45B"></use></g><g data-mml-node="mo" transform="translate(1752,0)"><use data-c="29" xlink:href="#MJX-3-TEX-N-29"></use></g></g></g></svg></mjx-container><br>O(n) in the case of special inputs, Codeforces’ anti-hack hash function is used, referenced from <a href="https://codeforces.com/blog/entry/62393">https://codeforces.com/blog/entry/62393</a>.</p></li><li><p>To find the smallest value among those with the highest frequency, a linear check is needed after calculating the maximum frequency.</p></li><li><p>To avoid potential constant optimization issues, fast input and output can be added.</p></li></ul></li><li><p>The code below is compiled using the C++17 standard and O2 optimization.</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/extc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">    <span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> c = <span class="built_in">getchar_unlocked</span>();</span><br><span class="line">        t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c)) n |= c == <span class="string">&#x27;-&#x27;</span>, c = <span class="built_in">getchar_unlocked</span>();</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) t = t * <span class="number">10</span> + c - <span class="number">48</span>, c = <span class="built_in">getchar_unlocked</span>();</span><br><span class="line">        <span class="keyword">if</span> (n) t = -t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span></span><br><span class="line"><span class="function">    <span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;t, Args &amp;... args)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">read</span>(t);</span><br><span class="line">        <span class="built_in">read</span>(args...);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">    <span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) x = -x, <span class="built_in">putchar_unlocked</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">9</span>) <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line">        <span class="built_in">putchar_unlocked</span>(x % <span class="number">10</span> + <span class="number">48</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">    <span class="keyword">inline</span> <span class="type">void</span> <span class="title">writeln</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">write</span>(x);</span><br><span class="line">        <span class="built_in">putchar_unlocked</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reference: https://codeforces.com/blog/entry/62393</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">custom_hash</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">uint64_t</span> <span class="title">splitmix64</span><span class="params">(<span class="type">uint64_t</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// http://xorshift.di.unimi.it/splitmix64.c</span></span><br><span class="line">        x += <span class="number">0x9e3779b97f4a7c15</span>;</span><br><span class="line">        x = (x ^ (x &gt;&gt; <span class="number">30</span>)) * <span class="number">0xbf58476d1ce4e5b9</span>;</span><br><span class="line">        x = (x ^ (x &gt;&gt; <span class="number">27</span>)) * <span class="number">0x94d049bb133111eb</span>;</span><br><span class="line">        <span class="keyword">return</span> x ^ (x &gt;&gt; <span class="number">31</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">uint64_t</span> x)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">const</span> <span class="type">uint64_t</span> FIXED_RANDOM = chrono::steady_clock::<span class="built_in">now</span>().<span class="built_in">time_since_epoch</span>().<span class="built_in">count</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">splitmix64</span>(x + FIXED_RANDOM);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">gp_hash_table&lt;ll, <span class="type">int</span>, custom_hash&gt; freq;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    IO::<span class="built_in">read</span>(n);</span><br><span class="line">    ll a, b, temp;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        IO::<span class="built_in">read</span>(a, b);</span><br><span class="line">        ++freq[a];</span><br><span class="line">        temp = a ^ b;</span><br><span class="line">        <span class="keyword">if</span> (temp != a) &#123;</span><br><span class="line">            ++freq[temp];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> max_freq = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;[k, v] : freq) &#123;</span><br><span class="line">        max_freq = <span class="built_in">max</span>(max_freq, v);</span><br><span class="line">    &#125;</span><br><span class="line">    ll min_val_with_max_freq = numeric_limits&lt;ll&gt;::<span class="built_in">max</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;[k, v] : freq) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == max_freq) &#123;</span><br><span class="line">            min_val_with_max_freq = <span class="built_in">min</span>(min_val_with_max_freq, k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    IO::<span class="built_in">writeln</span>(min_val_with_max_freq);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Solution-of-Problem-6365-in-Luogu&quot;&gt;&lt;a href=&quot;#Solution-of-Problem-6365-in-Luogu&quot; class=&quot;headerlink&quot; title=&quot;Solution of Problem 6365 i</summary>
      
    
    
    
    
    <category term="Blogs" scheme="https://h-shen.github.io/tags/Blogs/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://h-shen.github.io/blog_03/"/>
    <id>https://h-shen.github.io/blog_03/</id>
    <published>2023-11-10T02:28:27.000Z</published>
    <updated>2023-11-12T10:06:42.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Solution-of-Problem-1226-in-Luogu"><a href="#Solution-of-Problem-1226-in-Luogu" class="headerlink" title="Solution of Problem 1226 in Luogu"></a>Solution of Problem 1226 in Luogu</h3><h4 id="Problem-Link-in-Chinese"><a href="#Problem-Link-in-Chinese" class="headerlink" title="Problem Link (in Chinese):"></a>Problem Link (in Chinese):</h4><p><a href="https://www.luogu.com.cn/problem/P1226">P1226</a></p><h4 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h4><p>You are given three integers <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.197ex" height="1.02ex" role="img" focusable="false" viewBox="0 -441 529 451" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-3-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-3-TEX-I-1D44E"></use></g></g></g></svg></mjx-container>, <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.971ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 429 705" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-3-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D44F" xlink:href="#MJX-3-TEX-I-1D44F"></use></g></g></g></svg></mjx-container>, <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.138ex" height="1.439ex" role="img" focusable="false" viewBox="0 -442 503 636" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-3-TEX-I-1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D45D" xlink:href="#MJX-3-TEX-I-1D45D"></use></g></g></g></svg></mjx-container>，obtain the value of </p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="8.74ex" height="2.37ex" role="img" focusable="false" viewBox="0 -853.7 3862.9 1047.7" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-3-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-3-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-3-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-3-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-3-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path><path id="MJX-3-TEX-I-1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-3-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(562,363) scale(0.707)"><use data-c="1D44F" xlink:href="#MJX-3-TEX-I-1D44F"></use></g></g><g data-mml-node="mo" transform="translate(1193.1,0)"><use data-c="6D" xlink:href="#MJX-3-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-3-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-3-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mi" transform="translate(3359.9,0)"><use data-c="1D45D" xlink:href="#MJX-3-TEX-I-1D45D"></use></g></g></g></svg></mjx-container><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>A line contains three integers, <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.197ex" height="1.02ex" role="img" focusable="false" viewBox="0 -441 529 451" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-3-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-3-TEX-I-1D44E"></use></g></g></g></svg></mjx-container>, <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.971ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 429 705" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-3-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D44F" xlink:href="#MJX-3-TEX-I-1D44F"></use></g></g></g></svg></mjx-container> and <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.138ex" height="1.439ex" role="img" focusable="false" viewBox="0 -442 503 636" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-3-TEX-I-1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D45D" xlink:href="#MJX-3-TEX-I-1D45D"></use></g></g></g></svg></mjx-container>.</p><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>Output the result of <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="8.74ex" height="2.37ex" role="img" focusable="false" viewBox="0 -853.7 3862.9 1047.7" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-3-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-3-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-3-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-3-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-3-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path><path id="MJX-3-TEX-I-1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-3-TEX-I-1D44E"></use></g><g data-mml-node="mi" transform="translate(562,363) scale(0.707)"><use data-c="1D44F" xlink:href="#MJX-3-TEX-I-1D44F"></use></g></g><g data-mml-node="mo" transform="translate(1193.1,0)"><use data-c="6D" xlink:href="#MJX-3-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-3-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-3-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mi" transform="translate(3359.9,0)"><use data-c="1D45D" xlink:href="#MJX-3-TEX-I-1D45D"></use></g></g></g></svg></mjx-container></p><h4 id="Sample-1"><a href="#Sample-1" class="headerlink" title="Sample #1"></a>Sample #1</h4><h5 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input #1"></a>Sample Input #1</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 10 9</span><br></pre></td></tr></table></figure><h5 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output #1"></a>Sample Output #1</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure><h4 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h4><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="10.461ex" height="2.072ex" role="img" focusable="false" viewBox="0 -833.9 4623.7 915.9" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-3-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-3-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-3-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-3-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-3-TEX-N-34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><use data-c="32" xlink:href="#MJX-3-TEX-N-32"></use></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use data-c="31" xlink:href="#MJX-3-TEX-N-31"></use><use data-c="30" xlink:href="#MJX-3-TEX-N-30" transform="translate(500,0)"></use></g></g></g><g data-mml-node="mo" transform="translate(1567.9,0)"><use data-c="3D" xlink:href="#MJX-3-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(2623.7,0)"><use data-c="31" xlink:href="#MJX-3-TEX-N-31"></use><use data-c="30" xlink:href="#MJX-3-TEX-N-30" transform="translate(500,0)"></use><use data-c="32" xlink:href="#MJX-3-TEX-N-32" transform="translate(1000,0)"></use><use data-c="34" xlink:href="#MJX-3-TEX-N-34" transform="translate(1500,0)"></use></g></g></g></svg></mjx-container> and <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="15.335ex" height="1.756ex" role="img" focusable="false" viewBox="0 -694 6778.1 776" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-3-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-3-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-3-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-3-TEX-N-34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path id="MJX-3-TEX-N-6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path id="MJX-3-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-3-TEX-N-64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z"></path><path id="MJX-3-TEX-N-39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path><path id="MJX-3-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-3-TEX-N-37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><use data-c="31" xlink:href="#MJX-3-TEX-N-31"></use><use data-c="30" xlink:href="#MJX-3-TEX-N-30" transform="translate(500,0)"></use><use data-c="32" xlink:href="#MJX-3-TEX-N-32" transform="translate(1000,0)"></use><use data-c="34" xlink:href="#MJX-3-TEX-N-34" transform="translate(1500,0)"></use></g><g data-mml-node="mo" transform="translate(2277.8,0)"><use data-c="6D" xlink:href="#MJX-3-TEX-N-6D"></use><use data-c="6F" xlink:href="#MJX-3-TEX-N-6F" transform="translate(833,0)"></use><use data-c="64" xlink:href="#MJX-3-TEX-N-64" transform="translate(1333,0)"></use></g><g data-mml-node="mn" transform="translate(4444.6,0)"><use data-c="39" xlink:href="#MJX-3-TEX-N-39"></use></g><g data-mml-node="mo" transform="translate(5222.3,0)"><use data-c="3D" xlink:href="#MJX-3-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(6278.1,0)"><use data-c="37" xlink:href="#MJX-3-TEX-N-37"></use></g></g></g></svg></mjx-container><h4 id="Input-Size"><a href="#Input-Size" class="headerlink" title="Input Size"></a>Input Size</h4><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="13.258ex" height="2.326ex" role="img" focusable="false" viewBox="0 -833.9 5859.9 1027.9" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-3-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-3-TEX-N-2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path><path id="MJX-3-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-3-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-3-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-3-TEX-N-3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path><path id="MJX-3-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-3-TEX-N-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path id="MJX-3-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><use data-c="30" xlink:href="#MJX-3-TEX-N-30"></use></g><g data-mml-node="mo" transform="translate(777.8,0)"><use data-c="2264" xlink:href="#MJX-3-TEX-N-2264"></use></g><g data-mml-node="mi" transform="translate(1833.6,0)"><use data-c="1D44E" xlink:href="#MJX-3-TEX-I-1D44E"></use></g><g data-mml-node="mo" transform="translate(2362.6,0)"><use data-c="2C" xlink:href="#MJX-3-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(2807.2,0)"><use data-c="1D44F" xlink:href="#MJX-3-TEX-I-1D44F"></use></g><g data-mml-node="mo" transform="translate(3514,0)"><use data-c="3C" xlink:href="#MJX-3-TEX-N-3C"></use></g><g data-mml-node="msup" transform="translate(4569.8,0)"><g data-mml-node="mn"><use data-c="32" xlink:href="#MJX-3-TEX-N-32"></use></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use data-c="33" xlink:href="#MJX-3-TEX-N-33"></use><use data-c="31" xlink:href="#MJX-3-TEX-N-31" transform="translate(500,0)"></use></g></g></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="9.081ex" height="1.756ex" role="img" focusable="false" viewBox="0 -694 4014 776" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-3-TEX-I-1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path><path id="MJX-3-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path><path id="MJX-3-TEX-I-1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path><path id="MJX-3-TEX-N-3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path><path id="MJX-3-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D44E" xlink:href="#MJX-3-TEX-I-1D44E"></use></g><g data-mml-node="mo" transform="translate(751.2,0)"><use data-c="2B" xlink:href="#MJX-3-TEX-N-2B"></use></g><g data-mml-node="mi" transform="translate(1751.4,0)"><use data-c="1D44F" xlink:href="#MJX-3-TEX-I-1D44F"></use></g><g data-mml-node="mo" transform="translate(2458.2,0)"><use data-c="3E" xlink:href="#MJX-3-TEX-N-3E"></use></g><g data-mml-node="mn" transform="translate(3514,0)"><use data-c="30" xlink:href="#MJX-3-TEX-N-30"></use></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="11.222ex" height="2.326ex" role="img" focusable="false" viewBox="0 -833.9 4960.2 1027.9" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-3-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-3-TEX-N-2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path><path id="MJX-3-TEX-I-1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path><path id="MJX-3-TEX-N-3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path><path id="MJX-3-TEX-N-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path id="MJX-3-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><use data-c="32" xlink:href="#MJX-3-TEX-N-32"></use></g><g data-mml-node="mo" transform="translate(777.8,0)"><use data-c="2264" xlink:href="#MJX-3-TEX-N-2264"></use></g><g data-mml-node="mi" transform="translate(1833.6,0)"><use data-c="1D45D" xlink:href="#MJX-3-TEX-I-1D45D"></use></g><g data-mml-node="mo" transform="translate(2614.3,0)"><use data-c="3C" xlink:href="#MJX-3-TEX-N-3C"></use></g><g data-mml-node="msup" transform="translate(3670.1,0)"><g data-mml-node="mn"><use data-c="32" xlink:href="#MJX-3-TEX-N-32"></use></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use data-c="33" xlink:href="#MJX-3-TEX-N-33"></use><use data-c="31" xlink:href="#MJX-3-TEX-N-31" transform="translate(500,0)"></use></g></g></g></g></g></svg></mjx-container><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>We can use the technique of quick-power with the module to reduce the time complexity of the algorithm to <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.922ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4385.3 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-3-TEX-C-4F" d="M308 428Q289 428 289 438Q289 457 318 508T378 593Q417 638 475 671T599 705Q688 705 732 643T777 483Q777 380 733 285T620 123T464 18T293 -22Q188 -22 123 51T58 245Q58 327 87 403T159 533T249 626T333 685T388 705Q404 705 404 693Q404 674 363 649Q333 632 304 606T239 537T181 429T158 290Q158 179 214 114T364 48Q489 48 583 165T677 438Q677 473 670 505T648 568T601 617T528 636Q518 636 513 635Q486 629 460 600T419 544T392 490Q383 470 372 459Q341 430 308 428Z"></path><path id="MJX-3-TEX-N-28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path id="MJX-3-TEX-I-1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-3-TEX-N-6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path id="MJX-3-TEX-N-6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z"></path><path id="MJX-3-TEX-N-67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z"></path><path id="MJX-3-TEX-N-2061" d=""></path><path id="MJX-3-TEX-N-29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><use data-c="4F" xlink:href="#MJX-3-TEX-C-4F"></use></g></g><g data-mml-node="mo" transform="translate(796,0)"><use data-c="28" xlink:href="#MJX-3-TEX-N-28"></use></g><g data-mml-node="mi" transform="translate(1185,0)"><use data-c="1D45B" xlink:href="#MJX-3-TEX-I-1D45B"></use></g><g data-mml-node="mi" transform="translate(1951.7,0)"><use data-c="6C" xlink:href="#MJX-3-TEX-N-6C"></use><use data-c="6F" xlink:href="#MJX-3-TEX-N-6F" transform="translate(278,0)"></use><use data-c="67" xlink:href="#MJX-3-TEX-N-67" transform="translate(778,0)"></use></g><g data-mml-node="mo" transform="translate(3229.7,0)"><use data-c="2061" xlink:href="#MJX-3-TEX-N-2061"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3396.3,0)"><g data-mml-node="mi"><use data-c="1D45B" xlink:href="#MJX-3-TEX-I-1D45B"></use></g></g><g data-mml-node="mo" transform="translate(3996.3,0)"><use data-c="29" xlink:href="#MJX-3-TEX-N-29"></use></g></g></g></svg></mjx-container>,<br>here I use Haskell as an example since its form of recursion has better representation.</p><figure class="highlight hs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#123;-# LANGUAGE FlexibleInstances #-&#125;</span></span><br><span class="line"><span class="meta">&#123;-# LANGUAGE FunctionalDependencies #-&#125;</span></span><br><span class="line"><span class="meta">&#123;-# LANGUAGE MultiParamTypeClasses #-&#125;</span></span><br><span class="line"><span class="meta">&#123;-# OPTIONS_GHC -O2 #-&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Data.Char (<span class="title">ord</span>)</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">qualified</span> Data.Text <span class="keyword">as</span> T</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">qualified</span> Data.Text.IO <span class="keyword">as</span> I</span><br><span class="line"></span><br><span class="line"><span class="title">stoi</span> :: <span class="type">String</span> -&gt; <span class="type">Int</span></span><br><span class="line"><span class="title">stoi</span> s = stoi&#x27; s <span class="number">0</span></span><br><span class="line">  <span class="keyword">where</span></span><br><span class="line">    stoi&#x27; [] n = n</span><br><span class="line">    stoi&#x27; (c : cs) n = stoi&#x27; cs $ n * <span class="number">10</span> + (ord c - ord <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title">log_modpow</span> :: <span class="type">Integer</span> -&gt; <span class="type">Integer</span> -&gt; <span class="type">Integer</span> -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">log_modpow</span> _ _ <span class="number">0</span> = error <span class="string">&quot;mod cannot be 0&quot;</span></span><br><span class="line"><span class="title">log_modpow</span> _ _ <span class="number">1</span> = <span class="number">0</span></span><br><span class="line"><span class="title">log_modpow</span> _ <span class="number">0</span> _ = <span class="number">1</span></span><br><span class="line"><span class="title">log_modpow</span> a b p</span><br><span class="line">  | b `mod` <span class="number">2</span> /= <span class="number">0</span> = (result * a) `mod` p</span><br><span class="line">  | otherwise = result</span><br><span class="line">  <span class="keyword">where</span></span><br><span class="line">    temp = log_modpow a (b `div` <span class="number">2</span>) p</span><br><span class="line">    result = (temp * temp) `mod` p</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> :: <span class="type">IO</span> ()</span><br><span class="line"><span class="title">main</span> = <span class="keyword">do</span></span><br><span class="line">  [a, b, p] &lt;- map (stoi . <span class="type">T</span>.unpack) . <span class="type">T</span>.words &lt;$&gt; <span class="type">I</span>.getLine</span><br><span class="line">  <span class="keyword">let</span> a&#x27; = toInteger a</span><br><span class="line">  <span class="keyword">let</span> b&#x27; = toInteger b</span><br><span class="line">  <span class="keyword">let</span> p&#x27; = toInteger p</span><br><span class="line">  putStrLn (show (log_modpow a&#x27; b&#x27; p&#x27;))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Solution-of-Problem-1226-in-Luogu&quot;&gt;&lt;a href=&quot;#Solution-of-Problem-1226-in-Luogu&quot; class=&quot;headerlink&quot; title=&quot;Solution of Problem 1226 i</summary>
      
    
    
    
    
    <category term="Blogs" scheme="https://h-shen.github.io/tags/Blogs/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://h-shen.github.io/blogs/"/>
    <id>https://h-shen.github.io/blogs/</id>
    <published>2023-11-10T02:26:07.000Z</published>
    <updated>2023-11-12T10:38:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="My-Blogs"><a href="#My-Blogs" class="headerlink" title="My Blogs"></a>My Blogs</h3><p>Welcome to my <strong>Blog</strong> Section!</p><p>This blog is a collection of some of my coding experience and skills used in coding competitions as well as solutions for some coding problems that I found interesting.</p><p>One thing you will notice is that almost all the code for solving problems in competitive programming is written in C++, why? Well, here are some reasons:</p><ul><li><p>C++ is faster and easier to tweak than other languages in real coding competitions.</p></li><li><p>C++ has STL, which implements a lot of built-in data structures and algorithms and thus brings much convenience to coders.</p></li><li><p>You can directly use CPU instructions or inline assembly code in C++ for optimization, even though such case is pretty rare.</p></li></ul><p>There are other advantages of using C++ in coding competitions since it can help you get in touch with the hardware more easily than other languages.</p><p>Anyway, unlike those WIKI algorithms, this blog just contains some techniques or introductions of some data structures I found useful and not that hard to understand for a CS student. Happy reading!</p><ul><li><p><a href="/blog_05">Benchmark the Fastest Way of I&#x2F;O in C++ for Coding Competition</a></p></li><li><p><a href="/blog_07">The Application of Policy Based Data Structure in GCC for Coding Competition</a></p></li><li><p><a href="/blog_06">The Tricks of Modulo Operation with Exponentiation for Coding Competition</a></p></li><li><p><a href="/blog_08">The Disjoint Set Union and its Optimizations in the Coding Competition</a></p></li><li><p><a href="/blog_01">Solution of Problem 6581 in Luogu</a></p></li><li><p><a href="/blog_02">Solution of Problem 5238 in Luogu</a></p></li><li><p><a href="/blog_03">Solution of Problem 1226 in Luogu</a></p></li><li><p><a href="/blog_04">Solution of Problem 6365 in Luogu</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;My-Blogs&quot;&gt;&lt;a href=&quot;#My-Blogs&quot; class=&quot;headerlink&quot; title=&quot;My Blogs&quot;&gt;&lt;/a&gt;My Blogs&lt;/h3&gt;&lt;p&gt;Welcome to my &lt;strong&gt;Blog&lt;/strong&gt; Section!&lt;/</summary>
      
    
    
    
    
    <category term="Blogs" scheme="https://h-shen.github.io/tags/Blogs/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://h-shen.github.io/blog_02/"/>
    <id>https://h-shen.github.io/blog_02/</id>
    <published>2023-11-10T02:22:08.000Z</published>
    <updated>2023-11-12T10:05:59.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Solution-of-Problem-5238-in-Luogu"><a href="#Solution-of-Problem-5238-in-Luogu" class="headerlink" title="Solution of Problem 5238 in Luogu"></a>Solution of Problem 5238 in Luogu</h3><h4 id="Problem-Link-in-Chinese"><a href="#Problem-Link-in-Chinese" class="headerlink" title="Problem Link (in Chinese):"></a>Problem Link (in Chinese):</h4><p><a href="https://www.luogu.com.cn/problem/P5238">P5238</a></p><h4 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h4><p>Sometimes it is necessary to solve such a problem: determine whether a number <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D465" xlink:href="#MJX-2-TEX-I-1D465"></use></g></g></g></svg></mjx-container> is valid.</p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D465" xlink:href="#MJX-2-TEX-I-1D465"></use></g></g></g></svg></mjx-container> is valid if and only if it satisfies the following conditions:<ul><li>The format of <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D465" xlink:href="#MJX-2-TEX-I-1D465"></use></g></g></g></svg></mjx-container> is valid; a format-valid integer is either <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 500 688" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><use data-c="30" xlink:href="#MJX-2-TEX-N-30"></use></g></g></g></svg></mjx-container>, or it is composed of an optional negative sign, a digit between <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 500 666" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><use data-c="31" xlink:href="#MJX-2-TEX-N-31"></use></g></g></g></svg></mjx-container> and <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 500 688" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-N-39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><use data-c="39" xlink:href="#MJX-2-TEX-N-39"></use></g></g></g></svg></mjx-container>, and several digits between <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 500 688" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><use data-c="30" xlink:href="#MJX-2-TEX-N-30"></use></g></g></g></svg></mjx-container> and <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 500 688" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-N-39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><use data-c="39" xlink:href="#MJX-2-TEX-N-39"></use></g></g></g></svg></mjx-container> in sequence.</li><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D465" xlink:href="#MJX-2-TEX-I-1D465"></use></g></g></g></svg></mjx-container> is within the interval <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.959ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1749.7 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-N-5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path><path id="MJX-2-TEX-I-1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path><path id="MJX-2-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-2-TEX-I-1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-N-5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><use data-c="5B" xlink:href="#MJX-2-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(278,0)"><use data-c="1D459" xlink:href="#MJX-2-TEX-I-1D459"></use></g><g data-mml-node="mo" transform="translate(576,0)"><use data-c="2C" xlink:href="#MJX-2-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(1020.7,0)"><use data-c="1D45F" xlink:href="#MJX-2-TEX-I-1D45F"></use></g><g data-mml-node="mo" transform="translate(1471.7,0)"><use data-c="5D" xlink:href="#MJX-2-TEX-N-5D"></use></g></g></g></svg></mjx-container> (i.e., <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="9.023ex" height="1.882ex" role="img" focusable="false" viewBox="0 -694 3988.1 832" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path><path id="MJX-2-TEX-N-2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path><path id="MJX-2-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path><path id="MJX-2-TEX-I-1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D459" xlink:href="#MJX-2-TEX-I-1D459"></use></g><g data-mml-node="mo" transform="translate(575.8,0)"><use data-c="2264" xlink:href="#MJX-2-TEX-N-2264"></use></g><g data-mml-node="mi" transform="translate(1631.6,0)"><use data-c="1D465" xlink:href="#MJX-2-TEX-I-1D465"></use></g><g data-mml-node="mo" transform="translate(2481.3,0)"><use data-c="2264" xlink:href="#MJX-2-TEX-N-2264"></use></g><g data-mml-node="mi" transform="translate(3537.1,0)"><use data-c="1D45F" xlink:href="#MJX-2-TEX-I-1D45F"></use></g></g></g></svg></mjx-container>).</li></ul><p>You need to implement such a validator to determine if <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D465" xlink:href="#MJX-2-TEX-I-1D465"></use></g></g></g></svg></mjx-container> is valid for given <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="2.701ex" height="2.009ex" role="img" focusable="false" viewBox="0 -694 1193.7 888" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path><path id="MJX-2-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-2-TEX-I-1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D459" xlink:href="#MJX-2-TEX-I-1D459"></use></g><g data-mml-node="mo" transform="translate(298,0)"><use data-c="2C" xlink:href="#MJX-2-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(742.7,0)"><use data-c="1D45F" xlink:href="#MJX-2-TEX-I-1D45F"></use></g></g></g></svg></mjx-container> multiple times.</p><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>The first line contains three integers <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="5.299ex" height="2.009ex" role="img" focusable="false" viewBox="0 -694 2342.3 888" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path><path id="MJX-2-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-2-TEX-I-1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-I-1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D459" xlink:href="#MJX-2-TEX-I-1D459"></use></g><g data-mml-node="mo" transform="translate(298,0)"><use data-c="2C" xlink:href="#MJX-2-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(742.7,0)"><use data-c="1D45F" xlink:href="#MJX-2-TEX-I-1D45F"></use></g><g data-mml-node="mo" transform="translate(1193.7,0)"><use data-c="2C" xlink:href="#MJX-2-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(1638.3,0)"><use data-c="1D447" xlink:href="#MJX-2-TEX-I-1D447"></use></g></g></g></svg></mjx-container>, indicating the validation interval of the validator is <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.959ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1749.7 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-N-5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path><path id="MJX-2-TEX-I-1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path><path id="MJX-2-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-2-TEX-I-1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-2-TEX-N-5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><use data-c="5B" xlink:href="#MJX-2-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(278,0)"><use data-c="1D459" xlink:href="#MJX-2-TEX-I-1D459"></use></g><g data-mml-node="mo" transform="translate(576,0)"><use data-c="2C" xlink:href="#MJX-2-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(1020.7,0)"><use data-c="1D45F" xlink:href="#MJX-2-TEX-I-1D45F"></use></g><g data-mml-node="mo" transform="translate(1471.7,0)"><use data-c="5D" xlink:href="#MJX-2-TEX-N-5D"></use></g></g></g></svg></mjx-container>, and the number of <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D465" xlink:href="#MJX-2-TEX-I-1D465"></use></g></g></g></svg></mjx-container> to be validated.</p><p>The following <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.593ex" height="1.532ex" role="img" focusable="false" viewBox="0 -677 704 677" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D447" xlink:href="#MJX-2-TEX-I-1D447"></use></g></g></g></svg></mjx-container> lines, each line contains one <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D465" xlink:href="#MJX-2-TEX-I-1D465"></use></g></g></g></svg></mjx-container>, indicating the number to be validated. It is guaranteed that the length of <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D465" xlink:href="#MJX-2-TEX-I-1D465"></use></g></g></g></svg></mjx-container> is at least <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 500 666" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><use data-c="31" xlink:href="#MJX-2-TEX-N-31"></use></g></g></g></svg></mjx-container> and is only composed of 0~9 and <code>-</code>, and <code>-</code> will only appear as the first character.</p><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>There are <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.593ex" height="1.532ex" role="img" focusable="false" viewBox="0 -677 704 677" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D447" xlink:href="#MJX-2-TEX-I-1D447"></use></g></g></g></svg></mjx-container> lines of output, and each line contains one integer, indicating the validation result of each <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D465" xlink:href="#MJX-2-TEX-I-1D465"></use></g></g></g></svg></mjx-container>.</p><p>The validation results are defined as follows: <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 500 688" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-2-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><use data-c="30" xlink:href="#MJX-2-TEX-N-30"></use></g></g></g></svg></mjx-container> indicates that <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D465" xlink:href="#MJX-1-TEX-I-1D465"></use></g></g></g></svg></mjx-container> is valid; <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 500 666" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use></g></g></g></svg></mjx-container> indicates that the format of <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D465" xlink:href="#MJX-1-TEX-I-1D465"></use></g></g></g></svg></mjx-container> is invalid; <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 500 666" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g></g></svg></mjx-container> indicates that the format of <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D465" xlink:href="#MJX-1-TEX-I-1D465"></use></g></g></g></svg></mjx-container> is valid but it is not within the interval <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.959ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1749.7 1000" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path><path id="MJX-1-TEX-I-1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path><path id="MJX-1-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-1-TEX-I-1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><use data-c="5B" xlink:href="#MJX-1-TEX-N-5B"></use></g><g data-mml-node="mi" transform="translate(278,0)"><use data-c="1D459" xlink:href="#MJX-1-TEX-I-1D459"></use></g><g data-mml-node="mo" transform="translate(576,0)"><use data-c="2C" xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(1020.7,0)"><use data-c="1D45F" xlink:href="#MJX-1-TEX-I-1D45F"></use></g><g data-mml-node="mo" transform="translate(1471.7,0)"><use data-c="5D" xlink:href="#MJX-1-TEX-N-5D"></use></g></g></g></svg></mjx-container>.</p><h4 id="Sample-1"><a href="#Sample-1" class="headerlink" title="Sample #1"></a>Sample #1</h4><h5 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input #1"></a>Sample Input #1</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-3 3 4</span><br><span class="line">0</span><br><span class="line">00</span><br><span class="line">-0</span><br><span class="line">100000000000000000000</span><br></pre></td></tr></table></figure><h5 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output #1"></a>Sample Output #1</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h4 id="Input-Size"><a href="#Input-Size" class="headerlink" title="Input Size"></a>Input Size</h4><p>For <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.127ex;" xmlns="http://www.w3.org/2000/svg" width="5.278ex" height="1.824ex" role="img" focusable="false" viewBox="0 -750 2333 806" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-1-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-1-TEX-N-25" d="M465 605Q428 605 394 614T340 632T319 641Q332 608 332 548Q332 458 293 403T202 347Q145 347 101 402T56 548Q56 637 101 693T202 750Q241 750 272 719Q359 642 464 642Q580 642 650 732Q662 748 668 749Q670 750 673 750Q682 750 688 743T693 726Q178 -47 170 -52Q166 -56 160 -56Q147 -56 142 -45Q137 -36 142 -27Q143 -24 363 304Q469 462 525 546T581 630Q528 605 465 605ZM207 385Q235 385 263 427T292 548Q292 617 267 664T200 712Q193 712 186 709T167 698T147 668T134 615Q132 595 132 548V527Q132 436 165 403Q183 385 203 385H207ZM500 146Q500 234 544 290T647 347Q699 347 737 292T776 146T737 0T646 -56Q590 -56 545 0T500 146ZM651 -18Q679 -18 707 24T736 146Q736 215 711 262T644 309Q637 309 630 306T611 295T591 265T578 212Q577 200 577 146V124Q577 -18 647 -18H651Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use><use data-c="30" xlink:href="#MJX-1-TEX-N-30" transform="translate(500,0)"></use><use data-c="30" xlink:href="#MJX-1-TEX-N-30" transform="translate(1000,0)"></use></g><g data-mml-node="mi" transform="translate(1500,0)"><use data-c="25" xlink:href="#MJX-1-TEX-N-25"></use></g></g></g></svg></mjx-container> of the data, <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="12.152ex" height="1.844ex" role="img" focusable="false" viewBox="0 -677 5371.1 815" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-1-TEX-N-2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path><path id="MJX-1-TEX-I-1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path><path id="MJX-1-TEX-N-35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path><path id="MJX-1-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><use data-c="30" xlink:href="#MJX-1-TEX-N-30"></use></g><g data-mml-node="mo" transform="translate(777.8,0)"><use data-c="2264" xlink:href="#MJX-1-TEX-N-2264"></use></g><g data-mml-node="mi" transform="translate(1833.6,0)"><use data-c="1D447" xlink:href="#MJX-1-TEX-I-1D447"></use></g><g data-mml-node="mo" transform="translate(2815.3,0)"><use data-c="2264" xlink:href="#MJX-1-TEX-N-2264"></use></g><g data-mml-node="mn" transform="translate(3871.1,0)"><use data-c="35" xlink:href="#MJX-1-TEX-N-35"></use><use data-c="31" xlink:href="#MJX-1-TEX-N-31" transform="translate(500,0)"></use><use data-c="32" xlink:href="#MJX-1-TEX-N-32" transform="translate(1000,0)"></use></g></g></g></svg></mjx-container>, <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="2.701ex" height="2.009ex" role="img" focusable="false" viewBox="0 -694 1193.7 888" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path><path id="MJX-1-TEX-N-2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path><path id="MJX-1-TEX-I-1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D459" xlink:href="#MJX-1-TEX-I-1D459"></use></g><g data-mml-node="mo" transform="translate(298,0)"><use data-c="2C" xlink:href="#MJX-1-TEX-N-2C"></use></g><g data-mml-node="mi" transform="translate(742.7,0)"><use data-c="1D45F" xlink:href="#MJX-1-TEX-I-1D45F"></use></g></g></g></svg></mjx-container> are within the range of a 64-bit signed integer (i.e., <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="22.241ex" height="2.199ex" role="img" focusable="false" viewBox="0 -833.9 9830.3 971.9" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-N-36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path><path id="MJX-1-TEX-N-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path id="MJX-1-TEX-N-2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path><path id="MJX-1-TEX-I-1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path><path id="MJX-1-TEX-I-1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path><path id="MJX-1-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><use data-c="2212" xlink:href="#MJX-1-TEX-N-2212"></use></g><g data-mml-node="msup" transform="translate(778,0)"><g data-mml-node="mn"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use data-c="36" xlink:href="#MJX-1-TEX-N-36"></use><use data-c="33" xlink:href="#MJX-1-TEX-N-33" transform="translate(500,0)"></use></g></g></g><g data-mml-node="mo" transform="translate(2345.9,0)"><use data-c="2264" xlink:href="#MJX-1-TEX-N-2264"></use></g><g data-mml-node="mi" transform="translate(3401.7,0)"><use data-c="1D459" xlink:href="#MJX-1-TEX-I-1D459"></use></g><g data-mml-node="mo" transform="translate(3977.4,0)"><use data-c="2264" xlink:href="#MJX-1-TEX-N-2264"></use></g><g data-mml-node="mi" transform="translate(5033.2,0)"><use data-c="1D45F" xlink:href="#MJX-1-TEX-I-1D45F"></use></g><g data-mml-node="mo" transform="translate(5762,0)"><use data-c="2264" xlink:href="#MJX-1-TEX-N-2264"></use></g><g data-mml-node="msup" transform="translate(6817.8,0)"><g data-mml-node="mn"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use data-c="36" xlink:href="#MJX-1-TEX-N-36"></use><use data-c="33" xlink:href="#MJX-1-TEX-N-33" transform="translate(500,0)"></use></g></g></g><g data-mml-node="mo" transform="translate(8330.1,0)"><use data-c="2212" xlink:href="#MJX-1-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(9330.3,0)"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use></g></g></g></svg></mjx-container>).</p><p>It is guaranteed that the input file size does not exceed <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="6.756ex" height="1.595ex" role="img" focusable="false" viewBox="0 -683 2986 705" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-N-38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path><path id="MJX-1-TEX-N-4B" d="M128 622Q121 629 117 631T101 634T58 637H25V683H36Q57 680 180 680Q315 680 324 683H335V637H313Q235 637 233 620Q232 618 232 462L233 307L379 449Q425 494 479 546Q518 584 524 591T531 607V608Q531 630 503 636Q501 636 498 636T493 637H489V683H499Q517 680 630 680Q704 680 716 683H722V637H708Q633 633 589 597Q584 592 495 506T406 419T515 254T631 80Q644 60 662 54T715 46H736V0H728Q719 3 615 3Q493 3 472 0H461V46H469Q515 46 515 72Q515 78 512 84L336 351Q332 348 278 296L232 251V156Q232 62 235 58Q243 47 302 46H335V0H324Q303 3 180 3Q45 3 36 0H25V46H58Q100 47 109 49T128 61V622Z"></path><path id="MJX-1-TEX-N-42" d="M131 622Q124 629 120 631T104 634T61 637H28V683H229H267H346Q423 683 459 678T531 651Q574 627 599 590T624 512Q624 461 583 419T476 360L466 357Q539 348 595 302T651 187Q651 119 600 67T469 3Q456 1 242 0H28V46H61Q103 47 112 49T131 61V622ZM511 513Q511 560 485 594T416 636Q415 636 403 636T371 636T333 637Q266 637 251 636T232 628Q229 624 229 499V374H312L396 375L406 377Q410 378 417 380T442 393T474 417T499 456T511 513ZM537 188Q537 239 509 282T430 336L329 337H229V200V116Q229 57 234 52Q240 47 334 47H383Q425 47 443 53Q486 67 511 104T537 188Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use><use data-c="32" xlink:href="#MJX-1-TEX-N-32" transform="translate(500,0)"></use><use data-c="38" xlink:href="#MJX-1-TEX-N-38" transform="translate(1000,0)"></use><use data-c="4B" xlink:href="#MJX-1-TEX-N-4B" transform="translate(1500,0)"></use><use data-c="42" xlink:href="#MJX-1-TEX-N-42" transform="translate(2278,0)"></use></g></g></g></svg></mjx-container>. The data is generated under Linux, without the <code>\r</code> character.</p><p>The following are some special restrictions (mutually exclusive):</p><ul><li>For <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.127ex;" xmlns="http://www.w3.org/2000/svg" width="3.016ex" height="1.824ex" role="img" focusable="false" viewBox="0 -750 1333 806" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path><path id="MJX-1-TEX-N-25" d="M465 605Q428 605 394 614T340 632T319 641Q332 608 332 548Q332 458 293 403T202 347Q145 347 101 402T56 548Q56 637 101 693T202 750Q241 750 272 719Q359 642 464 642Q580 642 650 732Q662 748 668 749Q670 750 673 750Q682 750 688 743T693 726Q178 -47 170 -52Q166 -56 160 -56Q147 -56 142 -45Q137 -36 142 -27Q143 -24 363 304Q469 462 525 546T581 630Q528 605 465 605ZM207 385Q235 385 263 427T292 548Q292 617 267 664T200 712Q193 712 186 709T167 698T147 668T134 615Q132 595 132 548V527Q132 436 165 403Q183 385 203 385H207ZM500 146Q500 234 544 290T647 347Q699 347 737 292T776 146T737 0T646 -56Q590 -56 545 0T500 146ZM651 -18Q679 -18 707 24T736 146Q736 215 711 262T644 309Q637 309 630 306T611 295T591 265T578 212Q577 200 577 146V124Q577 -18 647 -18H651Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><use data-c="35" xlink:href="#MJX-1-TEX-N-35"></use></g><g data-mml-node="mi" transform="translate(500,0)"><use data-c="25" xlink:href="#MJX-1-TEX-N-25"></use></g></g></g></svg></mjx-container> of the data, <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="5.741ex" height="1.717ex" role="img" focusable="false" viewBox="0 -677 2537.6 759" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path><path id="MJX-1-TEX-N-3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path><path id="MJX-1-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D447" xlink:href="#MJX-1-TEX-I-1D447"></use></g><g data-mml-node="mo" transform="translate(981.8,0)"><use data-c="3D" xlink:href="#MJX-1-TEX-N-3D"></use></g><g data-mml-node="mn" transform="translate(2037.6,0)"><use data-c="30" xlink:href="#MJX-1-TEX-N-30"></use></g></g></g></svg></mjx-container>.</li><li>For <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.127ex;" xmlns="http://www.w3.org/2000/svg" width="4.147ex" height="1.824ex" role="img" focusable="false" viewBox="0 -750 1833 806" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-N-35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path><path id="MJX-1-TEX-N-25" d="M465 605Q428 605 394 614T340 632T319 641Q332 608 332 548Q332 458 293 403T202 347Q145 347 101 402T56 548Q56 637 101 693T202 750Q241 750 272 719Q359 642 464 642Q580 642 650 732Q662 748 668 749Q670 750 673 750Q682 750 688 743T693 726Q178 -47 170 -52Q166 -56 160 -56Q147 -56 142 -45Q137 -36 142 -27Q143 -24 363 304Q469 462 525 546T581 630Q528 605 465 605ZM207 385Q235 385 263 427T292 548Q292 617 267 664T200 712Q193 712 186 709T167 698T147 668T134 615Q132 595 132 548V527Q132 436 165 403Q183 385 203 385H207ZM500 146Q500 234 544 290T647 347Q699 347 737 292T776 146T737 0T646 -56Q590 -56 545 0T500 146ZM651 -18Q679 -18 707 24T736 146Q736 215 711 262T644 309Q637 309 630 306T611 295T591 265T578 212Q577 200 577 146V124Q577 -18 647 -18H651Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use><use data-c="35" xlink:href="#MJX-1-TEX-N-35" transform="translate(500,0)"></use></g><g data-mml-node="mi" transform="translate(1000,0)"><use data-c="25" xlink:href="#MJX-1-TEX-N-25"></use></g></g></g></svg></mjx-container> of the data, it is guaranteed that the format of <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D465" xlink:href="#MJX-1-TEX-I-1D465"></use></g></g></g></svg></mjx-container> is definitely valid.</li><li>For <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.127ex;" xmlns="http://www.w3.org/2000/svg" width="4.147ex" height="1.824ex" role="img" focusable="false" viewBox="0 -750 1833 806" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path id="MJX-1-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-1-TEX-N-25" d="M465 605Q428 605 394 614T340 632T319 641Q332 608 332 548Q332 458 293 403T202 347Q145 347 101 402T56 548Q56 637 101 693T202 750Q241 750 272 719Q359 642 464 642Q580 642 650 732Q662 748 668 749Q670 750 673 750Q682 750 688 743T693 726Q178 -47 170 -52Q166 -56 160 -56Q147 -56 142 -45Q137 -36 142 -27Q143 -24 363 304Q469 462 525 546T581 630Q528 605 465 605ZM207 385Q235 385 263 427T292 548Q292 617 267 664T200 712Q193 712 186 709T167 698T147 668T134 615Q132 595 132 548V527Q132 436 165 403Q183 385 203 385H207ZM500 146Q500 234 544 290T647 347Q699 347 737 292T776 146T737 0T646 -56Q590 -56 545 0T500 146ZM651 -18Q679 -18 707 24T736 146Q736 215 711 262T644 309Q637 309 630 306T611 295T591 265T578 212Q577 200 577 146V124Q577 -18 647 -18H651Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><use data-c="33" xlink:href="#MJX-1-TEX-N-33"></use><use data-c="30" xlink:href="#MJX-1-TEX-N-30" transform="translate(500,0)"></use></g><g data-mml-node="mi" transform="translate(1000,0)"><use data-c="25" xlink:href="#MJX-1-TEX-N-25"></use></g></g></g></svg></mjx-container> of the data, it is guaranteed that if the format of <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D465" xlink:href="#MJX-1-TEX-I-1D465"></use></g></g></g></svg></mjx-container> is valid, then <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D465" xlink:href="#MJX-1-TEX-I-1D465"></use></g></g></g></svg></mjx-container> is definitely within the range of a 64-bit signed integer.</li></ul><p>There is one non-scoring hack test point to examine the judgment of the long long boundary number. If it is 100 points UnAC, then you may not have considered this case.</p><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>The key to this problem is to check the validity of the string format and the range of the integer:</p><ul><li>If the string format does not satisfy the first condition of the problem, then output <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 500 666" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use></g></g></g></svg></mjx-container>.</li><li>If the string format satisfies the first condition but not the second, then output <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 500 666" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g></g></g></svg></mjx-container>.</li><li>If the string format satisfies both conditions, then output <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 500 688" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><use data-c="30" xlink:href="#MJX-1-TEX-N-30"></use></g></g></g></svg></mjx-container>.</li></ul><p>So:</p><ul><li>We can use <strong>regular expressions</strong> to determine the first condition, avoiding the error-proneness of manual string checking.</li><li>We can use <strong>exceptions</strong> to determine the second condition, avoiding the error-proneness of manual high-precision checking.</li></ul><h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><ul><li>The code is compiled using the C++17 standard and with O2 optimization.</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/extc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">const</span> regex <span class="title">r</span><span class="params">(<span class="string">&quot;^(0|\\-&#123;0,1&#125;[1-9][0-9]*)$&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">ll left_ll, right_ll;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">static</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">parse</span><span class="params">(<span class="type">const</span> string &amp;s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">regex_match</span>(s, r)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ll temp = <span class="built_in">stoll</span>(s);</span><br><span class="line">        <span class="keyword">if</span> (temp &gt;= left_ll &amp;&amp; temp &lt;= right_ll) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="built_in">catch</span> (out_of_range &amp;ex) &#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; left_ll &gt;&gt; right_ll &gt;&gt; t;</span><br><span class="line">    cin.<span class="built_in">get</span>();</span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">getline</span>(cin, s);</span><br><span class="line">        cout &lt;&lt; <span class="built_in">parse</span>(s) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Solution-of-Problem-5238-in-Luogu&quot;&gt;&lt;a href=&quot;#Solution-of-Problem-5238-in-Luogu&quot; class=&quot;headerlink&quot; title=&quot;Solution of Problem 5238 i</summary>
      
    
    
    
    
    <category term="Blogs" scheme="https://h-shen.github.io/tags/Blogs/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://h-shen.github.io/blog_01/"/>
    <id>https://h-shen.github.io/blog_01/</id>
    <published>2023-11-10T02:19:24.000Z</published>
    <updated>2023-11-12T08:57:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Solution-of-Problem-6581-in-Luogu"><a href="#Solution-of-Problem-6581-in-Luogu" class="headerlink" title="Solution of Problem 6581 in Luogu"></a>Solution of Problem 6581 in Luogu</h2><h4 id="Problem-Link-in-Chinese"><a href="#Problem-Link-in-Chinese" class="headerlink" title="Problem Link (in Chinese):"></a>Problem Link (in Chinese):</h4><p><a href="https://www.luogu.com.cn/problem/P6581">P6581</a></p><h4 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h4><p>You are given an integer <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.726ex" height="1.643ex" role="img" focusable="false" viewBox="0 -704 763 726" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D442" xlink:href="#MJX-1-TEX-I-1D442"></use></g></g></g></svg></mjx-container>，obtain the number of possible <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.697ex" height="1.62ex" role="img" focusable="false" viewBox="0 -716 750 716" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D434" xlink:href="#MJX-1-TEX-I-1D434"></use></g></g></g></svg></mjx-container>s such that <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.564ex;" xmlns="http://www.w3.org/2000/svg" width="7.698ex" height="2.26ex" role="img" focusable="false" viewBox="0 -749.5 3402.6 999" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path><path id="MJX-1-TEX-I-1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path><path id="MJX-1-TEX-N-3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path><path id="MJX-1-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><use data-c="7C" xlink:href="#MJX-1-TEX-N-7C"></use></g><g data-mml-node="mi" transform="translate(278,0)"><use data-c="1D434" xlink:href="#MJX-1-TEX-I-1D434"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1028,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><use data-c="7C" xlink:href="#MJX-1-TEX-N-7C"></use></g></g><g data-mml-node="mo" transform="translate(1583.8,0)"><use data-c="3C" xlink:href="#MJX-1-TEX-N-3C"></use></g><g data-mml-node="mi" transform="translate(2639.6,0)"><use data-c="1D442" xlink:href="#MJX-1-TEX-I-1D442"></use></g></g></g></svg></mjx-container>.</p><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>an integer <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.726ex" height="1.643ex" role="img" focusable="false" viewBox="0 -704 763 726" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D442" xlink:href="#MJX-1-TEX-I-1D442"></use></g></g></g></svg></mjx-container></p><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>an integer indicates the number of possible <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.697ex" height="1.62ex" role="img" focusable="false" viewBox="0 -716 750 716" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D434" xlink:href="#MJX-1-TEX-I-1D434"></use></g></g></g></svg></mjx-container>s</p><h4 id="Sample-1"><a href="#Sample-1" class="headerlink" title="Sample #1"></a>Sample #1</h4><h5 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input #1"></a>Sample Input #1</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h5 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output #1"></a>Sample Output #1</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h4 id="Sample-2"><a href="#Sample-2" class="headerlink" title="Sample #2"></a>Sample #2</h4><h5 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input #2"></a>Sample Input #2</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1145141919810</span><br></pre></td></tr></table></figure><h5 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output #2"></a>Sample Output #2</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2290283839619</span><br></pre></td></tr></table></figure><h4 id="Sample-3"><a href="#Sample-3" class="headerlink" title="Sample #3"></a>Sample #3</h4><h5 id="Sample-Input-3"><a href="#Sample-Input-3" class="headerlink" title="Sample Input #3"></a>Sample Input #3</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12345</span><br></pre></td></tr></table></figure><h5 id="Sample-Output-3"><a href="#Sample-Output-3" class="headerlink" title="Sample Output #3"></a>Sample Output #3</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24689</span><br></pre></td></tr></table></figure><h4 id="Explanation-for-sample-1"><a href="#Explanation-for-sample-1" class="headerlink" title="Explanation for sample #1"></a>Explanation for sample #1</h4><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.697ex" height="1.62ex" role="img" focusable="false" viewBox="0 -716 750 716" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D434" xlink:href="#MJX-1-TEX-I-1D434"></use></g></g></g></svg></mjx-container> could be -1, 0, 1.<h4 id="Input-Size"><a href="#Input-Size" class="headerlink" title="Input Size"></a>Input Size</h4><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.564ex;" xmlns="http://www.w3.org/2000/svg" width="16.965ex" height="2.451ex" role="img" focusable="false" viewBox="0 -833.9 7498.7 1083.4" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-1-TEX-N-2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path><path id="MJX-1-TEX-N-7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path><path id="MJX-1-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-N-36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path><path id="MJX-1-TEX-N-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path id="MJX-1-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-1-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><use data-c="30" xlink:href="#MJX-1-TEX-N-30"></use></g><g data-mml-node="mo" transform="translate(777.8,0)"><use data-c="2264" xlink:href="#MJX-1-TEX-N-2264"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1833.6,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><use data-c="7C" xlink:href="#MJX-1-TEX-N-7C"></use></g></g><g data-mml-node="mi" transform="translate(2111.6,0)"><use data-c="1D442" xlink:href="#MJX-1-TEX-I-1D442"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2874.6,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><use data-c="7C" xlink:href="#MJX-1-TEX-N-7C"></use></g></g><g data-mml-node="mo" transform="translate(3430.3,0)"><use data-c="2264" xlink:href="#MJX-1-TEX-N-2264"></use></g><g data-mml-node="msup" transform="translate(4486.1,0)"><g data-mml-node="mn"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use data-c="36" xlink:href="#MJX-1-TEX-N-36"></use><use data-c="33" xlink:href="#MJX-1-TEX-N-33" transform="translate(500,0)"></use></g></g></g><g data-mml-node="mo" transform="translate(5998.4,0)"><use data-c="2212" xlink:href="#MJX-1-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(6998.7,0)"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use></g></g></g></svg></mjx-container><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.564ex;" xmlns="http://www.w3.org/2000/svg" width="2.984ex" height="2.26ex" role="img" focusable="false" viewBox="0 -749.5 1319 999" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path><path id="MJX-1-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><use data-c="7C" xlink:href="#MJX-1-TEX-N-7C"></use></g><g data-mml-node="mi" transform="translate(278,0)"><use data-c="1D442" xlink:href="#MJX-1-TEX-I-1D442"></use></g><g data-mml-node="mo" transform="translate(1041,0) translate(0 -0.5)"><use data-c="7C" xlink:href="#MJX-1-TEX-N-7C"></use></g></g></g></svg></mjx-container> indicates the absolute value of <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.726ex" height="1.643ex" role="img" focusable="false" viewBox="0 -704 763 726" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D442" xlink:href="#MJX-1-TEX-I-1D442"></use></g></g></g></svg></mjx-container>.<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>The key to this problem is to solve the absolute value inequality and the handling of integer range overflow:</p><ul><li><p>Based on the problem description, we need to determine the number of possible values for <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.697ex" height="1.62ex" role="img" focusable="false" viewBox="0 -716 750 716" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D434" xlink:href="#MJX-1-TEX-I-1D434"></use></g></g></g></svg></mjx-container> given <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.564ex;" xmlns="http://www.w3.org/2000/svg" width="7.698ex" height="2.26ex" role="img" focusable="false" viewBox="0 -749.5 3402.6 999" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path><path id="MJX-1-TEX-I-1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path><path id="MJX-1-TEX-N-3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path><path id="MJX-1-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><use data-c="7C" xlink:href="#MJX-1-TEX-N-7C"></use></g><g data-mml-node="mi" transform="translate(278,0)"><use data-c="1D434" xlink:href="#MJX-1-TEX-I-1D434"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1028,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><use data-c="7C" xlink:href="#MJX-1-TEX-N-7C"></use></g></g><g data-mml-node="mo" transform="translate(1583.8,0)"><use data-c="3C" xlink:href="#MJX-1-TEX-N-3C"></use></g><g data-mml-node="mi" transform="translate(2639.6,0)"><use data-c="1D442" xlink:href="#MJX-1-TEX-I-1D442"></use></g></g></g></svg></mjx-container>. Therefore, we can discuss it based on the range of <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.726ex" height="1.643ex" role="img" focusable="false" viewBox="0 -704 763 726" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D442" xlink:href="#MJX-1-TEX-I-1D442"></use></g></g></g></svg></mjx-container>:</p><ul><li><p>If <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="5.875ex" height="1.905ex" role="img" focusable="false" viewBox="0 -704 2596.6 842" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path><path id="MJX-1-TEX-N-2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path><path id="MJX-1-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D442" xlink:href="#MJX-1-TEX-I-1D442"></use></g><g data-mml-node="mo" transform="translate(1040.8,0)"><use data-c="2264" xlink:href="#MJX-1-TEX-N-2264"></use></g><g data-mml-node="mn" transform="translate(2096.6,0)"><use data-c="30" xlink:href="#MJX-1-TEX-N-30"></use></g></g></g></svg></mjx-container>, then <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.564ex;" xmlns="http://www.w3.org/2000/svg" width="11.846ex" height="2.26ex" role="img" focusable="false" viewBox="0 -749.5 5236.1 999" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path><path id="MJX-1-TEX-I-1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path><path id="MJX-1-TEX-N-3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path><path id="MJX-1-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path><path id="MJX-1-TEX-N-2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path><path id="MJX-1-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><use data-c="7C" xlink:href="#MJX-1-TEX-N-7C"></use></g><g data-mml-node="mi" transform="translate(278,0)"><use data-c="1D434" xlink:href="#MJX-1-TEX-I-1D434"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1028,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><use data-c="7C" xlink:href="#MJX-1-TEX-N-7C"></use></g></g><g data-mml-node="mo" transform="translate(1583.8,0)"><use data-c="3C" xlink:href="#MJX-1-TEX-N-3C"></use></g><g data-mml-node="mi" transform="translate(2639.6,0)"><use data-c="1D442" xlink:href="#MJX-1-TEX-I-1D442"></use></g><g data-mml-node="mo" transform="translate(3680.3,0)"><use data-c="2264" xlink:href="#MJX-1-TEX-N-2264"></use></g><g data-mml-node="mn" transform="translate(4736.1,0)"><use data-c="30" xlink:href="#MJX-1-TEX-N-30"></use></g></g></g></svg></mjx-container>, which implies <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.564ex;" xmlns="http://www.w3.org/2000/svg" width="7.103ex" height="2.26ex" role="img" focusable="false" viewBox="0 -749.5 3139.6 999" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path><path id="MJX-1-TEX-I-1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path><path id="MJX-1-TEX-N-3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path><path id="MJX-1-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><use data-c="7C" xlink:href="#MJX-1-TEX-N-7C"></use></g><g data-mml-node="mi" transform="translate(278,0)"><use data-c="1D434" xlink:href="#MJX-1-TEX-I-1D434"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1028,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><use data-c="7C" xlink:href="#MJX-1-TEX-N-7C"></use></g></g><g data-mml-node="mo" transform="translate(1583.8,0)"><use data-c="3C" xlink:href="#MJX-1-TEX-N-3C"></use></g><g data-mml-node="mn" transform="translate(2639.6,0)"><use data-c="30" xlink:href="#MJX-1-TEX-N-30"></use></g></g></g></svg></mjx-container>. However, by the definition of absolute value, we know <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.564ex;" xmlns="http://www.w3.org/2000/svg" width="7.103ex" height="2.26ex" role="img" focusable="false" viewBox="0 -749.5 3139.6 999" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path><path id="MJX-1-TEX-I-1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path><path id="MJX-1-TEX-N-2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path><path id="MJX-1-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><use data-c="7C" xlink:href="#MJX-1-TEX-N-7C"></use></g><g data-mml-node="mi" transform="translate(278,0)"><use data-c="1D434" xlink:href="#MJX-1-TEX-I-1D434"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1028,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><use data-c="7C" xlink:href="#MJX-1-TEX-N-7C"></use></g></g><g data-mml-node="mo" transform="translate(1583.8,0)"><use data-c="2265" xlink:href="#MJX-1-TEX-N-2265"></use></g><g data-mml-node="mn" transform="translate(2639.6,0)"><use data-c="30" xlink:href="#MJX-1-TEX-N-30"></use></g></g></g></svg></mjx-container>, so there are no solutions in this case.</p></li><li><p>If <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="5.875ex" height="1.683ex" role="img" focusable="false" viewBox="0 -704 2596.6 744" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path><path id="MJX-1-TEX-N-3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path><path id="MJX-1-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D442" xlink:href="#MJX-1-TEX-I-1D442"></use></g><g data-mml-node="mo" transform="translate(1040.8,0)"><use data-c="3E" xlink:href="#MJX-1-TEX-N-3E"></use></g><g data-mml-node="mn" transform="translate(2096.6,0)"><use data-c="30" xlink:href="#MJX-1-TEX-N-30"></use></g></g></g></svg></mjx-container>, then we have <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="12.944ex" height="1.805ex" role="img" focusable="false" viewBox="0 -716 5721.1 798" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-1-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path><path id="MJX-1-TEX-N-3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path><path id="MJX-1-TEX-I-1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><use data-c="2212" xlink:href="#MJX-1-TEX-N-2212"></use></g><g data-mml-node="mi" transform="translate(778,0)"><use data-c="1D442" xlink:href="#MJX-1-TEX-I-1D442"></use></g><g data-mml-node="mo" transform="translate(1818.8,0)"><use data-c="3C" xlink:href="#MJX-1-TEX-N-3C"></use></g><g data-mml-node="mi" transform="translate(2874.6,0)"><use data-c="1D434" xlink:href="#MJX-1-TEX-I-1D434"></use></g><g data-mml-node="mo" transform="translate(3902.3,0)"><use data-c="3C" xlink:href="#MJX-1-TEX-N-3C"></use></g><g data-mml-node="mi" transform="translate(4958.1,0)"><use data-c="1D442" xlink:href="#MJX-1-TEX-I-1D442"></use></g></g></g></svg></mjx-container>, and thus the number of possible values for <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.697ex" height="1.62ex" role="img" focusable="false" viewBox="0 -716 750 716" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D434" xlink:href="#MJX-1-TEX-I-1D434"></use></g></g></g></svg></mjx-container> that satisfy this inequality is <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="8.389ex" height="1.778ex" role="img" focusable="false" viewBox="0 -704 3707.9 786" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-N-22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path><path id="MJX-1-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path><path id="MJX-1-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-1-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g><g data-mml-node="mo" transform="translate(722.2,0)"><use data-c="22C5" xlink:href="#MJX-1-TEX-N-22C5"></use></g><g data-mml-node="mi" transform="translate(1222.4,0)"><use data-c="1D442" xlink:href="#MJX-1-TEX-I-1D442"></use></g><g data-mml-node="mo" transform="translate(2207.7,0)"><use data-c="2212" xlink:href="#MJX-1-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(3207.9,0)"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use></g></g></g></svg></mjx-container>.</p></li></ul></li><li><p>In this problem, the range of <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.726ex" height="1.643ex" role="img" focusable="false" viewBox="0 -704 763 726" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><use data-c="1D442" xlink:href="#MJX-1-TEX-I-1D442"></use></g></g></g></svg></mjx-container> is <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.564ex;" xmlns="http://www.w3.org/2000/svg" width="16.965ex" height="2.451ex" role="img" focusable="false" viewBox="0 -833.9 7498.7 1083.4" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path id="MJX-1-TEX-N-2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path><path id="MJX-1-TEX-N-7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path><path id="MJX-1-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-N-36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path><path id="MJX-1-TEX-N-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path id="MJX-1-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-1-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><use data-c="30" xlink:href="#MJX-1-TEX-N-30"></use></g><g data-mml-node="mo" transform="translate(777.8,0)"><use data-c="2264" xlink:href="#MJX-1-TEX-N-2264"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1833.6,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><use data-c="7C" xlink:href="#MJX-1-TEX-N-7C"></use></g></g><g data-mml-node="mi" transform="translate(2111.6,0)"><use data-c="1D442" xlink:href="#MJX-1-TEX-I-1D442"></use></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2874.6,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><use data-c="7C" xlink:href="#MJX-1-TEX-N-7C"></use></g></g><g data-mml-node="mo" transform="translate(3430.3,0)"><use data-c="2264" xlink:href="#MJX-1-TEX-N-2264"></use></g><g data-mml-node="msup" transform="translate(4486.1,0)"><g data-mml-node="mn"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><use data-c="36" xlink:href="#MJX-1-TEX-N-36"></use><use data-c="33" xlink:href="#MJX-1-TEX-N-33" transform="translate(500,0)"></use></g></g></g><g data-mml-node="mo" transform="translate(5998.4,0)"><use data-c="2212" xlink:href="#MJX-1-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(6998.7,0)"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use></g></g></g></svg></mjx-container>, so there is a potential for overflow beyond the range of a long integer when calculating <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="8.389ex" height="1.778ex" role="img" focusable="false" viewBox="0 -704 3707.9 786" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-N-22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path><path id="MJX-1-TEX-I-1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path><path id="MJX-1-TEX-N-2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path><path id="MJX-1-TEX-N-31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><use data-c="32" xlink:href="#MJX-1-TEX-N-32"></use></g><g data-mml-node="mo" transform="translate(722.2,0)"><use data-c="22C5" xlink:href="#MJX-1-TEX-N-22C5"></use></g><g data-mml-node="mi" transform="translate(1222.4,0)"><use data-c="1D442" xlink:href="#MJX-1-TEX-I-1D442"></use></g><g data-mml-node="mo" transform="translate(2207.7,0)"><use data-c="2212" xlink:href="#MJX-1-TEX-N-2212"></use></g><g data-mml-node="mn" transform="translate(3207.9,0)"><use data-c="31" xlink:href="#MJX-1-TEX-N-31"></use></g></g></g></svg></mjx-container>. However, the result will definitely be within the range of <strong>unsigned long long</strong>, so we can use <strong>__int128</strong> to handle the intermediate process, and then convert the type back to <strong>unsigned long long</strong> for the result. The sample answer code is shown below:</p></li></ul><h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><ul><li>The code is compiled using the C++17 standard with O2 optimization enabled.</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/extc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> ull = <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> int128 = __int128;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll s;</span><br><span class="line">    (<span class="type">void</span>)<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;s);</span><br><span class="line">    int128 o = s;</span><br><span class="line">    int128 answer;</span><br><span class="line">    answer = (o &lt;= <span class="number">0</span>) ? <span class="number">0</span> : (<span class="number">2</span> * o - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%llu\n&quot;</span>, <span class="built_in">static_cast</span>&lt;ull&gt;(answer));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Solution-of-Problem-6581-in-Luogu&quot;&gt;&lt;a href=&quot;#Solution-of-Problem-6581-in-Luogu&quot; class=&quot;headerlink&quot; title=&quot;Solution of Problem 6581 i</summary>
      
    
    
    
    
    <category term="Blogs" scheme="https://h-shen.github.io/tags/Blogs/"/>
    
  </entry>
  
</feed>
